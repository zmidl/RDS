<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Core</name>
    </assembly>
    <members>
        <member name="T:Sias.Core.TypeConverters.STypeDescriptor">
            <summary>
            Special type descriptor supporting the following additional attributes:
             - ...
            </summary>
        </member>
        <member name="M:Sias.Core.TypeConverters.STypeDescriptor.GetProperties(System.Attribute[])">
            <summary>
            
            </summary>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:Sias.Core.TypeConverters.STypeDescriptor.GetProperties">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sias.Core.TypeConverters.STypeDescriptor.WrapProperties(System.ComponentModel.PropertyDescriptorCollection)">
            <summary>
            
            </summary>
            <param name="basePropertiess"></param>
            <returns></returns>
        </member>
        <member name="T:Sias.Core.TypeConverters.STypeDescriptionProvider">
            <summary>
            Type Descriptor provider for <see cref="T:Sias.Core.TypeConverters.STypeDescriptor"/> 
            </summary>
        </member>
        <member name="M:Sias.Core.TypeConverters.STypeDescriptionProvider.#ctor">
            <summary>
            Initializes a new instance of the <b>STypeDescriptionProvider</b> class.
            </summary>
        </member>
        <member name="M:Sias.Core.TypeConverters.STypeDescriptionProvider.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <b>STypeDescriptionProvider</b> class.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Sias.Core.TypeConverters.STypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)">
            <summary>
            Initializes a new instance of the <b>STypeDescriptionProvider</b> class.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:Sias.Core.TypeConverters.STypeDescriptionProvider.Clear(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Sias.Core.TypeConverters.STypeDescriptionProvider.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Sias.Core.TypeConverters.STypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
            <summary>
            Get a type descriptor for the given type
            </summary>
            <param name="objectType"></param>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Sias.Core.TypeConverters.STypeDescriptionProvider.BuildDescriptor(System.Type)">
            <summary>
            Add a STypeDescriptor for the given class
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="T:Sias.Core.Interfaces.IDecorator">
            <summary>
            Decorator interface
            
            This interface should be implemented by decorator classes. It allows usage
            of specific decorator methods (like FindDecoraor and GetDecoratorBase) of 
            the type manager (STypeManager).
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.IDecorator.BaseObject">
            <summary>
            Gets the BaseObject of the decorator class
            </summary>
            <value></value>
        </member>
        <member name="T:Sias.Core.STypeManager">
            <summary>
            The type manager class is a kind of toolbox around types.
            </summary>
            <details>
            The main tasks of the type manager are 
             - Dynamic types: Are registered types (e.g. devices or activities).\n
               This types can be created with its normal name. 
             - Determinate collection base element types 
             - Determinate dictionary base key types
             - Determinate all assignable types for a type
             - Providing an assembly resolver. This allows to load external assemblies
               from binary or device driver path.
             - Check loaded assemblies for signature and log assembly information.
             .
            
            </details>
            ToDo:   Implement Methods for managing special XML (de)Serialization of standard types. \n
                    This could be important if we have special needs in Serialization of standard 
                    types e.g. System.Type can't be created and should only be serialized by storing 
                    the full type name.
        </member>
        <member name="M:Sias.Core.STypeManager.#cctor">
            <summary>
            Initializes a new instance of the <b>STypeManager</b> class.
            </summary>
        </member>
        <member name="M:Sias.Core.STypeManager.FindAssembly(System.String)">
            <summary>
            Find an assembly in the loaded assembly list.
            </summary>
            <param name="Name">assembly name</param>
            <returns>The Assembly if found, null if not</returns>
        </member>
        <member name="M:Sias.Core.STypeManager.TestBox(System.String)">
            <summary>
            Test method .
            </summary>
            <param name="st"></param>
        </member>
        <member name="M:Sias.Core.STypeManager.AssemblyInfo(System.Reflection.Assembly,System.String)">
            <summary>
            Return an assembly information string containing Assembly name, product version, 
            assembly version, file version, company and load path.
            </summary>
            <param name="Asm">The Assmbly to get the information string</param>
            <param name="Company">The company name</param>
            <returns>An assembly information string</returns>
        </member>
        <member name="M:Sias.Core.STypeManager.CheckAssembly(System.Reflection.Assembly)">
            <summary>
            This method is called to check and log the specified assembly.
            </summary>
            <param name="asm">The assembly to check</param>
        </member>
        <member name="M:Sias.Core.STypeManager.CheckLoadedAssemblies">
            <summary>
            Check and log all loaded assemblies.
            
            This method has to be called if a log handler is added at any point of the application to
            make sure that all assemblies are loaded before they are logged also in this log.
            </summary>
        </member>
        <member name="M:Sias.Core.STypeManager.AssemblyLoadEvent(System.Object,System.AssemblyLoadEventArgs)">
            <summary>
            This method is called if a new assembly is loaded. 
            It is used to log and check the loaded assembly.
            </summary>
            <param name="sender">The sender of the event </param>
            <param name="args">The Assembly load event arguments </param>
        </member>
        <member name="F:Sias.Core.STypeManager._DisableMissingAssemblyDialog">
            <summary>Missing assembly dialog deactivation property field</summary>
        </member>
        <member name="M:Sias.Core.STypeManager.CheckAssemblyPath(System.String,System.String)">
            <summary>
            Check for loadable assembly on <paramref name="location"/>.
            </summary>
            <param name="location">Assembly search base path</param>
            <param name="filePath">Assembly file path (relative path + file name)</param>
            <returns>true if assembly is found, otherwise false</returns>
        </member>
        <member name="M:Sias.Core.STypeManager.CheckAssemblyExePath(System.String,System.String)">
            <summary>
            Check for loadable assembly on <paramref name="location"/>.
            </summary>
            <param name="location">Assembly search base path</param>
            <param name="filePath">Assembly file path (relative path + file name)</param>
            <returns>true if assembly is found, otherwise false</returns>
        </member>
        <member name="M:Sias.Core.STypeManager.AssemblyResolveEvent(System.Object,System.ResolveEventArgs)">
            <summary>
            Assembly resolve event.
            
            This method is called when an assembly can not be found.
            </summary>
            <details>
            It tries to find the assembly 
             - at configured application paths
                - at applications device driver path (\ref SConfigurationManager.DeviceDriverPath)
                - at applications actions path (\ref SConfigurationManager.ActionPath)
                .
             - at paths relative to \ref SConfigurationManager.BinaryBasePath :
                - at applications binary path (\ref SConfigurationManager.BinaryBasePath + "bin\")
                - at default applications device path (\ref SConfigurationManager.BinaryBasePath + "bin\Device")
                - at default applications action path (\ref SConfigurationManager.BinaryBasePath + "bin\Actions")
                .
             - at paths relative to application start path
                - at "bin" relative to application start path
                - at "bin\Devices" relative to application start path
                - at "bin\Actions" relative to application start path
                .
             - at a list of custom pathes defined at \ref Config_CustomAsssemblyPath "CustomAsssemblyPath" variable 
               configuration in Configuration manager.
             .
            </details>
            <param name="sender">The object sending the event</param>
            <param name="args">The ResolveEventArgs containing the resolve data</param>
            <returns>The loaded assembly if found</returns>
        </member>
        <member name="M:Sias.Core.STypeManager.ActivateAssemblyResolver">
            <summary>
            Activate assembly resolving.
            </summary>
        </member>
        <member name="F:Sias.Core.STypeManager._RegisteredTypes">
            <summary>Dictionary of Registered Types field</summary>
        </member>
        <member name="M:Sias.Core.STypeManager.RegisterType(System.Type)">
            <summary>
            Add the types included in assembly to the dynamic type array.
            </summary>
            <param name="MyType">The type to be added to the dynamic types</param>
        </member>
        <member name="M:Sias.Core.STypeManager.RegisterTypesOfAssembly(System.String,System.Type)">
            <summary>
            Add the types included in assembly to the dynamic type array.
            </summary>
            <param name="AssemblyFileName">Assembly file name</param>
            <param name="TypeSelector">Type selector</param>
        </member>
        <member name="M:Sias.Core.STypeManager.RegisterTypesOfAssembly(System.String)">
            <summary>
            Add the types included in assembly to the dynamic type array.
            </summary>
            <param name="AssemblyFileName">Name of the assembly file to register</param>
        </member>
        <member name="M:Sias.Core.STypeManager.GetRegisteredTypes(System.Int32,System.Type,System.Type[])">
            <summary>
            Get all registered types assignable to <paramref name="FilterType"/>,
            but not in <paramref name="ExcludedTypes"/>.
            
            This method creates a list of all types derived from the given filter type
            but not included in the excluded type or (optionally) derived from one of 
            the exclude types.
            </summary>
            <param name="Mode">get mode (see \ref GetRegisteredTypeMode)</param>
            <param name="FilterType">The type used as filter</param>
            <param name="ExcludedTypes">As list of types to exclude</param>
            <returns></returns>
            TODO: Do we need to exclude or select objects implementing a specific interface?
        </member>
        <member name="M:Sias.Core.STypeManager.GetRegisteredType(System.String)">
            <summary>
            Find type <paramref name="TypeName"/> in registered type list.
            
            Important: This method will only return registered types!
            </summary>
            <param name="TypeName">Name or FullName of the registered type</param>
            <returns>The registered type or null if not found (not registered)</returns>
        </member>
        <member name="M:Sias.Core.STypeManager.GetDefaultType(System.String)">
            <summary>
            Get default type from type name. 
            
            The following types can be retrieved by its full and short names:
             - all registered (dynamic) types
             - all types directly defined in system namespace (Int32, String, ...)
             .
            </summary>
            <param name="TypeName">Name of the type</param>
            <returns>The System.Type, null if type not found</returns>
        </member>
        <member name="M:Sias.Core.STypeManager.IsDefaultType(System.String)">
            <summary>
            Check if the type defined by type name is a default type.
            
            Check if the given type name can be determinated calling 
            GetDefaultType. All types retrievable by GetDefaultType do 
            not need to get a type attribute at xml serialization.
            </summary>
            <param name="ShortTypeName">The name of the type</param>
            <returns>True if default is type, otherwise false.</returns>
        </member>
        <member name="M:Sias.Core.STypeManager.FindLoadedType(System.String)">
            <summary>
            Find defined type in all loaded assemblies.
            
            Type.GetType(TypeName) often does not find types even if they are 
            defined in already loaded assemblies.
            This method will search the type in all loaded assemblies.
            </summary>
            <param name="TypeName">Full name of the type to find</param>
            <returns>The Type if found, null if not found</returns>
        </member>
        <member name="M:Sias.Core.STypeManager.FindLoadedTypes(System.String)">
            <summary>
            Find all types matching <paramref name="TypeName"/>
            
            Type.GetType(TypeName) often does not find types also if they are loaded.
            This method will search the type in all loaded assemblies.
            </summary>
            <param name="TypeName">Full name of the type to find</param>
            <returns>The Type if found, null if not found</returns>
        </member>
        <member name="M:Sias.Core.STypeManager.GetAssignableTypesOf(System.Type)">
            <summary>
            Get a list of all loaded types assignable to <paramref name="BaseType"/>
            
            This method is used to get all types assignable to the given base type
            in the loaded assemblies.
            </summary>
            <param name="BaseType">Base type fro finding subtypes</param>
            <returns>List of assignable types</returns>
        </member>
        <member name="M:Sias.Core.STypeManager.GetCollectionElementType(System.Collections.ICollection)">
            <summary>
            Get collection element type of <paramref name="List"/>
            
            This method is used to get the collection element type of <paramref name="List"/>.
            In case the given collection is derived from SObjectCollection the type can get 
            from ((SObjectCollection)List).Filter. Otherwise the collection element is retrieved 
            using the collection type.
            </summary>
            <param name="List">The list to check</param>
            <returns>The base element type of the list</returns>
        </member>
        <member name="M:Sias.Core.STypeManager.GetCollectionElementType(System.Type)">
            <summary>
            Get collection element type of collection type <paramref name="CollectionType"/>
            
            This method is used to determinate collection element type of <paramref name="CollectionType"/>.
            Search priorities:
             - Try getting type from "Item" property.
             - Try getting type from first parameter of "CopyTo" method.
             - Try getting type from first parameter of "Contains" method.
             - Try getting type from first parameter of "Add" method.
             .
            \b Important: The method of finding the collection element type is not 100% safe. 
                          Depending on the collection structure the method may return an 
                          unexpected element type.
            </summary>
            <param name="CollectionType">The type of the collection</param>
            <returns>The element type if found, otherwise typeof(Object).</returns>
        </member>
        <member name="M:Sias.Core.STypeManager.GetDictionaryKeyType(System.Collections.IDictionary)">
            <summary>
            Get dictionary key type of <paramref name="Dict"/>
            
            This method is used to get the dictionary key type of <paramref name="Dict"/>.
            </summary>
            <param name="Dict">The dictionary to get the key type form</param>
            <returns>The key type of <paramref name="Dict"/></returns>
        </member>
        <member name="M:Sias.Core.STypeManager.GetDictionaryKeyType(System.Type)">
            <summary>
            Get dictionary key type of type <paramref name="DictType"/>
            
            Tries to get the base key type of a dictionary.
            </summary>
            <param name="DictType">The type of the dictionary</param>
            <returns>The base key type of <paramref name="DictType"/></returns>
        </member>
        <member name="M:Sias.Core.STypeManager.CreateInstance(System.Type)">
            <summary>
            Create a new Instance of type <paramref name="ObjectType"/>.
            
            Important: This method is designed for creating default instances. 
            So one of the following conditions needs to be true:
             - The type implements a default constructor
             - The type has a type converter which is able to convert an 
               empty string to a default object.
             .
            ATTENTION: This method can also create arrays, but this arrays 
                       will have no elements!
            </summary>
            <param name="ObjectType">Type of the object to create</param>
            <returns>The new instance, null if not creatable.</returns>
        </member>
        <member name="M:Sias.Core.STypeManager.DynamicCreate(System.String,System.String,System.Object)">
            <summary>
            Create an object from its type name and the configuration string.
            </summary>
            <param name="NameOfType">Object type to create</param>
            <param name="Config">configuration string</param>
            <param name="DefaultObject">Default object</param>
            <returns>Dynamically created object</returns>
        </member>
        <member name="M:Sias.Core.STypeManager.FindDecorator(System.Object,System.Type)">
            <summary>
            Find a specific decorator class in a decorator class tree.
            
            Important: It is recommended to use the returned instance only to check if 
            a class is already decorated
            </summary>
            <param name="obj">Class instance</param>
            <param name="DecoratorType">Decorator type</param>
            <returns>The instance of the decorator; null if </returns>
        </member>
        <member name="M:Sias.Core.STypeManager.IsObjectDecorated(System.Object,System.Type)">
            <summary>
            Check if a decorator class tree is decorated with the defined decoarot type
            </summary>
            <param name="obj">Class instance</param>
            <param name="DecoratorType">Decorator type</param>
            <returns>True if object is decorated otherwise false</returns>
        </member>
        <member name="M:Sias.Core.STypeManager.GetDecoratorBase(System.Object)">
            <summary>
            Check if a decorator class tree is decorated with the defined decoarot type
            </summary>
            <param name="obj">Class instance</param>
            <returns>True if object is decorated otherwise false</returns>
        </member>
        <member name="M:Sias.Core.STypeManager.RemoveDecorator(System.Object,System.Object)">
            <summary>
            Remove decorator from decorator tree
            </summary>
            <param name="OrgObj">The decorated object</param>
            <param name="twm">The decoration instance</param>
            <returns>The undecorated object</returns>
        </member>
        <member name="P:Sias.Core.STypeManager.DisableMissingAssemblyDialog">
            <summary>Missing assembly dialog deactivation property</summary>
        </member>
        <member name="P:Sias.Core.STypeManager.RegisteredTypes">
            <summary>Dictionary of Registered Types property</summary>
        </member>
        <member name="T:Sias.Core.STypeManager.GetRegisteredTypeMode">
            <summary>
            GetObjectType mode constants.
            </summary>
        </member>
        <member name="F:Sias.Core.STypeManager.GetRegisteredTypeMode.AddFilterType">
            <summary>Add given filter Type if available</summary>
        </member>
        <member name="F:Sias.Core.STypeManager.GetRegisteredTypeMode.LeaveExcludeSubTypes">
            <summary>Exclude also derived types of the excluded types</summary>
        </member>
        <member name="F:Sias.Core.STypeManager.GetRegisteredTypeMode.IncludeAbstractTypes">
            <summary>Include abstract classes also</summary>
        </member>
        <member name="F:Sias.Core.STypeManager.GetRegisteredTypeMode.IncludeInterfaces">
            <summary>Include interfaces also</summary>
        </member>
        <member name="T:Sias.Core.Interfaces.IParameterSet">
            <summary>
            Summary description for IParameterSet.
            </summary>
        </member>
        <member name="M:Sias.Core.Interfaces.IParameterSet.ToXMLString(System.Boolean)">
            <summary>
            Get configuration
            
            Get parameter set as XML configuration string
            </summary>
            <param name="Formated">True means return formatted XML configuration string</param>
            <returns>XML configuration string</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.IParameterSet.FromXMLString(System.String)">
            <summary>
            Set configuration
            
            Set configuration of the parameter set from XML configuration string
            </summary>
            <param name="Config">XML configuration string</param>
            <returns>True is successfully set</returns>
        </member>
        <member name="P:Sias.Core.Interfaces.IParameterSet.Name">
            <summary>Name of the parameter set</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.IParameterSet.Version">
            <summary>Version of the parameter set</summary>
        </member>
        <member name="T:Sias.Core.STimer">
            <summary>
            High performance timer object.
            
            This timer is based on the PCs High performance timer. 
            It uses the process time stored in a double based on milliseconds [ms]. 
            The resolution on a standard PC is better than 1 ms.
            </summary>
        </member>
        <member name="F:Sias.Core.STimer.TimeMark">
            <summary>
            Time marker (based on the process time) in [ms].
            </summary>
        </member>
        <member name="M:Sias.Core.STimer.QueryPerformanceCounter(System.Int64@)">
            <summary>Frequency</summary>
        </member>
        <member name="M:Sias.Core.STimer.#ctor">
             <summary>
             Default constructor. 
            
             This starts a timer. To get the running time use
             Elapsed of Elapsed_ms member.
             </summary>
        </member>
        <member name="M:Sias.Core.STimer.#ctor(System.Double)">
            <summary>
            This constructor starts a TimeOut timer. To get the remaining timeout, 
            use Remaining of Remaining_ms member.
            </summary>
            <param name="TimeOut">Timeout value in [ms]</param>
        </member>
        <member name="M:Sias.Core.STimer.#ctor(System.Int32)">
            <summary>
            This constructor starts a TimeOut timer. To get the remaining timeout 
            use Remaining of Remaining_ms member.
            </summary>
            <param name="TimeOut">Timeout value in [ms]</param>
        </member>
        <member name="M:Sias.Core.STimer.#ctor(Sias.Core.STimer)">
            <summary>
            Copy constructor.
            </summary>
            <param name="timer">timer</param>
        </member>
        <member name="M:Sias.Core.STimer.Reset">
            <summary>Reset/Restart the timer</summary>
        </member>
        <member name="M:Sias.Core.STimer.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object as copy of the current instance</returns>
        </member>
        <member name="P:Sias.Core.STimer.ProcessTime">
            <summary>
            Get process timer [ms].
            
            This function returns an process timer. It is scaled in milliseconds.
            It does not correspond with the system time. Typically it is used as a
            timer for timeouts and incubation times etc.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Sias.Core.STimer.Remaining">
            <summary>
            This property returns the remaining time in milliseconds of a timeout timer. 
            A negative value indicates that the TimeOut is elapsed.
            </summary>
        </member>
        <member name="P:Sias.Core.STimer.Elapsed">
            <summary>
            This property returns the elapsed time in milliseconds of the timer.
            </summary>
        </member>
        <member name="P:Sias.Core.STimer.Remaining_ms">
            <summary>
            This property returns the remaining time of a timeout timer. 
            A negative value indicates that the TimeOut is elapsed.
            </summary>
        </member>
        <member name="P:Sias.Core.STimer.Elapsed_ms">
            <summary>
            This property returns the elapsed time of the timer.
            </summary>
        </member>
        <member name="P:Sias.Core.STimer.Remaining_s">
            <summary>
            This property returns the remaining time in milliseconds of a timeout timer. 
            A negative value indicates that the TimeOut is elapsed.
            </summary>
        </member>
        <member name="P:Sias.Core.STimer.Elapsed_s">
            <summary>
            This property returns the elapsed time in milliseconds of the timer.
            </summary>
        </member>
        <member name="P:Sias.Core.STimer.IsLapsed">
            <summary>
            Return whether the (timeout) timer is lapsed or not.
            </summary>
        </member>
        <member name="T:Sias.Core.SStringCategoryTraceLogHandler">
            <summary>
            Log handler delegate.
            
            This delegate defines the prototype for log handlers. Log handlers can be defined as 
            high level and log level log handler. In general both are identical, but the low level 
            log handlers should be very fast, as they may be called very often and the performance 
            of the system may get very low.
            </summary>
            <param name="message">The message to log</param>
            <param name="categories">The categories of the message(separated by '|')</param>
            <param name="Newline">True if start a new log line, false to append last log line</param>
        </member>
        <member name="T:Sias.Core.SStringCategoryTraceLogger">
            <summary>
            This class implements a string category trace logger.
            
            At construction it gets a logger delegate. This delegate allows to get the 
            applications trace messages.
            
            If a category is passed to the trace, then the category is routed to the 
            trace logger delegate. \n
            If no category is passed or the category is null(nothing), then the logger 
            will use the default category. 
            If the default category is defined as null, then the default category will 
            be the class name of the calling (non system) class.
            </summary>
        </member>
        <member name="M:Sias.Core.SStringCategoryTraceLogger.#ctor(Sias.Core.SStringCategoryTraceLogHandler)">
            <summary>
            Initialize a new instance of the <b>STraceLogger</b> class for a 
            string category.
            </summary>
            <param name="StringCategoryTraceLogger"></param>
        </member>
        <member name="F:Sias.Core.SStringCategoryTraceLogger._DefaultCategory">
            <summary>Default category (used if not category is given) field</summary>
        </member>
        <member name="M:Sias.Core.SStringCategoryTraceLogger.GetCallingTypeName(System.Int32)">
            <summary>
            Get the type name of the calling class.
            </summary>
            <param name="l">Stack search start level</param>
            <returns>The type name of the calling class</returns>
        </member>
        <member name="M:Sias.Core.SStringCategoryTraceLogger.WriteLog(System.String,System.String)">
            <summary>
            Write log line to log file (category dependent).
            </summary>
            <param name="message">Debug message   (null = no logging)</param>
            <param name="category">Debug category (null = DefaultCategory)</param>
        </member>
        <member name="M:Sias.Core.SStringCategoryTraceLogger.Write(System.String)">
            <summary>
            Write debug/trace line without a new line to log.
            </summary>
            <param name="message">Debug/trace line message</param>
        </member>
        <member name="M:Sias.Core.SStringCategoryTraceLogger.Write(System.String,System.String)">
            <summary>
            Write debug/trace line with category but without a new line to log.
            </summary>
            <param name="message">Debug/trace line message</param>
            <param name="category">Debug/trace category</param>
        </member>
        <member name="M:Sias.Core.SStringCategoryTraceLogger.WriteLine(System.String)">
            <summary>
            Write debug/trace line followed by a new line to log.
            </summary>
            <param name="message">Debug/trace line message</param>
        </member>
        <member name="M:Sias.Core.SStringCategoryTraceLogger.WriteLine(System.String,System.String)">
            <summary>
            Write debug/trace line with category followed by a new line to log.
            </summary>
            <param name="message">Debug/trace line message</param>
            <param name="category">Debug/trace category</param>
        </member>
        <member name="P:Sias.Core.SStringCategoryTraceLogger.DefaultCategory">
            <summary>
            Default category (used if not category is given) property.
            
            Important: If the Default category is null, the system tries to generate 
            a category name by the type of the calling object (including namespace).
            </summary>
        </member>
        <member name="T:Sias.Core.SStringCategoryTraceLogger.SCategoryEqualityComparer">
            <summary>
            Category Equality Comparer.
            
            This comparer class is used to find the categories in the Log Categories dictionary.
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="M:Sias.Core.SStringCategoryTraceLogger.SCategoryEqualityComparer.Equals(System.String,System.String)">
             <summary>
             Compare a category with one log category dictionary entry name.
            
             It returns true (are equal) in case of the category starts with the 
             log category entry name.
             </summary>
             <param name="DictionaryCategorieEntryName">Log category dictionary entry name</param>
             <param name="Category">Category name (given as second parameter at Debug.WriteLine)</param>
             <returns></returns>
        </member>
        <member name="M:Sias.Core.SStringCategoryTraceLogger.SCategoryEqualityComparer.GetHashCode(System.String)">
            <summary>
            Get hash code.
            
            As the dictionary calls equals only for identical hash code this needs to 
            return the same value for all objects!
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Sias.Core.SIntCategoryTraceLogHandler">
            <summary>
            Log handler delegate.
            
            This delegate defines the prototype for log handlers. Log handlers can be defined as 
            high level and log level log handler. In general both are identical, but the low level 
            log handlers should be very fast, as they may be called very often and the performance 
            of the system may get very low.
            </summary>
            <param name="message">The message to log</param>
            <param name="categories">Integer categories</param>
            <param name="Group">Log group</param>
            <param name="Newline">True if start a new log line, false to append last log line</param>
        </member>
        <member name="T:Sias.Core.SIntCategoryTraceLogger">
            <summary>
            Trace logger.
            
            This class is used to write debug or trace messages to log files with integer 
            categories. There for it implements a trace listener. 
            
            Important:  The sias .NET CAN drivers (Dev_CanDev) will activate this trace 
                        listener at after loading the CanIO.dll to route the trace output 
                        to the default CanIO log file.
            
            It can get configured / used in several ways:\n
            <b>a) Passing categories</b>\n
            Categories can be used by using one of the following Debug or Trace methods
             -	public virtual void Write(object o, string category);
             -	public virtual void Write(string message, string category);
             -	public virtual void WriteLine(object o, string category);
             -	public virtual void WriteLine(string message, string category);
             .
            The passed categories will be used to be translated into integers. 
            When the CanIO gets loaded it SCanIO defines the following category 
            translations:
             - SLogManager.CategoryInfo         ==> eLOG_CONST.LOG_INFO
             - SLogManager.CategoryDetail       ==> eLOG_CONST.LOG_DETAIL
             - SLogManager.CategorySubdetail    ==> eLOG_CONST.LOG_SUBDET
             - SLogManager.CategoryDeviceIO     ==> eLOG_CONST.LOG_RS232
             - SLogManager.CategoryError        ==> eLOG_CONST.LOG_ERROR
             - SLogManager.CategoryWarning      ==> eLOG_CONST.LOG_WARNING
             - SLogManager.CategoryDebug        ==> eLOG_CONST.LOG_DEBUG
             - "CanIO"                          ==> eLOG_CONST.LOG_SEND
             .
            In Addition you can add your own translations using LogCategories.Add(). \n
            IMPORTANT:  If the StringToInt translation results in 0 the line is not send
                        to the integer category trace logger!
            
            <b>b) Using default categories</b>\n
            Using default categories can be used with all Write/WriteLine methods. 
            If a category parameter is passed, it has to be set to null. 
            In this case the DefaultCategory property is used as category name. 
            If the DefaultCategory property is null the system calculates the type 
            of the calling object and uses this type including the namespace as 
            category. This allows an easy filter on namespaces.
            
            You can add a LogCategory for the CanDev namespace by calling
            SDebugListener.LogCategories.Add("Sias.CANDev", eLOG_CONST.LOG_DEBUG | eLOG_CONST.LOG_GROUP7);
            This Category logs all default traces of all Sias.CanDev classes to 
            the debug log of group 7. As long as this Category is not defined the
            lines will not be written to the log file.
            </summary>
        </member>
        <member name="M:Sias.Core.SIntCategoryTraceLogger.#ctor(Sias.Core.SIntCategoryTraceLogHandler)">
            <summary>
            Initialize a new instance of the <b>STraceLogger</b> class for a 
            string category.
            </summary>
            <param name="IntCategoryTraceLogHandler">The used integer category log handler</param>
        </member>
        <member name="F:Sias.Core.SIntCategoryTraceLogger._LogCategories">
            <summary>Log categories field</summary>
        </member>
        <member name="F:Sias.Core.SIntCategoryTraceLogger._DefaultCategory">
            <summary>Default category (used if not category is given) field</summary>
        </member>
        <member name="M:Sias.Core.SIntCategoryTraceLogger.GetCallingTypeName(System.Int32)">
            <summary>
            Get the type name of the calling class.
            </summary>
            <param name="l">Stack search start level</param>
            <returns>The type name of the calling class</returns>
        </member>
        <member name="M:Sias.Core.SIntCategoryTraceLogger.GetLogType(System.String,System.Int32@)">
             <summary>
             Get log type from category.
            
             This method searches for the category in the log category list.
             </summary>
             <param name="Category">Category</param>
             <param name="Group">The log group</param>
             <returns>Log type for the category</returns>
        </member>
        <member name="M:Sias.Core.SIntCategoryTraceLogger.WriteLog(System.String,System.String)">
            <summary>
            Write log line to log file (category dependent).
            </summary>
            <param name="message">Debug message   (null = no logging)</param>
            <param name="category">Debug category (null = DefaultCategory)</param>
            <returns>True if logged the message, false if not</returns>
        </member>
        <member name="M:Sias.Core.SIntCategoryTraceLogger.Write(System.String)">
            <summary>
            Write debug/trace line without a new line to log.
            </summary>
            <param name="message">Debug/trace line message</param>
        </member>
        <member name="M:Sias.Core.SIntCategoryTraceLogger.Write(System.String,System.String)">
            <summary>
            Write debug/trace line with category but without a new line to log.
            </summary>
            <param name="message">Debug/trace line message</param>
            <param name="category">Debug/trace category</param>
        </member>
        <member name="M:Sias.Core.SIntCategoryTraceLogger.WriteLine(System.String)">
            <summary>
            Write debug/trace line followed by a new line to log.
            </summary>
            <param name="message">Debug/trace line message</param>
        </member>
        <member name="M:Sias.Core.SIntCategoryTraceLogger.WriteLine(System.String,System.String)">
            <summary>
            Write debug/trace line with category followed by a new line to log.
            </summary>
            <param name="message">Debug/trace line message</param>
            <param name="category">Debug/trace category</param>
        </member>
        <member name="P:Sias.Core.SIntCategoryTraceLogger.LogCategories">
            <summary>
            Log categories property.
            </summary>
            <details>
            The log categories property is a list of category names with its assigned log type constants.
            A debug log output can have a category. This category is translated to a log type. If no 
            category is given the "Default" category is used. \n
            If a category is not part of the log category list the information will not be transferred 
            to the sias log file.
            
            The following default values are defined:
             - "Default"	(no specific category			uses 0 (not logged)
             - "Info"		(Information log)				uses eLOG_CONST.LOG_INFO
             - "Error"		(Error log)						uses eLOG_CONST.LOG_ERROR
             - "Debug"		(Debug log)						uses eLOG_CONST.LOG_DEBUG
             - "Send"		(Send/Receive log)				uses eLOG_CONST.LOG_SEND
             - "Detail"		(Detailed Information log)		uses eLOG_CONST.LOG_DETAIL
             - "SubDetail"	(More detailed Information log)	uses eLOG_CONST.LOG_SUBDET
             - "Warning"	(Warning log)					uses eLOG_CONST.LOG_WARNING
             - "RS232"		(RS 232 or other I/O log)		uses eLOG_CONST.LOG_RS232	
             .
            In addition it is possible to add a log group separated by a dot. \n
            \b IMPORTANT:	The actual log reporter can only display groups from 1 to 7.
            				The remaining groups (8 to 15) will not be displayed there!
             
            \b Examples: <code>
            Debug.WriteLine("This is a general Information","Info");
            Debug.WriteLine("This reports an Error at log group 3","Error.3");
            Debug.WriteLine("This reports a warning at log group 6","Warning.6");
            </code>
            </details>
        </member>
        <member name="P:Sias.Core.SIntCategoryTraceLogger.DefaultCategory">
            <summary>
            Default category (used if not category is given) property.
            
            Important: If the Default category is null, the system tries to generate 
            a category name by the type of the calling object (including namespace).
            </summary>
        </member>
        <member name="T:Sias.Core.SIntCategoryTraceLogger.SCategoryEqualityComparer">
             <summary>
             Category Equality Comparer.
            
             This comparer class is used to find the categories in the Log Categories dictionary.
             </summary>
             <remarks></remarks>
             <example></example>
        </member>
        <member name="M:Sias.Core.SIntCategoryTraceLogger.SCategoryEqualityComparer.Equals(System.String,System.String)">
             <summary>
             Compares a category with one log category dictionary entry name.
            
             It returns true (are equal) in case of the category starts with the 
             log category entry name.
             </summary>
             <param name="DictionaryCategorieEntryName">log category dictionary entry name</param>
             <param name="Category">Category name (given as second parameter at Debug.WriteLine)</param>
             <returns></returns>
        </member>
        <member name="M:Sias.Core.SIntCategoryTraceLogger.SCategoryEqualityComparer.GetHashCode(System.String)">
             <summary>
             Get hash code.
            
             As the dictionary calls equals only for identical hash code this needs to 
             return the same value for all objects!
             </summary>
             <param name="obj"></param>
             <returns></returns>
        </member>
        <member name="T:Sias.Core.Interfaces.ITipAdapter">
            <summary>
            Tip adapter interface
            
            This interface is used to manage the tip adapter data. Each object representing
            a tip adapter needs to implement this interface! \n
            For details on the tip adapter data please refer page \ref TipManager.
            </summary>
        </member>
        <member name="M:Sias.Core.Interfaces.ITipAdapter.AcceptsTipType(Sias.Core.Interfaces.ITipType)">
            <summary>
            Check for tip type acceptance
            
            This method will check if the defined tip type is allowed to get picked 
            with the tip adapter. 
            </summary>
            <param name="tipType">The tip type to check</param>
            <returns>
            true, if the given ITipType object can be picked up with this adapter, 
            otherwise false
            </returns>
        </member>
        <member name="M:Sias.Core.Interfaces.ITipAdapter.GetAcceptedTipTypes">
            <summary>
            Get a list of all tip types the tip adapter accepts
            
            This method returns an array of tip types accepted by the tip adapter.
            </summary>
            <returns>A list of all tip types this adapter accepts</returns>
        </member>
        <member name="P:Sias.Core.Interfaces.ITipAdapter.Name">
            <summary>
            Name of the tip adapter
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ITipAdapter.Length">
            <summary>
            Length of the tip adapter [mm]
            
            This property defines the "length" of the tip adapter.\n
            \b Important: The length of the tip adapter defined as only the part the 
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ITipAdapter.Tip">
            <summary>
            Reference to the currently attached tip type
            </summary>
        </member>
        <member name="T:Sias.Core.Interfaces.ITipType">
            <summary>
            Tip type interface
            
            This interface is used to tip type data. Each object representing
            a tip type needs to implement this interface! \n
            For details on the tip type data please refer page \ref TipManager.
            </summary>
        </member>
        <member name="M:Sias.Core.Interfaces.ITipType.IsWashable">
            <returns>
            true, if tip type is washable
            false, otherwise
            </returns>
        </member>
        <member name="M:Sias.Core.Interfaces.ITipType.IsRemovable">
            <returns>
            true, if tip type can be removed from adapter
            false, otherwise
            </returns>
        </member>
        <member name="M:Sias.Core.Interfaces.ITipType.AllowDetection">
            <returns>
            true, if tip type supports liquid detection
            false, otherwise
            </returns>
        </member>
        <member name="M:Sias.Core.Interfaces.ITipType.GetImage(Sias.Core.Interfaces.STipPositionState)">
            <summary>
            Get Tip image for visualization
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ITipType.Name">
            <summary>
            Name of the tip type
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ITipType.ZExtension">
            <summary>
            Z extension of the tip type [mm]
            
            This property defines the additional Length in mm by which the tip adapter 
            will be extended when this tip type has been picked up.
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ITipType.Collar">
            <summary>
            Tip collar length [mm]
            
            The part of the tip above the TipPosition reference Z
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ITipType.Body">
            <summary>
            Tip body length [mm]
            
            The part of the tip below the TipPosition reference Z
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ITipType.PickUpMax">
            <summary>
            Pickup max heightm [mm]
            
            This property defines the maximum possible move length (inside the tip).
            If the tip adapter does not get blocked within this move range inside the 
            tips the system assumes there is no tip.
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ITipType.PickUpBorder">
            <summary>
            Height for bad tip detection
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ITipType.PickUpStart">
            <summary>
            Start height of pick up move
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ITipType.MaxVolume">
            <summary>
            Maximum volume in µl this tip type is meant to hold
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ITipType.DetectionSensitivity">
            <summary>
            Gets or sets the detection sensitivity of the tip type
            </summary>
        </member>
        <member name="T:Sias.Core.Interfaces.STipTypeCollection">
            <summary>
            Tip position collection 
            
            This collection is only allowed to 
            </summary>
        </member>
        <member name="T:Sias.Core.SObjectCollection">
            <summary>
            Generic SObject collection
            
            This collection can handle all object types. At construction time 
            you can give a type. The collection will refuse all types not derivated
            from the given type.
            </summary>
        </member>
        <member name="F:Sias.Core.SObjectCollection._AllowNull">
            <summary>Allow null objects field</summary>
        </member>
        <member name="F:Sias.Core.SObjectCollection._UseWeakReferences">
            <summary>Use Weak references field</summary>
        </member>
        <member name="F:Sias.Core.SObjectCollection._Filter">
            <summary>Type filter variable</summary>
        </member>
        <member name="M:Sias.Core.SObjectCollection.#ctor">
            <summary>
            default Constructor, creating an empty SObject collection
            using SObject as type filter
            </summary>
        </member>
        <member name="M:Sias.Core.SObjectCollection.#ctor(System.Type)">
            <summary>
            Constructor with filter type
            </summary>
            <param name="CompType">filter type</param>
        </member>
        <member name="M:Sias.Core.SObjectCollection.#ctor(System.Type,System.Int32)">
            <summary>
            Constructor with filter type and startup capacity
            
            </summary>
            <param name="filter">filter type</param>
            <param name="capacity">startup capacity</param>
        </member>
        <member name="M:Sias.Core.SObjectCollection.#ctor(System.Type,System.Boolean)">
            <summary>
            Constructor with filter type
            </summary>
            <param name="CompType">filter type</param>
            <param name="AllowNull">allow null elements (empty entries)</param>
        </member>
        <member name="M:Sias.Core.SObjectCollection.#ctor(System.Type,System.Boolean,System.Int32)">
            <summary>
            Constructor with filter type and startup capacity
            
            </summary>
            <param name="filter">filter type</param>
            <param name="AllowNull">allow null elements (empty entries)</param>
            <param name="capacity">startup capacity</param>
        </member>
        <member name="M:Sias.Core.SObjectCollection.ToString">
            <summary>
            Retrieves a string that indicates the current object.
            </summary>
            <returns>The string format of the object.</returns>
        </member>
        <member name="M:Sias.Core.SObjectCollection.ObjectAllowed(System.Object)">
            <summary>
            Check if the given object is allowed at the collection
            </summary>
            <param name="obj">object to check</param>
            <returns>true if object is allowed, false if not.</returns>
        </member>
        <member name="M:Sias.Core.SObjectCollection.ObjectsAllowed(System.Collections.ICollection)">
            <summary>
            Check if the given object is allowed at the collection
            </summary>
            <param name="col">collection of objects to check</param>
            <returns>true if all objects are allowed, false if not.</returns>
        </member>
        <member name="M:Sias.Core.SObjectCollection.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sias.Core.SObjectCollection.Add(System.Object)">
            <summary>
            Adds an object to the collection
            </summary>
            <param name="value">object to add</param>
            <returns>The index at which the new element was inserted.</returns>
        </member>
        <member name="M:Sias.Core.SObjectCollection.AddRange(System.Collections.ICollection)">
            <summary>
            Adds all elements of an ICollection to the Collection
            </summary>
            <param name="c">
            The ICollection whose elements should be added to the Collection. 
            The collection itself cannot be a null reference, but it can contain elements 
            that are a null reference. 
            </param>
        </member>
        <member name="M:Sias.Core.SObjectCollection.IndexOf(System.Object)">
            <summary>
            Gets the index in the collection of the specified object, if it exists 
            in the collection.
            </summary>
            <param name="value">The CodeAttributeArgument to locate in the collection.</param>
            <returns>The index of the specified object in the collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Sias.Core.SObjectCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts the specified object into the collection at the 
            specified index. 
            </summary>
            <param name="index">The zero-based index where the specified object should be inserted. </param>
            <param name="value">The Object to insert.</param>
        </member>
        <member name="M:Sias.Core.SObjectCollection.Remove(System.Object)">
            <summary>
            Removes the specified object from the collection. 
            </summary>
            <param name="value">The object to remove from the collection.</param>
        </member>
        <member name="M:Sias.Core.SObjectCollection.Contains(System.Object)">
            <summary>
            Gets a value indicating whether the collection contains the specified object. 
            </summary>
            <param name="value">An object to search for in the collection.</param>
            <returns>true if the collection contains the specified object; otherwise, false.</returns>
        </member>
        <member name="M:Sias.Core.SObjectCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes before inserting a new element into the CollectionBase instance. 
            </summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:Sias.Core.SObjectCollection.OnRemove(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes when removing an element from the CollectionBase instance.
            </summary>
            <param name="index">The zero-based index at which value can be found.</param>
            <param name="value">The value of the element to remove from index.</param>
        </member>
        <member name="M:Sias.Core.SObjectCollection.OnSet(System.Int32,System.Object,System.Object)">
            <summary>
            Performs additional custom processes before setting a value in the CollectionBase instance. 
            </summary>
            <param name="index">The zero-based index at which oldValue can be found.</param>
            <param name="oldValue">The value to replace with newValue.</param>
            <param name="newValue">The new value of the element at index.</param>
        </member>
        <member name="M:Sias.Core.SObjectCollection.OnValidate(System.Object)">
            <summary>
            Performs additional custom processes when validating a value.
            </summary>
            <param name="value">The object to validate.</param>
        </member>
        <member name="M:Sias.Core.SObjectCollection.Clone">
            <summary>
            create a clone of each cloneable member of the collection.
            </summary>
            <returns>A clone of the collection including clones of all of its cloneable members</returns>
        </member>
        <member name="M:Sias.Core.SObjectCollection.Sort">
            <summary>
            Sorts the elements in the entire collection using the IComparable implementation 
            of each element.
            </summary>
        </member>
        <member name="M:Sias.Core.SObjectCollection.Sort(System.Collections.IComparer)">
            <summary>
            Sorts the elements in the entire collection using the specified comparer.
            </summary>
            <param name="Comp">
            The IComparer implementation to use when comparing elements. \n
            -or- \n
            a null reference to use the IComparable implementation of each element. 
            </param>
        </member>
        <member name="P:Sias.Core.SObjectCollection.AllowNull">
            <summary>Allow null objects property</summary>
        </member>
        <member name="P:Sias.Core.SObjectCollection.UseWeakReferences">
            <summary>Use Weak references property</summary>
        </member>
        <member name="P:Sias.Core.SObjectCollection.Filter">
            <summary>Type filter property</summary>
        </member>
        <member name="P:Sias.Core.SObjectCollection.Item(System.Int32)">
            <summary>
            Gets or sets the object at the specified index in the collection. 
            </summary>
            <param name="index">Index of the object</param>
            <returns>An object at each valid index.</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.STipTypeCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Sias.Core.Interfaces.STipTypeCollection.#ctor(System.Boolean)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Sias.Core.Interfaces.STipTypeCollection.#ctor(Sias.Core.Interfaces.ITipType[],System.Boolean)">
            <summary>
            Array conversion constructor 
            </summary>
            <param name="TipTypes">tip position array</param>
            <param name="AllowNull">true if null is allowed</param>
        </member>
        <member name="M:Sias.Core.Interfaces.STipTypeCollection.Exists(Sias.Core.Interfaces.ITipType)">
            <summary>
            Checks whether a given tip type already exists or not
            </summary>
            <param name="tipType">Tip type </param>
            <returns>index to the tip type in list, -1 if not found</returns>
        </member>
        <member name="P:Sias.Core.Interfaces.STipTypeCollection.Item(System.Int32)">
            <summary>
            Gets or sets the ICavity at the specified index in the collection. 
            </summary>
            <param name="index">Index of the ICavity</param>
            <returns>An ICavity at each valid index.</returns>
        </member>
        <member name="P:Sias.Core.Interfaces.STipTypeCollection.Item(System.String)">
            <summary>
            Gets the STipType at the specified index in the collection. 
            </summary>
            <param name="name">Name of the STipType</param>
            <returns>A STipType with the given name.</returns>
        </member>
        <member name="T:Sias.Core.Interfaces.STipPositionState">
            <summary>Tip position state enumerator</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.STipPositionState.Empty">
            <summary>Tip position is empty (no tip)</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.STipPositionState.Pickable">
            <summary>Tip is available and can be picked up</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.STipPositionState.NotPickable">
            <summary>Tip is available, but the tip rack is not at a Pick position</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.STipPositionState.NotAccessible">
            <summary>Tip is available, but the tip rack is not accessible</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.STipPositionState.BadTip">
            <summary>Bad Tip, e.g. the tip can't be picked because its bent</summary>
        </member>
        <member name="T:Sias.Core.Interfaces.ITipPosition">
            <summary>
            Tip position interface
            
            This interface is used to manage tip position data. Each object representing
            a position where tips can reside an tip adapter needs to implement this interface!
            </summary>
        </member>
        <member name="T:Sias.Core.Interfaces.IAccessibleObject">
             <summary>
             Accessible object.
            
             All accessible objects need to have methods for requesting and setting the access mode.
             For more details please read section \ref AccessibleDevices.
             </summary>
        </member>
        <member name="M:Sias.Core.Interfaces.IAccessibleObject.GetAccessMode(System.Object)">
            <summary>
            Get actual access mode.
            </summary>
            <param name="CallerObject">The caller object</param>
            <returns>Actual access mode</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.IAccessibleObject.SetAccessMode(System.Object,Sias.Core.Interfaces.SAccessMode,System.Int32)">
            <summary>
            Set new access mode.
            
            Take care the access mode will not change immediately, so this
            function may take some time.
            </summary>
            <param name="CallerObject">The caller object</param>
            <param name="AccessMode">New access mode <see cref="T:Sias.Core.Interfaces.SAccessMode"/> </param>
            <param name="TimeOut">Timeout [ms] for changing the access mode</param>
            <returns></returns>
        </member>
        <member name="P:Sias.Core.Interfaces.ITipPosition.Name">
            <summary>Tip position</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ITipPosition.TipPos">
            <summary>Real tip coordinates</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ITipPosition.PickUpMax">
            <summary>Height for successful tip pick up</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ITipPosition.PickUpBorder">
            <summary>Height for bad tip detection</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ITipPosition.PickUpStart">
            <summary>
            Start height of pick up move (calculated from tip -z reference and TipType coordinate)
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ITipPosition.TipRack">
            <summary>The tip rack where the Tip Position is placed on</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ITipPosition.TipType">
            <summary>Type of the tip used at this tip position</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ITipPosition.State">
            <summary>Tip position state (can be set The Liquid(s) and the liquid state of cavity</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ITipPosition.CustomProperties">
            <summary>Custom Properties</summary>
        </member>
        <member name="T:Sias.Core.Interfaces.STipPositionCollection">
            <summary>
            Tip position collection 
            
            This collection is only allowed to 
            </summary>
        </member>
        <member name="M:Sias.Core.Interfaces.STipPositionCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Sias.Core.Interfaces.STipPositionCollection.#ctor(System.Boolean)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Sias.Core.Interfaces.STipPositionCollection.#ctor(Sias.Core.Interfaces.ITipPosition[],System.Boolean)">
            <summary>
            Array conversion constructor 
            </summary>
            <param name="TipPos">tip position array</param>
            <param name="AllowNull">true if null is allowed</param>
        </member>
        <member name="P:Sias.Core.Interfaces.STipPositionCollection.Item(System.Int32)">
            <summary>
            Gets or sets the ICavity at the specified index in the collection. 
            </summary>
            <param name="index">Index of the ICavity</param>
            <returns>An ICavity at each valid index.</returns>
        </member>
        <member name="P:Sias.Core.Interfaces.STipPositionCollection.PickUpStart">
            <summary>
            Get the scan heights of all included ICavity objects
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.STipPositionCollection.PickUpMax">
            <summary>
            Get the dispense heights of all included ICavity objects
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.STipPositionCollection.PickUpBorder">
            <summary>
            Get the maximum heights of all included ICavity objects
            </summary>
        </member>
        <member name="T:Sias.Core.PropertyGrid.PropertyExtendedUnitLook">
            <summary>
            Look class typically used to display a numerical value and 
            its unit as two editable fields.
            
            Actually this code is inactive, as the original Version from SPG is working as expected!
            </summary>
        </member>
        <member name="M:Sias.Core.PropertyGrid.PropertyExtendedUnitLook.#ctor(System.String,System.String)">
            <summary>
            Constructor with given format and edit format String 
            </summary>
            <param name="format">display format</param>
            <param name="editformat">edit format</param>
        </member>
        <member name="M:Sias.Core.PropertyGrid.PropertyExtendedUnitLook.OnDraw(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,VisualHint.SmartPropertyGrid.PropertyEnumerator,System.String,System.Boolean,VisualHint.SmartPropertyGrid.PropertyValue.DrawValueIn)">
            <summary>
            Draw the property field
            </summary>
            <param name="graphics">GDI object</param>
            <param name="valueRect">value area</param>
            <param name="textColor">text color</param>
            <param name="propEnum">property enumerator</param>
            <param name="drawAnotherString">???</param>
            <param name="multipleTexts">?</param>
            <param name="drawValueIn">?</param>
        </member>
        <member name="M:Sias.Core.PropertyGrid.PropertyExtendedUnitLook.GetDisplayStringInternal">
            <summary>
            get formatted value String
            </summary>
            <returns>formatted value String</returns>
            <remarks>To do: Comment</remarks>
        </member>
        <member name="M:Sias.Core.PropertyGrid.PropertyExtendedUnitLook.EditMask">
            <summary>
            Get edit mask
            </summary>
            <returns>edit mask</returns>
            <remarks>To do: Comment</remarks>
        </member>
        <member name="M:Sias.Core.PropertyGrid.PropertyExtendedUnitLook.GetDisplayStringRect(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Point)">
            <summary>
            Get rectangle of display String
            </summary>
            <param name="graphics">GDI object</param>
            <param name="valueRect">value area</param>
            <param name="point">???</param>
            <returns>Display text area as rectangle</returns>
            <remarks>To do: Comment</remarks>
        </member>
        <member name="M:Sias.Core.PropertyGrid.PropertyExtendedUnitLook.GetTooltipString(System.Int32)">
            <summary>
            Get tooltip String
            </summary>
            <param name="line">line number</param>
            <returns>Tooltip String</returns>
            <remarks>To do: Comment</remarks>
        </member>
        <member name="M:Sias.Core.PropertyGrid.PropertyExtendedUnitLook.GetTooltipStringSize(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Point,System.Int32)">
            <summary>
            Get Tooltip String size
            </summary>
            <param name="graphics">Graphics object</param>
            <param name="valueRect">Value area</param>
            <param name="point">point ???</param>
            <param name="line">line number</param>
            <returns>Tooltip String size</returns>
            <remarks>To do: Comment</remarks>
        </member>
        <member name="T:Sias.Core.PropertyGrid.PropertyExtendedUnitFeel">
            <summary>
            Extended unit feel (not used yet)
            
            Actually this code is inactive, as the original Version from SPG is working as expected!
            </summary>
        </member>
        <member name="M:Sias.Core.PropertyGrid.PropertyExtendedUnitFeel.#ctor(Sias.Core.PropertyGrid.SPropertyGrid)">
            <summary>
            Constructor with given property grid
            </summary>
            <param name="grid">property grid</param>
            <remarks>To do: Comment</remarks>
        </member>
        <member name="M:Sias.Core.PropertyGrid.PropertyExtendedUnitFeel.ShowControl(System.Drawing.Rectangle,VisualHint.SmartPropertyGrid.PropertyEnumerator)">
            <summary>
            Show control
            </summary>
            <param name="valueRect">Value area</param>
            <param name="propEnum">Property enumerator</param>
            <returns>control ???</returns>
            <remarks>To do: Comment</remarks>
        </member>
        <member name="T:Sias.Core.PropertyGrid.SPropertyArrayLook">
            <summary>
            This look for arrays will show the number of elements in the array 
            and will add an edit button.
            </summary>
        </member>
        <member name="M:Sias.Core.PropertyGrid.SPropertyArrayLook.OnDraw(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,VisualHint.SmartPropertyGrid.PropertyEnumerator,System.String,System.Boolean,VisualHint.SmartPropertyGrid.PropertyValue.DrawValueIn)">
            <summary>
            Draw the property field
            </summary>
            <param name="graphics">GDI object</param>
            <param name="valueRect">value area</param>
            <param name="textColor">text color</param>
            <param name="propEnum">property enumerator</param>
            <param name="drawAnotherString">???</param>
            <param name="multipleTexts">indicating if the property targets multiple instances with multiple texts.</param>
            <param name="drawValueIn"></param>
        </member>
        <member name="M:Sias.Core.PropertyGrid.SPropertyArrayLook.GetDisplayStringRect(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Point)">
            <summary>
            Get rectangle of display string
            </summary>
            <param name="graphics">GDI object</param>
            <param name="valueRect">value area</param>
            <param name="point">???</param>
            <returns>Display text area as rectangle</returns>
        </member>
        <member name="P:Sias.Core.PropertyGrid.SPropertyArrayLook.DisplayString">
            <summary>
            Return the string that should be displayed.
            </summary>
        </member>
        <member name="T:Sias.Core.PropertyGrid.SPropertyArrayFeel">
            <summary>
            This smart grid property feel is used for array collection or list elements.
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="F:Sias.Core.PropertyGrid.SPropertyArrayFeel._editable">
            <summary>internal editable flag variable</summary>
        </member>
        <member name="M:Sias.Core.PropertyGrid.SPropertyArrayFeel.#ctor(VisualHint.SmartPropertyGrid.PropertyGrid,System.Boolean)">
            <summary>
            construction
            </summary>
            <param name="grid">property grid</param>
            <param name="editable">editable flag</param>
        </member>
        <member name="M:Sias.Core.PropertyGrid.SPropertyArrayFeel.ShowControl(System.Drawing.Rectangle,VisualHint.SmartPropertyGrid.PropertyEnumerator)">
            <summary>
            Show control
            </summary>
            <param name="valueRect">Value area</param>
            <param name="propEnum">Property enumerator</param>
            <returns>???</returns>
        </member>
        <member name="M:Sias.Core.PropertyGrid.SPropertyArrayFeel.GetFeel(VisualHint.SmartPropertyGrid.PropertyGrid,System.Boolean)">
            <summary>
            Get array feel. 
            
            This method is used to get an array feel. It takes care about having only one array feel for each 
            property grid. 
            </summary>
            <param name="grid">The property grid the feel is used for</param>
            <param name="editable">editable flag</param>
            <returns>A valid property array feel instance</returns>
        </member>
        <member name="E:Sias.Core.PropertyGrid.SPropertyArrayFeel.ArrayFeelExtender">
            <summary>
            Array feel extender event
            
            This event is used to extend the array feel. Array feel extenders are called if the edit 
            button of any array is pressed. If the extender handles event (that means a custom array 
            editor is called) it has to set the IsHandled reference parameter to true. 
            </summary>
        </member>
        <member name="T:Sias.Core.PropertyGrid.SPropertyArrayFeel.SArrayFeelExtender">
            <summary>
            Array feel extender delegate
            
            This delegate is used to define an extender for the array feel. This extenders are called
            if the edit button of any array is pressed. If the extender handles event (that means a 
            custom array editor is called) it has to set the IsHandled reference parameter to true. 
            </summary>
            <param name="BaseArray">The PropertyValue instance of the concerned array, list or dictionary</param>
            <param name="IsHandled">True if already handled (editing finished), false if not</param>
        </member>
        <member name="T:Sias.Core.PropertyGrid.SPropertyArrayFeel.SPropInPlaceArrayButton">
            <summary>
            InPlace control shown in the value column for array and collection properties
            </summary>
        </member>
        <member name="M:Sias.Core.PropertyGrid.SPropertyArrayFeel.SPropInPlaceArrayButton.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="editable">editable flag</param>
        </member>
        <member name="M:Sias.Core.PropertyGrid.SPropertyArrayFeel.SPropInPlaceArrayButton.RunButton">
            <summary>
            This functions defines what to do if the edit button is pressed
            </summary>
        </member>
        <member name="T:Sias.Core.PropertyGrid.SPropertyArrayFeel.SPropInPlaceArrayButton.StateBackup">
            <summary>
            
            </summary>
            <remarks></remarks>
            <example></example>
        </member>
        <member name="M:Sias.Core.PropertyGrid.SPropertyArrayFeel.SPropInPlaceArrayButton.StateBackup.#ctor">
            <summary>
            Initializes a new instance of the <b>StateBackup</b> class.
            </summary>
        </member>
        <member name="M:Sias.Core.PropertyGrid.SPropertyArrayFeel.SPropInPlaceArrayButton.StateBackup.Add(VisualHint.SmartPropertyGrid.PropertyEnumerator)">
            <summary>Add new state information</summary>
            <param name="PropEnum"></param>
        </member>
        <member name="M:Sias.Core.PropertyGrid.SPropertyArrayFeel.SPropInPlaceArrayButton.StateBackup.WasExpanded(System.String)">
            <summary>
            
            </summary>
            <param name="Key">Property expanded key (the display name)</param>
            <returns>true if former expanded, false if not</returns>
        </member>
        <member name="T:Sias.Core.SPropertyInfoCollection">
            <summary>
            Property information (PropertyInfo) collection
            </summary>
        </member>
        <member name="M:Sias.Core.SPropertyInfoCollection.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:Sias.Core.SPropertyInfoCollection.#ctor(System.Type,System.Type)">
            <summary>
            Get all properties of a type defining the defined attribute
            
            This method returns a property info collection of all objects having the
            defined attribute.
            </summary>
            <param name="ObjectType">Type of the object</param>
            <param name="AttributeType">Attribute type</param>
            <returns>a Property Information collection</returns>
        </member>
        <member name="M:Sias.Core.SPropertyInfoCollection.#ctor(System.Type,System.Type[])">
            <summary>
            Get all properties of a type defining the defined attribute
            This method returns a property info collection of all objects having the
            defined attribute.
            </summary>
            <param name="ObjectType">Type of the object</param>
            <param name="AttributeTypes">List of Attributes</param>
            <returns>a Property Information collection</returns>
        </member>
        <member name="M:Sias.Core.SPropertyInfoCollection.GetIndex(System.String)">
            <summary>
            Get index of the Property information of the property with the given name
            </summary>
            <param name="PropertyName">Name of the property to find</param>
            <returns>index of the Property information of the property with the given name</returns>
        </member>
        <member name="M:Sias.Core.SPropertyInfoCollection.AddPropertiesWithAttribute(System.Type,System.Type)">
            <summary>
            Get all properties of a type defining the defined attribute
            
            This method returns a property info collection of all objects having the
            defined attribute.
            </summary>
            <param name="ObjectType">Type of the object</param>
            <param name="AttributeType">Attribute type</param>
            <returns>a Property Information collection</returns>
        </member>
        <member name="P:Sias.Core.SPropertyInfoCollection.Item(System.Int32)">
            <summary>
            Gets or sets the SPosition at the specified index in the collection. 
            </summary>
            <param name="index">Index of the SPosition</param>
            <returns>An SPosition at each valid index.</returns>
        </member>
        <member name="P:Sias.Core.SPropertyInfoCollection.Item(System.String)">
            <summary>
            Gets or sets the PropertyInfo at the specified index in the collection. 
            </summary>
            <param name="name">Property name for selection</param>
            <returns>The Property info of Property defined by name.</returns>
        </member>
        <member name="T:Sias.Core.SOverwriteConfirmationDialog">
            <summary>
            This form is used as overwrite confirmation dialog.
            
            The overwrite configuration dialog is used to confirm file/db overwrites if the 
            SSaveOptions.AskUser option is used. 
            </summary>
            <details>
            \image html "SOverwriteConfirmationDialog.png"
            
            If we are working with files typically this dialog is not used. 
            Instead we use the default file selector with integrated overwrite dialog
            before saving the file.
            </details>
        </member>
        <member name="F:Sias.Core.SOverwriteConfirmationDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Sias.Core.SOverwriteConfirmationDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Sias.Core.SOverwriteConfirmationDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Sias.Core.SOverwriteConfirmationDialog.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <b>SOverwriteConfirmationDialog</b> class.
            </summary>
            <param name="aKind"></param>
            <param name="aName"></param>
        </member>
        <member name="M:Sias.Core.SOverwriteConfirmationDialog.OverwriteButton_Click(System.Object,System.EventArgs)">
            <summary>
            This method is called when the OverwriteButton's Click event has been fired.
            </summary>
            <param name="sender">The <see cref="T:System.Object"/> that fired the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> of the event.</param>
        </member>
        <member name="M:Sias.Core.SOverwriteConfirmationDialog.DontOverwriteButton_Click(System.Object,System.EventArgs)">
            <summary>
            This method is called when the DontOverwriteButton's Click event has been fired.
            </summary>
            <param name="sender">The <see cref="T:System.Object"/> that fired the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> of the event.</param>
        </member>
        <member name="P:Sias.Core.SOverwriteConfirmationDialog.Kind">
            <summary>
            Get/Set the Kind of the SOverwriteConfirmationDialog
            </summary>
            <value></value>
        </member>
        <member name="P:Sias.Core.SOverwriteConfirmationDialog.ItemName">
            <summary>
            Get/Set the Name of the SOverwriteConfirmationDialog
            </summary>
        </member>
        <member name="P:Sias.Core.SOverwriteConfirmationDialog.DialogResult">
            <summary>
            Get/Set the Dialog Result of the SOverwriteConfirmationDialog
            </summary>
            <value></value>
        </member>
        <member name="T:Sias.Core.SCustomProperty">
            <summary>
            Custom property.
            
            A custom property is a combination of a name, a value and a value type.
            Name and value are represented by a string! \n
            As the custom properties are always stored as strings we have to take care about the 
            culture. The values are always stored with invariant culture. For editing we have to 
            use the system culture, so we need two different value properties:
             - Value: is used for using loading, storing and using the property.
             - EditValue: is used for editing the custom property.
            </summary>
        </member>
        <member name="F:Sias.Core.SCustomProperty._Name">
            <summary>Custom property name (key) field</summary>
        </member>
        <member name="F:Sias.Core.SCustomProperty._Value">
            <summary>Custom property value field</summary>
        </member>
        <member name="F:Sias.Core.SCustomProperty._PropertyType">
            <summary>Custom property type field</summary>
        </member>
        <member name="M:Sias.Core.SCustomProperty.#ctor(System.String,System.String,System.Type)">
            <summary>
            name, value and type definition constructor.
            </summary>
            <param name="name">Custom property name</param>
            <param name="value">Custom property value</param>
            <param name="propertyType">type of the property</param>
        </member>
        <member name="M:Sias.Core.SCustomProperty.#ctor(System.String,System.String,System.String)">
            <summary>
            name, value and type definition constructor.
            </summary>
            <param name="name">Custom property name</param>
            <param name="value">Custom property value</param>
            <param name="propertyTypeName">Name of property type</param>
        </member>
        <member name="M:Sias.Core.SCustomProperty.#ctor(System.String,System.String)">
            <summary>
            Value definition constructor.
            </summary>
            <param name="name">Custom property name</param>
            <param name="value">Custom property value</param>
        </member>
        <member name="M:Sias.Core.SCustomProperty.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:Sias.Core.SCustomProperty.#ctor(Sias.Core.SCustomProperty)">
            <summary>
            Copy constructor.
            </summary>
            <param name="customProperty">Origin custom property</param>
        </member>
        <member name="M:Sias.Core.SCustomProperty.Clone">
            <summary>
            Clone the custom property.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Sias.Core.SCustomProperty.Name">
            <summary>Custom property name (key) property</summary>
        </member>
        <member name="P:Sias.Core.SCustomProperty.Value">
            <summary>
            Culture independent Custom property value (for loading, storing and access)
            </summary>
        </member>
        <member name="P:Sias.Core.SCustomProperty.EditValue">
            <summary>
            Culture dependent Custom property string value 
            
            This property can be used for editing as culture dependent string.
            </summary>
            <value></value>
        </member>
        <member name="P:Sias.Core.SCustomProperty.TypedValue">
            <summary>
            Custom property value as custom property type
            
            This property is Property type dependent version of the value.
            </summary>
        </member>
        <member name="P:Sias.Core.SCustomProperty.PropertyTypeName">
            <summary>Property type name property</summary>
        </member>
        <member name="P:Sias.Core.SCustomProperty.PropertyType">
            <summary>Custom property type property</summary>
        </member>
        <member name="P:Sias.Core.SCustomProperty.SPG_Summary">
            <summary>
            Summary property
            
            This special property defined and assigns string representation of the 
            position object. This will be used with the sias property grid.
            </summary>
        </member>
        <member name="T:Sias.Core.SCustomPropertyCollection">
            <summary>
            Custom property collection
            </summary>
        </member>
        <member name="M:Sias.Core.SCustomPropertyCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Sias.Core.SCustomPropertyCollection.Contains(System.String)">
            <summary>
            Check if a specific property is available in the collection.
            </summary>
            <param name="name">Custom property name</param>
            <returns>true if found, false if not</returns>
        </member>
        <member name="M:Sias.Core.SCustomPropertyCollection.Contains(System.String,System.String)">
            <summary>
            Check if a specific property is available and has the expected data.
            </summary>
            <param name="name">Custom property name</param>
            <param name="value">Custom property value</param>
            <returns>true if found, false if not</returns>
        </member>
        <member name="M:Sias.Core.SCustomPropertyCollection.GetCustomProperty(System.String)">
            <summary>
            Get a specific property by its property name
            </summary>
            <param name="name">Custom property name</param>
            <returns>the found property or null is not available</returns>
        </member>
        <member name="M:Sias.Core.SCustomPropertyCollection.Contains(System.String,System.Type)">
            <summary>
            Check if the specifies property is available and is of the defined data type.
            </summary>
            <param name="name">Custom property name</param>
            <param name="DataType">The expected data type</param>
            <returns><b>true</b> if the property found, otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Sias.Core.SCustomPropertyCollection.GetValue(System.String,System.Type)">
            <summary>
            Get the specified custom property value.
            </summary>
            <param name="name">Custom property name</param>
            <param name="DataType">The expected data type</param>
            <returns>The value if found, null if not.</returns>
        </member>
        <member name="P:Sias.Core.SCustomPropertyCollection.Item(System.Int32)">
            <summary>
            Get SCustomProperty at specified index.
            </summary>
            <value>Custom property value</value>
        </member>
        <member name="P:Sias.Core.SCustomPropertyCollection.Item(System.String)">
            <summary>
            Indexer for getting custom properties by its name (=key).
            </summary>
            <value></value>
            <param name="key">Custom property name</param>
            <returns>Custom property value</returns>
        </member>
        <member name="T:Sias.Core.Interfaces.SArmMoveMode">
            <summary>
            This enumerator defines the different arm move modes when trying to avoid crossing 
            of restricted areas.
            
            ATTENTION: restricted areas are not supported from driver side yet!
            </summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SArmMoveMode.Back">
            <summary>
            Try moving to the back side to avoid crossing.
            
            This option should be selected, if the back side of the robot had a crossable
            area. If the system is not able to make the move on the back side we will get 
            an crossing error
            </summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SArmMoveMode.Front">
            <summary>
            Try moving to the front side to avoid crossing.
            
            This option should be selected, if the front side of the robot had a crossable
            area. If the system is not able to make the move on the front side we will get 
            an crossing error
            </summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SArmMoveMode.FrontOrBack">
            <summary>
            Try moving to the front or back side to avoid crossing.
            
            If the system is not able to make the move on the front or the back side we will 
            get an crossing error		
            </summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SArmMoveMode.Smart">
            <summary>
            Try moving wherever possible to find a way.
            
            The algorithm for that is not defined yet. 
            </summary>
        </member>
        <member name="T:Sias.Core.Interfaces.SLayoutSelectMode">
            <summary>
            This enumerator is used to define the layout select mode. An external 
            viewer can recognize the layouts SelectMode property and adapt its 
            selectable objects.
            </summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLayoutSelectMode.AllowItemSelection">
            <summary>
            Allow Item selection 
            </summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLayoutSelectMode.AllowDeviceSelection">
            <summary>
            Allow Device Selection
            </summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLayoutSelectMode.AllowDecktraySelection">
            <summary>
            Allow Decktray Selection
            </summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLayoutSelectMode.AllowSlotSelection">
            <summary>
            Allow Slot or stacker Selection
            </summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLayoutSelectMode.AllowCavitySelection">
            <summary>
            Allow Cavity Selection
            </summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLayoutSelectMode.AllowTipPositionSelection">
            <summary>
            Allow tip position Selection
            </summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLayoutSelectMode.AllowMultiSelect">
            <summary>
            Allow multiple object selection
            </summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLayoutSelectMode.AutoSelectSubObjects">
            <summary>
            Automatically select sub objects.
            This option allows to return all cavities of a rack only by selecting 
            the rack itself.
            </summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLayoutSelectMode.AllowOccupiedSlots">
            <summary>
            Allow to select occupied slots.
            This option allows to select occupied slots.
            </summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLayoutSelectMode.DisableSelectMode">
            <summary>
            This flag will disable the select mode.
            What ever is in the other flags, the viewer will handle the selecting
            using its internal default handling. This could also be a type depending
            handling.
            </summary>
        </member>
        <member name="T:Sias.Core.Interfaces.ILayout">
            <summary>
            Layout interface.
            </summary>
        </member>
        <member name="M:Sias.Core.Interfaces.ILayout.GetCompatibleSlots(Sias.Core.Interfaces.IItem)">
            <summary>
            Get list of compatible slots
            
            This method prepares a list of slots that currently accept the given 
            \ref Sias::Core::Interfaces.IItem "item". Take care, this will not 
            include actually occupied compatible slots!
            </summary>
            <param name="item">The \ref Sias::Core::Interfaces.IItem "item" to place</param>
            <returns>Collection of slots accepting the \ref Sias::Core::Interfaces.IItem "item"</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.ILayout.GetFreeSlots">
            <summary>
            Get a list of free slots
            
            This method returns a list of not occupied slots. As this slots may 
            be for different types of items you have to take care if \ref Sias::Core::Interfaces.IItem "item" you 
            want to place on a slot is compatible. 
            So if you need to have a list of possible destination slots for a
            given \ref Sias::Core::Interfaces.IItem "item" you may better use <see cref="M:Sias.Core.Interfaces.ILayout.GetCompatibleSlots(Sias.Core.Interfaces.IItem)"/>
            </summary>
            <returns>Collection of empty slots</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.ILayout.GetFreeSlots(Sias.Core.Interfaces.IItem)">
            <summary>
            Get all free slots accepting <paramref name="item"/>.
            
            This method returns a list of all empty slots that currently will 
            accept the given \ref Sias::Core::Interfaces.IItem "item".
            </summary>
            <param name="item">The \ref Sias::Core::Interfaces.IItem "item" that acts as a filter for the slots</param>
            <returns>Collection of empty slots accepting the \ref Sias::Core::Interfaces.IItem "item"</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.ILayout.GetSlotsByType(System.String)">
            <summary>
            Get a filtered list of slots.
            
            This method returns a list of slots matching the defined slot filter.
            </summary>
            <details>
            The slot filter consists of one or more custom property equations of 
            form (name=value) connected by operators || (or) or operator &amp;&amp; (and).
            So passing "(VacuumSlot=true) &amp;&amp; (ChamberType=high)" will only return 
            slots having a custom property called \a VacuumSlot with a value of 
            \a true and a custom property called ChamberType with the value of 
            \a high.\n
            </details>
            <param name="filter">Slot filter string</param>
            <returns>Collection of slots matching the filter</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.ILayout.GetSlotByName(System.String)">
            <summary>
            Get the slot with the defined slot name.
            
            The method returns the slot matching the given slot name.
            If no slot of the defined name is found null is returned.
            </summary>
            <param name="name">Slot name</param>
            <returns>ISlot object that matches a given name.</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.ILayout.GetWashStations">
            <summary>
            Get wash station items
            
            This method returns a list of items marked as wash stations.
            The result should be identical to \code
                GetItemsByType("Washstation=true"),
            \endcode
            </summary>
            <returns>Collection of wash stations</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.ILayout.GetItemsByType(System.String)">
            <summary>
            Get a filtered list of items.
            
            This method returns a list of items matching the defined \ref Sias::Core::Interfaces.IItem "item" 
            filter.
            </summary>
            <details>
            The \ref Sias::Core::Interfaces.IItem "item" filter consists of one or more custom property equations of 
            form (name=value) connected by operators || (or) or operator &amp;&amp; (and).
            So passing "(WahStation=true) &amp;&amp; (WashType=deep)" will only return 
            items having a custom property called \a WashStation with a value of 
            \a true and a custom property called \a WashType with the value of 
            \a deep.\n
            </details>
            <param name="filter">\ref Sias::Core::Interfaces.IItem "item" filter string</param>
            <returns>Collection of IItem objects that match the filter</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.ILayout.GetItemByName(System.String)">
            <summary>
            Get the \ref Sias::Core::Interfaces.IItem "item" with the defined item name.
            
            This method returns the item with t he defined item name. If the item 
            does not exist the method return null.
            </summary>
            <param name="name">Item name</param>
            <returns>IItem object that matches a given name.</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.ILayout.AddItem(Sias.Core.Interfaces.IItem,Sias.Core.Interfaces.ISlot)">
            <summary>
            Adds an \ref Sias::Core::Interfaces.IItem "item" to the layout.
            
            This method adds <paramref name="item"/> to the layout by placing 
            the item on <paramref name="slot"/>.
            </summary>
            <param name="item">The item to add</param>
            <param name="slot">The slot where to place the item</param>
            <remarks>
            \b Important: The given slot should be part of the layout and it 
            should not be occupied.
            </remarks>
        </member>
        <member name="M:Sias.Core.Interfaces.ILayout.RemoveItem(Sias.Core.Interfaces.IItem)">
            <summary>
            Remove \ref Sias::Core::Interfaces.IItem "item" from layout
            
            Removes <see cref="T:Sias.Core.Interfaces.IItem"/> from layout. 
            </summary>
            <param name="item">The item to remove from layout</param>
        </member>
        <member name="M:Sias.Core.Interfaces.ILayout.GetCavitiesByType(System.String)">
            <summary>
            Get a filtered list of cavities.
            
            This method returns a list of cavities matching the defined cavity 
            filter.
            </summary>
            <details>
            The cavity filter consists of one or more custom property equations of 
            form (name=value) connected by operators || (or) or operator &amp;&amp; (and).
            So passing "(SourceTube=true) &amp;&amp; (SourceType=Sample)" will only return 
            cavities having a custom property called \a SourceTube with a value of 
            \a true and a custom property called \a SourceType with the value of 
            \a Sample.\n
            </details>
            <param name="filter">Cavity filter string</param>
            <returns>Collection of ICavity objects that match the filter</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.ILayout.GetCavityByName(System.String)">
            <summary>
            Get the cavity with the defined cavity name.
            
            This method returns the cavity with the defined cavity name. 
            If the cavity does not exist the method return null.
            </summary>
            <param name="name">Cavity name</param>
            <returns>ICavity object that matches a given name.</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.ILayout.GetLayoutDevices(System.Type)">
            <summary>
            Get all layout devices for the given device type 
            
            This method collects layout devices matching the given type. This includes also 
            derivations of the given device type. 
            </summary>
            <param name="DeviceType">The type of the device</param>
            <returns>Collection of layout devices matching the given device type</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.ILayout.GetLayoutDevices">
            <summary>
            Get all layout devices defined in the layout.
            
            This method collects all layout devices from layout. 
            </summary>
            <returns>Collection of all included layout devices</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.ILayout.GetLayoutDeviceByName(System.String)">
            <summary>
            Get a layout Device by its specific name from Layout.
            
            This method gets a specific layout device from layout by passing its name. 
            As names have to be unique in sias layouts only a single layout device can 
            be returned.
            </summary>
            <param name="Name">Name of the layout device</param>
            <returns>
            The layout device with the given name or null if the layout does not 
            contain a layout device with this name.
            </returns>
        </member>
        <member name="M:Sias.Core.Interfaces.ILayout.GetTravelHeight(Sias.Core.SRectangle)">
            <summary>
            Get minimum travel height for a given area (rectangle) of a Layout.
            
            This method calculates the minimum travel height needed to cross the given 
            layout area. It has to take care about all components currently "touched" by
            the defined area. \n
            It is important to stay above the defined travel height when crossing the 
            defined area to avoid a crash.\n
            \b Important:   If the layout does not match exactly the real components on the
                            robot you may get a crash even if the calculated travel height 
                            is recognized.
            </summary>
            <param name="MoveRange">Rectangle of the crossed Decktray area</param>
            <returns>Minimum needed travel height</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.ILayout.GetRestrictedAreas">
            <summary>
            Get all restricted areas of the layout.
            
            This methods returns all layout areas with restricted crossing options.
            This is the base for "intelligent" arm moving routines. 
            \b Important:   The sias device drivers do not support restricted areas yet!
            </summary>
            <returns>A collection of all restricted areas</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.ILayout.GetRestrictedAreas(Sias.Core.SRectangle)">
            <summary>
            Get all restricted areas touching the defined move range rectangle
            
            This methods returns all layout areas with restricted crossing options 
            touching the defined move range rectangle. This is the base for "intelligent" 
            arm moving routines. 
            \b Important:   The sias device drivers do not support restricted areas yet!
            </summary>
            <param name="MoveRange">The rectangle to check for restricted areas</param>
            <returns>A collection of the restricted areas touching the move area</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.ILayout.GetTipPositions(Sias.Core.Interfaces.ITipType,Sias.Core.Interfaces.STipPositionState)">
             <summary>
             Get Tip positions by tip type and tip position state.
            
             Get all tip positions for the given tip type and with the given tip position state.
             </summary>
             <param name="TipType">Tip Type</param>
             <param name="State">Tip position state</param>
             <returns>Collection of tip positions</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.ILayout.GetTipPositions(Sias.Core.Interfaces.ITipType)">
            <summary>
            Get Tip positions by tip type.
            
            Get all tip positions for the given tip type.
            </summary>
            <param name="TipType">Tip Type</param>
            <returns>Collection of tip positions</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.ILayout.GetTipPositions">
            <summary>
            Get all Tip positions.
            
            Get all available tip positions.
            </summary>
            <returns>Collection of tip positions</returns>
        </member>
        <member name="P:Sias.Core.Interfaces.ILayout.Name">
            <summary>
            Layout name.
            
            This property returns the layout name. Take care, the layout name
            does not need to correlate with ax xml file name.
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ILayout.Items">
            <summary>
            Collection of Items in layout.
            
            This property returns a collection of the layout items. To get a 
            specific item it may be easier to use <see cref="M:Sias.Core.Interfaces.ILayout.GetItemByName(System.String)"/>
            or <see cref="M:Sias.Core.Interfaces.ILayout.GetItemsByType(System.String)"/>.
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ILayout.Slots">
            <summary>
            Collection of slots in layout.
            
            This property returns a collection of the layout slots. To get a 
            specific slot it may be easier to use <see cref="M:Sias.Core.Interfaces.ILayout.GetSlotByName(System.String)"/>,
            <see cref="M:Sias.Core.Interfaces.ILayout.GetSlotsByType(System.String)"/> or ILayout.GetFreeSlots .
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ILayout.Cavities">
            <summary>
            Collection of cavities in the layout
            
            This property returns a collection of the layout cavities. To get a 
            specific cavity it may be easier to use <see cref="M:Sias.Core.Interfaces.ILayout.GetCavityByName(System.String)"/>,
            or <see cref="M:Sias.Core.Interfaces.ILayout.GetCavitiesByType(System.String)"/>.
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ILayout.ArmMoveMode">
            <summary>
            Arm move mode.
            
            This property returns the layouts arm move mode.
            </summary>
            <remarks>
            Actually the arm move modes are not supported by the nelson device 
            drivers. If you need this feature it has to be implemented in the 
            application. Please inform sias also, so we may provide support for 
            it in a next version.
            </remarks>
        </member>
        <member name="P:Sias.Core.Interfaces.ILayout.WorktableOffset">
             <summary>
             Worktable offset.
            
             The Worktable is used to adapt the layout to a specific robot. 
             It will result in an offset between \ref LayoutCoordinates and 
             \ref RobotCoordinates. \n
             This property is set on \ref RobotAttach "robot/layout attachment"
             and will be used for \ref RobotLayoutConversion.
             </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ILayout.ScalingVector">
             <summary>
             Scaling vector.
            
             The Scaling vector is used to adapt the layout to a specific robot. 
             It allows a stretching or clinching between \ref LayoutCoordinates 
             and \ref RobotCoordinates. \n
             This property is set on \ref RobotAttach "robot/layout attachment"
             and will be used for \ref RobotLayoutConversion.        
             </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ILayout.ReferencePoint">
             <summary>
             First worktable reference point.
            
             This reference point defines the layout coordinates of the first worktable 
             reference position. If no second worktable reference point is defined, the 
             system will work without a scaling vector (ScalingVector=(1; 1; 1)).
             </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ILayout.ScalingPoint">
             <summary>
             Second worktable reference point.
            
             This reference point defines the layout coordinates of the second worktable reference
             position. If no second worktable reference point is defined the system will work 
             without a scaling factor (ScalingVector=(1; 1; 1)).
             </summary>
             <value></value>
        </member>
        <member name="P:Sias.Core.Interfaces.ILayout.SelectMode">
             <summary>
             Get/set the layout select mode of the ILayout.
            
             This property is used to define the selectable objects the way 
             layout objects can be selected. In general this feature will be 
             used in combination with the layout viewer component.
             </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ILayout.SelectedItems">
            <summary>
            Get/set the selected items.
            
            This property may be used to get the selected items of a layout.
            Setting this property will select the assigned item(s). In case of 
            a layout viewer is assigned the item(s) will be displayed.
            </summary>
            <value>A collection of the selected items</value>
        </member>
        <member name="P:Sias.Core.Interfaces.ILayout.SelectedSlots">
            <summary>
            Get/set the selected slots.
            
            This property may be used to get the selected slots of a layout.
            Setting this property will select the assigned slot(s). In case of 
            a layout viewer is assigned the slot(s) will be displayed.
            </summary>
            <value>A collection of the selected slots</value>
        </member>
        <member name="P:Sias.Core.Interfaces.ILayout.SelectedCavities">
            <summary>
            Get/set the selected cavities.
            
            This property may be used to get the selected cavities from layout.
            Setting this property will select the assigned cavities. In case of 
            a layout viewer is assigned the cavities will be displayed.
            </summary>
            <value>A collection of the selected cavities</value>
        </member>
        <member name="P:Sias.Core.Interfaces.ILayout.SelectedObjects">
            <summary>
            Get/set the selected layout objects (items, slots and cavities).
            
            This property may be used to get the selected layout object(s) of the layout.
            Setting this property will select the assigned layout object(s). In case of 
            a layout viewer is assigned the layout object(s) will be displayed.
            </summary>
            <value>A collection of the selected layout objects</value>
        </member>
        <member name="E:Sias.Core.Interfaces.ILayout.SelectionChanging">
            <summary>
            Get the SelectionChanging event handler of ILayout
            
            This event can be used to get informed if any layout component 
            selection is going to change.
            </summary>
        </member>
        <member name="E:Sias.Core.Interfaces.ILayout.SelectionChanged">
            <summary>
            Get the SelectionChanged event handler of ILayout
            
            This event can be used to get informed if any layout component 
            selection has changed.
            </summary>
        </member>
        <member name="T:Sias.Core.SConfigurationManager">
            <summary>
            The configuration manager is designed to store any kind of configuration parameters.
            </summary>
            <details>
            Each module is able to store its configuration parts using the Configuration 
            Manager.\n
            For more details see section \ref ConfigurationManager.\n
            </details>
        </member>
        <member name="T:Sias.Core.SObject">
            <summary>
            Basic sias object.
            
            This class is used as base for all sias classes supporting 
            XML serialization and/or enhanced property grid support. 
            </summary>
            <details>
            The SObject class 
             - uses a specific type converter for a better property grid support;
             - implements an object name;
             - implements a parent property;
             - implements XML conversion methods (wrapper calls to SXmlConverter);
             - implements a SPG summary including all Browsable object properties;
             - implements basic parameter and type range errors;
             - implements a common clone method cloning all streamable object properties.
             .
            </details>
            ToDo: optionally create == operator for comparing all SStreamable properties
        </member>
        <member name="T:Sias.Core.Interfaces.IXmlExtension">
            <summary>
            XmlExtension interface 
            
            This interface should be implemented by all classes converted by SXmlConverter. As SObject is implementing 
            the interface it is mostly not needed to be implemented in SObject derivates.
            </summary>
        </member>
        <member name="M:Sias.Core.Interfaces.IXmlExtension.WriteProperty(System.Int32,System.Xml.XmlTextWriter,System.String)">
            <summary>
            Write property <paramref name="Name"/> to XmlTextWrite (XML configuration string)
            </summary>
            <param name="Level">Nested object level</param>
            <param name="writer">XML text writer object</param>
            <param name="Name">Property name</param>
        </member>
        <member name="M:Sias.Core.Interfaces.IXmlExtension.WriteXMLString(System.Int32,System.Xml.XmlTextWriter)">
            <summary>
            Write object properties to XmlTextWriter (XML configuration string)
            </summary>
            <param name="Level">Nested object level</param>
            <param name="writer">XML text writer object</param>
        </member>
        <member name="M:Sias.Core.Interfaces.IXmlExtension.ReadProperty(System.Int32,System.Xml.XmlTextReader)">
            <summary>
            Read property from XmlTextReader (XML configuration string)
            </summary>
            <param name="Level">Nested object level</param>
            <param name="reader">XML text reader object</param>
        </member>
        <member name="M:Sias.Core.Interfaces.IXmlExtension.ReadXMLString(System.Int32,System.Xml.XmlTextReader)">
            <summary>
            Read object properties from XmlTextReader (XML configuration string)
            </summary>
            <param name="Level">Nested object level</param>
            <param name="reader">XML text reader object</param>
        </member>
        <member name="F:Sias.Core.SObject.SObjList">
            <summary>
            internal object list (for debugging)
            </summary>
        </member>
        <member name="F:Sias.Core.SObject.BuildSObjectList">
            <summary>
            internal object list (for debugging)
            </summary>
        </member>
        <member name="F:Sias.Core.SObject._ObjectName">
            <summary>Object name variable</summary>
        </member>
        <member name="F:Sias.Core.SObject._Parent">
            <summary>Parent object variable</summary>
        </member>
        <member name="M:Sias.Core.SObject.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Sias.Core.SObject.#ctor(System.String)">
            <summary>
            constructor with XML configuration string
            </summary>
        </member>
        <member name="M:Sias.Core.SObject.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Sias.Core.SObject.WithParentOnly(Sias.Core.Attributes.SPropertyAttributes)">
            <summary>
            Property attribute provider: Use only if object has a parent
            
            This Property attribute provider can be used to hide the property
            if it has no parent object
            </summary>
            <param name="attr">Property attributes object</param>
        </member>
        <member name="M:Sias.Core.SObject.WithoutParentOnly(Sias.Core.Attributes.SPropertyAttributes)">
            <summary>
            Property attribute provider: Use only if object has no parent
            
            This Property attribute provider can be used to hide the property
            if it has a parent object
            </summary>
            <param name="attr">Property attributes object</param>
        </member>
        <member name="M:Sias.Core.SObject.ToXMLString(System.Boolean)">
            <summary>
            Convert the objects configuration properties to an XML string
            
            The Objects configuration properties need to be marked with 
            [SStreamableAtttribute]
            </summary>
            <param name="formated">true returns a formatted XML string; false a compressed one</param>
            <returns>XML configuration string of the object</returns>
        </member>
        <member name="M:Sias.Core.SObject.FromXMLString(System.String)">
            <summary>
            Convert an XML string to the objects configuration properties
            
            The Objects configuration properties need to be marked with 
            [SStreamableAtttribute]
            </summary>
            <param name="xmlInput">XML string including the configuration</param>
            <returns>true, if configuration ok else false</returns>
        </member>
        <member name="M:Sias.Core.SObject.Description(System.Attribute[])">
            <summary>
            Returns a description of the object containing all properties marked
            with the given attribute(s).
            </summary>
            <remarks>This Method is using the SToStringOptions class.</remarks>
            <param name="Attr">Attributes to add to the descriptions</param>
            <returns>A description string of the object</returns>
        </member>
        <member name="M:Sias.Core.SObject.ToString">
            <summary>
            Retrieves a string that indicates the current object.
            </summary>
            <remarks>This Method is using the SToStringOptions class.</remarks>
            <returns>The string format of the object.</returns>
        </member>
        <member name="M:Sias.Core.SObject.GetErrorInfos">
            <summary>
            This interface function returns the default error messages which can be 
            generated by this device (or its derivations).
            </summary>
            <returns>A collection with error information</returns>
        </member>
        <member name="F:Sias.Core.SObject.ParameterRangeErrorMode">
            <summary>
            General error handling mode for Parameter range errors:
             - SErrorResult.None:	Display error dialog 
             - SErrorResult.Ignore: Do not check parameter ranges
             - SErrorResult.Yes:	Automatically correct value
             - All others:			Do not correct value (typically this 
            						will result in another error!)
            </summary>
        </member>
        <member name="M:Sias.Core.SObject.RangeOK``1(System.String,``0@,``0,``0,System.Object)">
            <summary>
            This is a general range check method.
            
            The method is implemented as general range check.  It is designed to be used with all 
            value types. It checks if <paramref name="val"/> is in the defined range 
            (<paramref name="min"/> .. <paramref name="max"/>). If the value is not in the defined 
            range the method will call the <see cref="T:Sias.Core.SErrorManager"/> to report the error.
            </summary>
            <remarks>
            It is recommended to call this methods only in classes derived from SObject. If not the class 
            needs to add the range error codes to its class error list.
            </remarks>
            <typeparam name="VType">Type of the value type</typeparam>
            <param name="ParName">Name of the parameter (for error reporting)</param>
            <param name="val">Actual value</param>
            <param name="min">Lower range limit (Minimum allowed value)</param>
            <param name="max">Upper range limit (Maximum allowed value)</param>
            <param name="ErrorObj">The error object</param>
            <returns>True if value accepted (between min and max), otherwise false</returns>
        </member>
        <member name="F:Sias.Core.SObject.TypeRangeErrorMode">
            <summary>
            General error handling mode for type range errors:
             - SErrorResult.None:	Display error dialog 
             - SErrorResult.Ignore: Do not check parameter ranges
             - SErrorResult.Yes:	Automatically correct value
             - SErrorResult.No:		Do not correct value (typically this 
            						will result in another error!)
            </summary>
        </member>
        <member name="M:Sias.Core.SObject.CheckInt(System.String,System.Int32,System.Int32,System.Int32,System.Type)">
            <summary>check integer value range value </summary>
        </member>
        <member name="M:Sias.Core.SObject.IntToShort(System.String,System.Int32)">
            <summary>Convert integer value to signed short including range check</summary>
        </member>
        <member name="M:Sias.Core.SObject.IntToUShort(System.String,System.Int32)">
            <summary>Convert integer value to unsigned short including range check</summary>
        </member>
        <member name="M:Sias.Core.SObject.IntToByte(System.String,System.Int32)">
            <summary>Convert integer value to unsigned byte including range check</summary>
        </member>
        <member name="M:Sias.Core.SObject.IntToSByte(System.String,System.Int32)">
            <summary>Convert integer value to signed byte including range check</summary>
        </member>
        <member name="M:Sias.Core.SObject.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            The function will create a new object and copies all SStreamable 
            properties to the new object.
            </summary>
            <returns>A copy of the object</returns>
            TODO: Maybe we need another attribute to select additional runtime 
            	  data properties to be copied to the clone!
        </member>
        <member name="M:Sias.Core.SObject.MemberwiseClone">
            <summary>
            Creates a new object that is a copy of the current instance.
            
            Overwriting memberwise clone keep me informed about new instances!
            Improtant: We are not sure if the destructur is called for all of them ...
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Sias.Core.SObject.WriteProperty(System.Int32,System.Xml.XmlTextWriter,System.String)">
            <summary>
            
            </summary>
            <param name="Level"></param>
            <param name="writer"></param>
            <param name="Name"></param>
        </member>
        <member name="M:Sias.Core.SObject.WriteXMLString(System.Int32,System.Xml.XmlTextWriter)">
            <summary>
            
            </summary>
            <param name="Level"></param>
            <param name="writer"></param>
        </member>
        <member name="M:Sias.Core.SObject.ReadProperty(System.Int32,System.Xml.XmlTextReader)">
            <summary>
            
            </summary>
            <param name="Level"></param>
            <param name="reader"></param>
        </member>
        <member name="M:Sias.Core.SObject.ReadXMLString(System.Int32,System.Xml.XmlTextReader)">
            <summary>
            
            </summary>
            <param name="Level"></param>
            <param name="reader"></param>
        </member>
        <member name="P:Sias.Core.SObject.ObjectName">
            <summary>Object name</summary>
        </member>
        <member name="P:Sias.Core.SObject.Parent">
            <summary>Parent object</summary>
        </member>
        <member name="P:Sias.Core.SObject.HasParent">
            <summary>True if object has a valid parent object</summary>
        </member>
        <member name="P:Sias.Core.SObject.SPG_Summary">
            <summary>
            Smart Property Grid (SPG) summary
            
            This Property returns the type name and all Browsable value types and strings as 
            a summary string. A String with the same format can be passed to the property to
            set all Browsable value types and strings. The type name needs to be identical!
            </summary>
        </member>
        <member name="P:Sias.Core.SObject.SPG_TypeName">
            <summary>
            Name of the type
            
            This property is used for adding array elements at a SPropertyGrid. It should
            be available for all elements needed managed in arrays or collections used in
            a SPropertyGrid.
            </summary>
        </member>
        <member name="T:Sias.Core.SObject.ErrorCodes">
            <summary>
            This static class keeps the error code constants of the \ref Sias::Core::SObject errors.
            </summary>
        </member>
        <member name="F:Sias.Core.SObject.ErrorCodes.TypeRangeErrorCode">
            <summary>0x40000001: Type range error</summary>
        </member>
        <member name="F:Sias.Core.SObject.ErrorCodes.ParameterRangeErrorCode">
            <summary>0x40000002: Parameter range error</summary>
        </member>
        <member name="F:Sias.Core.SConfigurationManager._ConfigurationFileName">
            <summary>Default configuration file name field</summary>
        </member>
        <member name="F:Sias.Core.SConfigurationManager.NoAbsolutePathExtention">
            <summary>
            No absolute path extension property
            
            This field allows to deactivate whether the absolute path extension will be used or not. 
            Using the absolute path extension allows to move configuration files between 
            different paths on the same pc by defining relative paths. \n
            - NoAbsolutePathExtention=False \n
                paths will be stored relative to the BaseDirectory, but returned 
                to application as absolute path. absolute paths not below 
                the base directory will keep unchanged. (Default)
            - NoAbsolutePathExtention=True \n
                All paths will stay untouched independent of the base directory. 
            .
            </summary>
        </member>
        <member name="M:Sias.Core.SConfigurationManager.StringToPath(System.String,System.String)">
            <summary>
            Convert a string to an absolute path
            
            This Method is used to convert an (optionally relative) path string 
            to an absolute path based on SConfigurationManager.BaseDirectory. This
            is typically used in case a configured path is used in an application.
            </summary>
            <param name="str">The absolute path</param>
            <param name="Base">The base directory for the operation</param>
            <returns>The absolute path for the given string</returns>
            <remarks>
            \b Important: If SConfigurationManager.NoAbsolutePathExtention is true
                          the string will be returned unchanged!
            </remarks>
        </member>
        <member name="M:Sias.Core.SConfigurationManager.StringToPath(System.String)">
            <summary>
            Convert a string to an absolute data path
            
            This Method is used to convert an (optionally relative) path string 
            to an absolute path based on SConfigurationManager.BaseDirectory. This
            is typically used in case a configured path is used in an application.
            </summary>
            <param name="str">The absolute path</param>
            <returns>The absolute path for the given string</returns>
            <remarks>
            \b Important: If SConfigurationManager.NoAbsolutePathExtention is true
                          the string will be returned unchanged!
            </remarks>
        </member>
        <member name="M:Sias.Core.SConfigurationManager.PathToString(System.String,System.String)">
            <summary>
            Convert an absolute path to a setup string
            
            This method is used to convert an absolute path to a configuration string.\n
             - In case SConfigurationManager.NoAbsolutePathExtention is true the path keeps 
               unchanged. 
             - In case SConfigurationManager.NoAbsolutePathExtention is false and the given 
               path is below SConfigurationManager.BaseDirectory the returned configuration 
               path string will be returned relative to SConfigurationManager.BaseDirectory.
            </summary>
            <param name="path">The string to store</param>
            <param name="Base">The base directory for the operation</param>
            <returns>The configuration string of the path</returns>
        </member>
        <member name="M:Sias.Core.SConfigurationManager.PathToString(System.String)">
            <summary>
            Convert an absolute path to a setup string
            
            This method is used to convert an absolute path to a configuration string.\n
             - In case SConfigurationManager.NoAbsolutePathExtention is true the path keeps 
               unchanged. 
             - In case SConfigurationManager.NoAbsolutePathExtention is false and the given 
               path is below SConfigurationManager.BaseDirectory the returned configuration 
               path string will be returned relative to SConfigurationManager.BaseDirectory.
            </summary>
            <param name="path">The string to store</param>
        </member>
        <member name="F:Sias.Core.SConfigurationManager._BinaryBasePath">
            <summary>Binary base path field</summary>
        </member>
        <member name="F:Sias.Core.SConfigurationManager._DataBasePath">
            <summary>Data base path field</summary>
        </member>
        <member name="F:Sias.Core.SConfigurationManager._Configuration">
            <summary>Configuration hash table field</summary>
        </member>
        <member name="F:Sias.Core.SConfigurationManager._DevicePath">
            <summary>Device path field</summary>
        </member>
        <member name="F:Sias.Core.SConfigurationManager._DeviceDriverPath">
            <summary>Device driver path field</summary>
        </member>
        <member name="F:Sias.Core.SConfigurationManager._DefaultRobot">
            <summary>Default robot name or robot file name field</summary>
        </member>
        <member name="F:Sias.Core.SConfigurationManager._LayoutPath">
            <summary>Layout path field</summary>
        </member>
        <member name="F:Sias.Core.SConfigurationManager._DefaultLayout">
            <summary>Default layout name or layout file name field</summary>
        </member>
        <member name="F:Sias.Core.SConfigurationManager._ActionPath">
            <summary>Action path field</summary>
        </member>
        <member name="F:Sias.Core.SConfigurationManager._ProcessDataPath">
            <summary>Process data path field</summary>
        </member>
        <member name="F:Sias.Core.SConfigurationManager._DataPath">
            <summary>Action path field</summary>
        </member>
        <member name="F:Sias.Core.SConfigurationManager._DefaultTipConfig">
            <summary>Default tip configuration field</summary>
        </member>
        <member name="M:Sias.Core.SConfigurationManager.#cctor">
            <summary>
            Initializes the static <b>SConfigurationManager</b> class.
            </summary>
        </member>
        <member name="M:Sias.Core.SConfigurationManager.LoadConfiguration(System.String)">
            <summary>
            Load configuration from given file name.
            
            In case of a relative path is given the system tries to load from different origins
            in the following order:
             -# Try loading from current directory (On startup this is the given work path of the application)
             -# Try loading from path stored in registry at [HKLM\\Software\\Wow6432Node\\Sias\\Nelson\\DataPath]
             -# Try loading from application startup path (where the application was started)
             -# Try loading from binary base path (from Configuration manager)
             -# Try Loading from <b>\%Userprofile\%\\AppData\\local\\Nelson\\Nelson_Version</b> folder 
             -# Try Loading from <b>\%Userprofile\%\\AppData\\local\\Nelson</b> folder 
             -# Try Loading from <b>\%ProgramData\%\\Nelson\\Nelson_Version</b> folder 
             -# Try Loading from <b>\%ProgramData\%\\Nelson</b> folder 
             .
            The path where the configuration file will be loaded will be used as default DataBasePath .
            </summary>
            <param name="FileName">The file name to load the configuration from </param>
        </member>
        <member name="M:Sias.Core.SConfigurationManager.LoadConfiguration">
            <summary>
            Load configuration from default configuration file.
            </summary>
            <details>
            The default file name can be defined by the 
                \nlink{Sias::Core::SConfigurationManager,ConfigurationFileName}
            property.
            </details>
        </member>
        <member name="M:Sias.Core.SConfigurationManager.SaveConfiguration(System.String)">
            <summary>
            Save configuration to defined configuration file.
            </summary>
            <param name="FileName">Name of the file to store the configuration too.</param>
        </member>
        <member name="M:Sias.Core.SConfigurationManager.SaveConfiguration">
            <summary>
            Save configuration to default configuration file.
            </summary>
            <details>
            The default configuration file name can be defined by the 
                \nlink{Sias::Core::SConfigurationManager,ConfigurationFileName}
            property.
            </details>
        </member>
        <member name="M:Sias.Core.SConfigurationManager.EditConfiguration">
            <summary>
            Edit configuration.
            
            This is a real primitive editing dialog for the additional configuration stuff.
            </summary>
        </member>
        <member name="M:Sias.Core.SConfigurationManager.TryGetString(System.Object,System.String)">
            <summary>
            Get a String value from configuration
            
            In difference to SConfigurationManager.GetString the value will not be set in case of 
            the key does not exist. So the configuration will not be changed.
            </summary>
            <param name="key">Configuration key</param>
            <param name="Default">Default value for the integer</param>
            <returns>The configuration string value assigned to the given key</returns>
        </member>
        <member name="M:Sias.Core.SConfigurationManager.GetString(System.Object,System.String)">
            <summary>
            Get a string from configuration
            
            This method gets a string from dynamic data block. If the string is not defined
            the default value will be returned and written to dynamic data.
            </summary>
            <param name="key">Configuration key</param>
            <param name="Default">Default value for the string</param>
            <returns>The configuration string assigned to the given key</returns>
        </member>
        <member name="M:Sias.Core.SConfigurationManager.SetString(System.Object,System.String)">
            <summary>
            Set a configuration string value
            
            This method sets a string in the dynamic data block.
            </summary>
            <param name="key">Configuration key</param>
            <param name="NewValue">New value for the string</param>
        </member>
        <member name="M:Sias.Core.SConfigurationManager.TryGetInt(System.Object,System.Int32)">
            <summary>
            Get an integer value from configuration
            
            In difference to GetInt the value will not be set in case of 
            the key does not exist.
            </summary>
            <param name="key">Configuration key</param>
            <param name="Default">Default value for the integer</param>
            <returns>The configuration integer value assigned to the given key</returns>
        </member>
        <member name="M:Sias.Core.SConfigurationManager.GetInt(System.Object,System.Int32)">
            <summary>Get an integer value from configuration</summary>
            <param name="key">Configuration key</param>
            <param name="Default">Default value for the integer</param>
            <returns>The configuration integer value assigned to the given key</returns>
        </member>
        <member name="M:Sias.Core.SConfigurationManager.SetInt(System.Object,System.Int32)">
            <summary>Set a configuration integer value</summary>
            <param name="key">Configuration key</param>
            <param name="NewValue">New value for the integer value</param>
        </member>
        <member name="M:Sias.Core.SConfigurationManager.TryGetDouble(System.Object,System.Double)">
            <summary>
            Get a double value from configuration
            
            In difference to GetDouble the value will not be set in case of 
            the key does not exist.
            </summary>
            <param name="key">Configuration key</param>
            <param name="Default">Default value for the double </param>
            <returns>The configuration double value assigned to the given key</returns>
        </member>
        <member name="M:Sias.Core.SConfigurationManager.GetDouble(System.Object,System.Double)">
            <summary>Get a double value from configuration</summary>
            <param name="key">Configuration key</param>
            <param name="Default">Default value for the double </param>
            <returns>The configuration double value assigned to the given key</returns>
        </member>
        <member name="M:Sias.Core.SConfigurationManager.SetDouble(System.Object,System.Double)">
            <summary>Set a configuration double value</summary>
            <param name="key">Configuration key</param>
            <param name="NewValue">New value for the double</param>
        </member>
        <member name="M:Sias.Core.SConfigurationManager.TryGetPath(System.Object,System.String)">
            <summary>
            Get a path string from configuration.
            
            In difference to GetPath the value will not be set in case of 
            the key does not exist. 
            </summary>
            <param name="key">Configuration key</param>
            <param name="Default">Default value for the path string</param>
            <returns>The configuration path string assigned to the given key</returns>
        </member>
        <member name="M:Sias.Core.SConfigurationManager.GetPath(System.Object,System.String)">
            <summary>
            Get a path string from configuration.
            
            In difference to GetString GetPath validates the path. The path is returned as 
            an absolute path.
            </summary>
            <param name="key">Configuration key</param>
            <param name="Default">Default value for the path string</param>
            <returns>The configuration path string assigned to the given key</returns>
        </member>
        <member name="M:Sias.Core.SConfigurationManager.SetPath(System.Object,System.String)">
            <summary>
            Set a path string configuration string value.
            
            In difference to SetString SetPath validates the given path.
            </summary>
            <param name="key">Configuration key</param>
            <param name="NewValue">New value for the path string</param>
        </member>
        <member name="M:Sias.Core.SConfigurationManager.TryGetDataPath(System.Object,System.String)">
            <summary>
            Get a path string from configuration.
            
            In difference to GetPath the value will not be set in case of 
            the key does not exist.
            </summary>
            <param name="key">Configuration key</param>
            <param name="Default">Default value for the path string</param>
            <returns>The configuration path string assigned to the given key</returns>
        </member>
        <member name="M:Sias.Core.SConfigurationManager.GetDataPath(System.Object,System.String)">
            <summary>
            Get a data path from configuration.
            
            In difference to GetString GetPath validates the path. The path is returned as 
            an absolute path.
            </summary>
            <param name="key">Configuration key</param>
            <param name="Default">Default value for the path string</param>
            <returns>The configuration path string assigned to the given key</returns>
        </member>
        <member name="M:Sias.Core.SConfigurationManager.SetDataPath(System.Object,System.String)">
            <summary>
            Set a path string configuration string value.
            
            In difference to SetString SetPath validates the given path.
            </summary>
            <param name="key">Configuration key</param>
            <param name="NewValue">New value for the path string</param>
        </member>
        <member name="M:Sias.Core.SConfigurationManager.TryGetBinaryPath(System.Object,System.String)">
            <summary>
            Get a path string from configuration.
            
            In difference to GetPath the value will not be set in case of 
            the key does not exist.
            </summary>
            <param name="key">Configuration key</param>
            <param name="Default">Default value for the path string</param>
            <returns>The configuration path string assigned to the given key</returns>
        </member>
        <member name="M:Sias.Core.SConfigurationManager.GetBinaryPath(System.Object,System.String)">
            <summary>
            Get a Binary path from configuration.
            
            In difference to GetString GetPath validates the path. The path is returned as 
            an absolute path.
            </summary>
            <param name="key">Configuration key</param>
            <param name="Default">Default value for the path string</param>
            <returns>The configuration path string assigned to the given key</returns>
        </member>
        <member name="M:Sias.Core.SConfigurationManager.SetBinaryPath(System.Object,System.String)">
            <summary>
            Set a path string configuration string value.
            
            In difference to SetString SetPath validates the given path.
            </summary>
            <param name="key">Configuration key</param>
            <param name="NewValue">New value for the path string</param>
        </member>
        <member name="P:Sias.Core.SConfigurationManager.ConfigurationFileName">
            <summary>Default configuration file name property</summary>
        </member>
        <member name="P:Sias.Core.SConfigurationManager.BaseDirectory">
            <summary>
            Application base directory property
            
            This property define the applications base directory. This property will change 
            SConfigurationManager.DataBasePath and SConfigurationManager.BinaryBasePath .\n
            \n Important:   It is not recommended to use this property except if you use a
                            combined data/binary folder.
            </summary>
        </member>
        <member name="P:Sias.Core.SConfigurationManager.BinaryBasePath">
            <summary>
            Binary base path property
            
            This property defines the base path for finding binary files like device driver 
            or action assemblies. As Default the binary base path is the path where the 
            application is called. \n
            Relative binary paths in configuration file are interpreted as being relative to 
            the SConfigurationManager.BinaryBasePath property.
            </summary>
        </member>
        <member name="P:Sias.Core.SConfigurationManager.DataBasePath">
            <summary>
            Data base path property
            
            The Data base path is the base path for relative data files or directories.
            As default this is the location of the last loaded configuration file.\n
            Relative data paths are interpreted as being relative to the
            SConfigurationManager.DataBasePath property.
            </summary>
        </member>
        <member name="P:Sias.Core.SConfigurationManager.Configuration">
            <summary>
            Dynamic Configuration hash table.\n
            
            This hash table is used to store the \ref ConfigValues "variable configuration"  
            members. Variable configuration members are used by several Nelson SDK components 
            to store individual configuration options, but can also be used from applications 
            to store application specific configuration members.\n
            Default value: <b>"empty hash table"</b>
            </summary>
        </member>
        <member name="P:Sias.Core.SConfigurationManager.DevicePath">
            <summary>
            Default path for device configurations.\n
            Default value: <b>"data\Devices"</b>
            </summary>
        </member>
        <member name="P:Sias.Core.SConfigurationManager.DeviceDriverPath">
            <summary>
            Default path to device driver assemblies.\n
            Default value: <b>"bin\Devices"</b>
            </summary>
        </member>
        <member name="P:Sias.Core.SConfigurationManager.DefaultRobot">
            <summary>
            Default robot name or robot file name. \n
            Default value: <b>"Default.Robot"</b> (DB key!)
            </summary>
        </member>
        <member name="P:Sias.Core.SConfigurationManager.LayoutPath">
            <summary>
            Default path to layout files. \n
            Default value: <b>"data\Layouts"</b>
            </summary>
        </member>
        <member name="P:Sias.Core.SConfigurationManager.DefaultLayout">
            <summary>
            Default layout name or layout file name. \n
            Default value: <b>"Default.Layout"</b> (DB key!)
            </summary>
        </member>
        <member name="P:Sias.Core.SConfigurationManager.ActionPath">
            <summary>
            Default path to action assemblies. \n
            Default value: <b>"bin\Actions"</b>
            </summary>
        </member>
        <member name="P:Sias.Core.SConfigurationManager.ProcessDataPath">
            <summary>
            Default path to process data/configuration files. \n
            Default value: <b>"data\Processes"</b>
            </summary>
        </member>
        <member name="P:Sias.Core.SConfigurationManager.DataPath">
            <summary>
            Default path to general configuration files (tips, liquids, ...). \n
            Default value: <b>"data"</b>
            </summary>
        </member>
        <member name="P:Sias.Core.SConfigurationManager.DefaultTipConfig">
            <summary>
            Default tip configuration name or file name. \n
            Default value: <b>"TipAdapters.xml"</b>
            </summary>
        </member>
        <member name="T:Sias.Core.Win32API">
            <summary>
            A utility class for accessing the Win32 API.
            </summary>
        </member>
        <member name="F:Sias.Core.Win32API.WM_USER">
            <summary>Message Id		WM_USER		= 0x0400</summary>
        </member>
        <member name="F:Sias.Core.Win32API.EM_CUT">
            <summary>Message Id		EM_CUT		= 0x0300</summary>
        </member>
        <member name="F:Sias.Core.Win32API.EM_COPY">
            <summary>Message Id		EM_COPY		= 0x0301</summary>
        </member>
        <member name="F:Sias.Core.Win32API.EM_PASTE">
            <summary>Message Id		EM_PASTE	= 0x0302</summary>
        </member>
        <member name="F:Sias.Core.Win32API.EM_CLEAR">
            <summary>Message Id		EM_CLEAR	= 0x0303</summary>
        </member>
        <member name="F:Sias.Core.Win32API.EM_UNDO">
            <summary>Message Id		EM_UNDO		= 0x0304</summary>
        </member>
        <member name="F:Sias.Core.Win32API.EM_CANUNDO">
            <summary>Message Id		EM_CANUNDO	= 0x00C6</summary>
        </member>
        <member name="F:Sias.Core.Win32API.EM_CANPASTE">
            <summary>Message Id		EM_CANPASTE = WM_USER + 50</summary>
        </member>
        <member name="F:Sias.Core.Win32API.EM_GETTEXTLENGTHEX">
            <summary>Message Id		EM_GETTEXTLENGTHEX = WM_USER + 95</summary>
        </member>
        <member name="M:Sias.Core.Win32API.SendMessage(System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
            The SendMessage function sends the specified message to a window or windows. 
            It calls the window procedure for the specified window and does not return until 
            the window procedure has processed the message. 
            </summary>
            <param name="hWnd">
            Handle to the window whose window procedure will receive the message. 
            If this parameter is HWND_BROADCAST, the message is sent to all top-level windows 
            in the system, including disabled or invisible un owned windows, overlapped windows, 
            and pop-up windows; but the message is not sent to child windows.
            Microsoft Windows Vista and later. Message sending is subject to User Interface 
            Privilege Isolation (UIPI). The thread of a process can send messages only to message 
            queues of threads in processes of lesser or equal integrity level.
            </param>
            <param name="msg">Specifies the message to be sent</param>
            <param name="wParam">Specifies additional message-specific information</param>
            <param name="lParam">Specifies additional message-specific information</param>
            <returns>The return value specifies the result of the message processing; it depends on the message sent</returns>
        </member>
        <member name="M:Sias.Core.Win32API.SendMessage(System.IntPtr,System.Int32,Sias.Core.Win32API.GETTEXTLENGTHEX@,System.IntPtr)">
            <summary>
            The SendMessage function sends the specified message to a window or windows. 
            It calls the window procedure for the specified window and does not return until 
            the window procedure has processed the message. 
            </summary>
            <param name="hWnd">
            Handle to the window whose window procedure will receive the message. 
            If this parameter is HWND_BROADCAST, the message is sent to all top-level windows 
            in the system, including disabled or invisible un owned windows, overlapped windows, 
            and pop-up windows; but the message is not sent to child windows.
            Microsoft Windows Vista and later. Message sending is subject to User Interface 
            Privilege Isolation (UIPI). The thread of a process can send messages only to message 
            queues of threads in processes of lesser or equal integrity level.
            </param>
            <param name="Msg">Specifies the message to be sent</param>
            <param name="wParam">Specifies additional message-specific information</param>
            <param name="lParam">Specifies additional message-specific information</param>
            <returns>The return value specifies the result of the message processing; it depends on the message sent</returns>
        </member>
        <member name="M:Sias.Core.Win32API.GetFocus">
            <summary>
            The GetFocus function retrieves the handle to the window that has the keyboard focus, 
            if the window is attached to the calling thread's message queue. 
            </summary>
            <returns>The return value is the handle to the window with the keyboard focus. 
            If the calling thread's message queue does not have an associated window with 
            the keyboard focus, the return value is NULL. 
            </returns>
        </member>
        <member name="M:Sias.Core.Win32API.GetParent(System.IntPtr)">
            <summary>
            The GetParent function retrieves a handle to the specified window's parent or owner.
            </summary>
            <param name="hwnd">Handle to the window whose parent window handle is to be retrieved</param>
            <returns>If the window is a child window, the return value is a handle 
            to the parent window. If the window is a top-level window, the return 
            value is a handle to the owner window. If the window is a top-level un owned 
            window or if the function fails, the return value is NULL. To get extended 
            error information, call GetLastError. For example, this would determine, when 
            the function returns NULL, if the function failed or the window was a top-level 
            window</returns>
        </member>
        <member name="M:Sias.Core.Win32API.#ctor">
            <summary>
            The constructor.  Not used because all methods are static. 
            </summary>
        </member>
        <member name="M:Sias.Core.Win32API.GetFrameworkControl(System.IntPtr)">
            <summary>
            Return the Framework control associated with the specified handle. 
            </summary>
            <param name="hControl">control handle</param>
            <returns>Framework control associated with the specified handle</returns>
        </member>
        <member name="M:Sias.Core.Win32API.GetFocusedControl">
            <summary>
            Return the Framework control associated with focused control.
            </summary>
            <returns>Framework control associated with focused control</returns>
        </member>
        <member name="M:Sias.Core.Win32API.Undo(System.IntPtr)">
            <summary>Undo command</summary>
            <param name="hEdit">ComboBox control handle</param>
        </member>
        <member name="M:Sias.Core.Win32API.Cut(System.IntPtr)">
            <summary>Cut command</summary>
            <param name="hEdit">ComboBox control handle</param>
        </member>
        <member name="M:Sias.Core.Win32API.Copy(System.IntPtr)">
            <summary>Copy command</summary>
            <param name="hEdit">ComboBox control handle</param>
        </member>
        <member name="M:Sias.Core.Win32API.Paste(System.IntPtr)">
            <summary>Paste command</summary>
            <param name="hEdit">ComboBox control handle</param>
        </member>
        <member name="M:Sias.Core.Win32API.CanUndo(System.IntPtr)">
            <summary>Can Undo command</summary>
            <param name="hEdit">ComboBox control handle</param>
            <returns></returns>
        </member>
        <member name="M:Sias.Core.Win32API.CanPasteAnyFormat(System.IntPtr)">
            <summary>
            Determine whether there is any format that can be pasted into a rich text box.
            </summary>
            <param name="hRichText">control handle</param>
            <returns>true if paste possible</returns>
        </member>
        <member name="M:Sias.Core.Win32API.GetTextLength(System.IntPtr)">
            <summary>
            Determine the length of a control's Text.  Required since using the 
            RichTextBox .Length property wipes out the Undo/Redo buffer. 
            </summary>
            <param name="hControl">control handle</param>
            <returns>length of the text</returns>
        </member>
        <member name="T:Sias.Core.Win32API.GETTEXTLENGTHEX">
            <summary>
            GETTEXTLENGTHEX structure
            </summary>
        </member>
        <member name="F:Sias.Core.Win32API.GETTEXTLENGTHEX.uiFlags">
            <summary>uiFlags</summary>
        </member>
        <member name="F:Sias.Core.Win32API.GETTEXTLENGTHEX.uiCodePage">
            <summary>uiCodePage</summary>
        </member>
        <member name="T:Sias.Core.TypeConverters.SPropertyDescriptor">
            <summary>
            Enhances the System.ComponentModel.PropertyDescriptor.
            </summary>
            <remarks>
            All values are gotten from the <see cref="T:Sias.Core.Attributes.SPropertyAttributes"/> 
            object passed to the constructor.
            </remarks>
        </member>
        <member name="F:Sias.Core.TypeConverters.SPropertyDescriptor._propertyAttributes">
            <summary>Property attributes field</summary>
        </member>
        <member name="F:Sias.Core.TypeConverters.SPropertyDescriptor._AlternateType">
            <summary>alternate editing type (needs to be assignable from origin type) field</summary>
        </member>
        <member name="M:Sias.Core.TypeConverters.SPropertyDescriptor.#ctor(System.ComponentModel.PropertyDescriptor,Sias.Core.Attributes.SPropertyAttributes)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Sias.Core.TypeConverters.SPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            Returns whether resetting an object changes its value. 
            </summary>
            <param name="component">The component to test for reset capability</param>
            <returns>True if resetting the component changes its value; otherwise, false.</returns>
        </member>
        <member name="M:Sias.Core.TypeConverters.SPropertyDescriptor.GetValue(System.Object)">
            <summary>
            Gets the current value of the property on a component. 
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:Sias.Core.TypeConverters.SPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            When overridden in a derived class, resets the value for this property of the component to the default value.  
            </summary>
            <param name="component">The component with the property value that is to be reset to the default value.</param>
        </member>
        <member name="M:Sias.Core.TypeConverters.SPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            determines a value indicating whether the value of this property needs to be persisted. 
            </summary>
            <param name="component">The component with the property to be examined for persistence.</param>
            <returns>true if the property should be persisted; otherwise, false.</returns>
        </member>
        <member name="M:Sias.Core.TypeConverters.SPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            sets the value of the component to a different value. 
            </summary>
            <param name="component">The component with the property value that is to be set.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="P:Sias.Core.TypeConverters.SPropertyDescriptor.propertyAttributes">
            <summary>Property attributes property</summary>
        </member>
        <member name="P:Sias.Core.TypeConverters.SPropertyDescriptor.AlternateType">
            <summary>alternate editing type (needs to be assignable from origin type) property</summary>
        </member>
        <member name="P:Sias.Core.TypeConverters.SPropertyDescriptor.ComponentType">
            <summary>
            Gets the type of the component this property is bound to.
            </summary>
        </member>
        <member name="P:Sias.Core.TypeConverters.SPropertyDescriptor.DisplayName">
            <summary>
            Gets the name that can be displayed in a window, such as a Properties window. 
            </summary>
        </member>
        <member name="P:Sias.Core.TypeConverters.SPropertyDescriptor.Description">
            <summary>
            Gets the description of the member, as specified in the DescriptionAttribute. 
            </summary>
        </member>
        <member name="P:Sias.Core.TypeConverters.SPropertyDescriptor.Category">
            <summary>
            Gets the name of the category to which the member belongs, as specified in the CategoryAttribute. 
            </summary>
        </member>
        <member name="P:Sias.Core.TypeConverters.SPropertyDescriptor.IsReadOnly">
            <summary>
            When overridden in a derived class, gets a value indicating whether this property is read-only. 
            </summary>
        </member>
        <member name="P:Sias.Core.TypeConverters.SPropertyDescriptor.IsBrowsable">
            <summary>
            Gets a value indicating whether the member is Browsable, as specified in the BrowsableAttribute. 
            </summary>
        </member>
        <member name="P:Sias.Core.TypeConverters.SPropertyDescriptor.Name">
            <summary>
            Gets the name of the member.
            </summary>
        </member>
        <member name="P:Sias.Core.TypeConverters.SPropertyDescriptor.PropertyType">
            <summary>
            When overridden in a derived class, gets the type of the property. 
            </summary>
        </member>
        <member name="P:Sias.Core.TypeConverters.SPropertyDescriptor.Converter">
            <summary>
            Gets the Converter of the SPropertyDescriptor
            
            It is needed to overwrite this to cover the alternate type feature also 
            for the converter!
            </summary>
            <value></value>
        </member>
        <member name="T:Sias.Core.Attributes.SSerializeAsAttribute">
            <summary>
            Optional attribute for detailed specification of where
            STypeConverter should look for its resources.
            </summary>
        </member>
        <member name="M:Sias.Core.Attributes.SSerializeAsAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <b>SSerializeAsAttribute</b> class.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="F:Sias.Core.Attributes.SSerializeAsAttribute._PropertyName">
            <summary>name of the class property to use for serialization field</summary>
        </member>
        <member name="P:Sias.Core.Attributes.SSerializeAsAttribute.PropertyName">
            <summary>name of the class property to use for serialization property</summary>
        </member>
        <member name="T:Sias.Core.SXmlConverter">
            <summary>
            This class includes static members for converting objects to/from an xml string
            </summary>
        </member>
        <member name="M:Sias.Core.SXmlConverter.StringToByteArray(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Sias.Core.SXmlConverter.ByteArrayToString(System.Byte[])">
            <summary>
            
            </summary>
            <param name="buf"></param>
            <returns></returns>
        </member>
        <member name="M:Sias.Core.SXmlConverter.Compress(System.Byte[])">
            <summary>
            Compress data
            </summary>
            <param name="data">uncompressed data to compress</param>
            <returns>compressed data</returns>
        </member>
        <member name="M:Sias.Core.SXmlConverter.CompressString(System.String)">
            <summary>
            compress string data
            </summary>
            <param name="DataString">The string to compress</param>
            <returns>Byte array representing the compressed String</returns>
        </member>
        <member name="M:Sias.Core.SXmlConverter.Decompress(System.Byte[])">
            <summary>
            Decompress data
            </summary>
            <param name="CompressedData">The compressed data</param>
            <returns>the uncompressed data</returns>
        </member>
        <member name="M:Sias.Core.SXmlConverter.DecompressString(System.Byte[])">
            <summary>
            Decompress string 
            </summary>
            <param name="CompressedData">The compressed data</param>
            <returns>The original Unicode string</returns>
        </member>
        <member name="M:Sias.Core.SXmlConverter.CompressToBase64(System.String)">
            <summary>
            compress string to compressed base 64
            </summary>
            <param name="DataString">The string to compress</param>
            <returns>A Base64 string including the data</returns>
        </member>
        <member name="M:Sias.Core.SXmlConverter.DecompressFromBase64(System.String)">
            <summary>
            compress string to compressed base 64
            </summary>
            <param name="Base64String">A Base64 string including the data</param>
            <returns>The decompressed string</returns>
        </member>
        <member name="F:Sias.Core.SXmlConverter._SerialisationAttributeTypes">
            <summary>XML Serialization attributes field</summary>
        </member>
        <member name="F:Sias.Core.SXmlConverter._IgnoreTypeConverterTypes">
            <summary>A list of not used type converter types field</summary>
        </member>
        <member name="M:Sias.Core.SXmlConverter.ObjectToBase64String(System.Object)">
            <summary>
            Convert an serializable object to a Base64 string 
            </summary>
            <param name="obj">The object to convert</param>
            <returns>The base64 string</returns>
        </member>
        <member name="M:Sias.Core.SXmlConverter.Base64StringToObject(System.String)">
            <summary>
            Convert a Base64 string to a deserializable object
            </summary>
            <param name="b64">The Base64 string</param>
            <returns>The resulting object</returns>
        </member>
        <member name="M:Sias.Core.SXmlConverter.TypeWriteOrder(System.Type)">
            <summary>
            
            </summary>
            <param name="MyType"></param>
            <returns></returns>
        </member>
        <member name="M:Sias.Core.SXmlConverter.IsTypeConverterValid(System.ComponentModel.TypeConverter)">
            <summary>
            Check if the given type converter is valid (allowed for conversion)
            </summary>
            <param name="tc"></param>
            <returns>True if the converter is valid, otherwise false.</returns>
        </member>
        <member name="M:Sias.Core.SXmlConverter.ItemID(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="MyProp"></param>
            <returns></returns>
        </member>
        <member name="M:Sias.Core.SXmlConverter.SetParent(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="SubObj"></param>
            <param name="parent"></param>
        </member>
        <member name="M:Sias.Core.SXmlConverter.CreateItem(System.Type,System.Object,System.String)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <param name="parent"></param>
            <param name="ItemID"></param>
            <returns></returns>
        </member>
        <member name="M:Sias.Core.SXmlConverter.WritePropertyStart(System.Xml.XmlTextWriter,System.String,System.Object,System.Type)">
            <summary>
            write property start
            </summary>
            <param name="writer">XML text writer object</param>
            <param name="Name">The property name</param>
            <param name="Obj">Property value object</param>
            <param name="PropType">the property type</param>
        </member>
        <member name="M:Sias.Core.SXmlConverter.WriteArrayElement(System.Int32,System.Xml.XmlTextWriter,System.Object,System.Type)">
            <summary>
            Send array or collection element to XML writer
            </summary>
            <param name="Level">Nested object level</param>
            <param name="writer">XML text writer object</param>
            <param name="Obj">Property value object</param>
            <param name="ElementType">Array element type</param>
        </member>
        <member name="M:Sias.Core.SXmlConverter.WritePropertyValue(System.Int32,System.Xml.XmlTextWriter,System.String,System.Object,System.Type)">
            <summary>
            Write property to XmlTextWrite (XML config string)
            </summary>
            <param name="Level">Nested object level</param>
            <param name="writer">XML text writer object</param>
            <param name="Name">Property name (null for TypeName (e.g. for ArrayElement)</param>
            <param name="Obj">Property value object</param>
            <param name="PropType"></param>
        </member>
        <member name="M:Sias.Core.SXmlConverter.WriteProperty(System.Int32,System.Xml.XmlTextWriter,System.String,System.Object)">
            <summary>
            Send object property <paramref name="Name"/> of <paramref name="Parent"/>to XML writer
            </summary>
            <param name="Level">Nested object level</param>
            <param name="writer">XML text writer object</param>
            <param name="Name">Property name</param>
            <param name="Parent">The Properties parent object</param>
        </member>
        <member name="M:Sias.Core.SXmlConverter.WriteXMLString(System.Int32,System.Xml.XmlTextWriter,System.Object)">
            <summary>
            Send <paramref name="Obj"/> without Start and End element to <paramref name="writer"/> (XML config string)
            </summary>
            <param name="Level">Nested object level</param>
            <param name="writer">XML text writer object</param>
            <param name="Obj">Object to write</param>
        </member>
        <member name="M:Sias.Core.SXmlConverter.ToXMLString(System.Object,System.Boolean)">
            <summary>
            Convert the objects configuration properties to an XML string
            The Objects configuration properties need to be marked with 
            [SStreamableAtttribute]
            </summary>
            <param name="obj">The object to convert</param>
            <param name="formated">true returns a formatted XML string; false a compressed one</param>
            <returns>XML configuration string of the object</returns>
        </member>
        <member name="M:Sias.Core.SXmlConverter.ToXMLFile(System.String,System.Object,System.Boolean)">
            <summary>
            Convert the objects configuration properties to an XML string
            The Objects configuration properties need to be marked with 
            [SStreamableAtttribute]
            </summary>
            <param name="FileName">The name of the file to store the information</param>
            <param name="obj">The object to convert</param>
            <param name="formated">true writes a formatted XML string; false a compressed one</param>
            <returns>true if writing successful, false if not</returns>
        </member>
        <member name="M:Sias.Core.SXmlConverter.ToZipFile(System.String,System.Object)">
            <summary>
            Convert the objects configuration properties to an XML string
            The Objects configuration properties need to be marked with 
            [SStreamableAtttribute]
            </summary>
            <param name="FileName">The name of the file to store the information</param>
            <param name="obj">The object to convert</param>
            <returns>true if writing successful, false if not</returns>
        </member>
        <member name="M:Sias.Core.SXmlConverter.GetPropertyType(System.Xml.XmlTextReader,System.Object,System.Type)">
            <summary>
            Determinate the right type of a property
            
             - a valid (findable) type defined by a Type Attribute has highest priority
             - if the Token is identical to the default property type use the default property type
             - if Token is the name of a Default Type use the default type
             - if the actual object is valid use the type of the actual object
             - else use the default type (if defined)
            </summary>
            <param name="reader">XML reader</param>
            <param name="ActObj">Actual object (what we got from parent)</param>
            <param name="PropType">Parent Property type</param>
            <returns>The type of the object stored in XML</returns>
        </member>
        <member name="M:Sias.Core.SXmlConverter.ReadArrayCount(System.Xml.XmlTextReader)">
            <summary>
            Read array, list or dictionary count value
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Sias.Core.SXmlConverter.ReadPropertyValue(System.Int32,System.Xml.XmlTextReader,System.Object,System.Object,System.Type,System.String)">
            <summary>
            Read a property value
            </summary>
            <param name="Level">Level</param>
            <param name="reader">XML reader</param>
            <param name="ActObj">origin object</param>
            <param name="Parent">Parent</param>
            <param name="PropType">Base property type </param>
            <param name="ItemID">Item identification (for errors and warnings)</param>
            <returns></returns>
        </member>
        <member name="M:Sias.Core.SXmlConverter.ReadProperty(System.Int32,System.Xml.XmlTextReader,System.Object)">
            <summary>
            Read property from XmlTextReader (XML configuration string)
            
            The method expects the reader to be at the Property elements start token.
            </summary>
            <param name="Level">Nested object level</param>
            <param name="reader">XML text reader object</param>
            <param name="Parent">Parent object</param>
        </member>
        <member name="M:Sias.Core.SXmlConverter.ReadXMLString(System.Int32,System.Xml.XmlTextReader,System.Object)">
            <summary>
            Read object properties from XmlTextReader (XML configuration string)
            </summary>
            <param name="Level">Nested object level</param>
            <param name="reader">XML text reader object</param>
            <param name="Obj">Object for reading the configuration</param>
        </member>
        <member name="M:Sias.Core.SXmlConverter.FromXMLString(System.Object,System.String)">
            <summary>
            Convert an XML string to the objects configuration properties
            The Objects configuration properties need to be marked with 
            [SStreamableAtttribute]
            </summary>
            <remarks>
            \b Important: This method will fail, if the object is deserialized 
                          by using its type converter (all value types, SPosition
                          SGripperPosition, ...). In Most cases it may be better 
                          to use CreateFromXMLString instead of FromXMLString.
            </remarks>
            <param name="obj">object to read</param>
            <param name="xmlInput">XML string including the configuration</param>
            <returns>true, if configuration ok else false</returns>
        </member>
        <member name="M:Sias.Core.SXmlConverter.CreateFromXMLString(System.String)">
            <summary>
            static method to create an object by using an xml string
            The root name of the xml string needs to define the type name 
            of the object to create.
            </summary>
            <param name="xmlInput">XML configuration string of the object</param>
            <returns>The generated object</returns>
        </member>
        <member name="M:Sias.Core.SXmlConverter.FromXMLFile(System.Object,System.String)">
            <summary>
            Convert an XML string read from the given XML file to the objects configuration 
            properties. The Objects configuration properties need to be marked with 
            [SStreamableAtttribute]
            </summary>
            <remarks>
            \b Important: This method will fail, if the object is deserialized 
                          by using its type converter (all value types, SPosition
                          SGripperPosition, ...). In Most cases it may be better 
                          to use CreateFromXMLFile instead of FromXMLFile.
            </remarks>
            <param name="obj">object to read</param>
            <param name="FileName">File name where to read the XML string including the configuration</param>
            <returns>true, if configuration ok else false</returns>
        </member>
        <member name="M:Sias.Core.SXmlConverter.CreateFromXMLFile(System.String)">
            <summary>
            static method to create an object by using an xml file.
            The root name of the xml string in the file needs to define the 
            type name of the object to create.
            </summary>
            <param name="FileName">XML configuration string of the object</param>
            <returns>The generated object</returns>
        </member>
        <member name="M:Sias.Core.SXmlConverter.FromZipFile(System.Object,System.String)">
            <summary>
            Convert an XML string read from the given XML file to the objects configuration 
            properties. The Objects configuration properties need to be marked with 
            [SStreamableAtttribute]
            </summary>
            <param name="obj">object to read</param>
            <param name="FileName">File name where to read the XML string including the configuration</param>
            <returns>true, if configuration ok else false</returns>
        </member>
        <member name="M:Sias.Core.SXmlConverter.CreateFromZipFile(System.String)">
            <summary>
            static method to create an object by using an xml file.
            The root name of the xml string in the file needs to define the 
            type name of the object to create.
            </summary>
            <param name="FileName">XML configuration string of the object</param>
            <returns>The generated object</returns>
        </member>
        <member name="P:Sias.Core.SXmlConverter.SerialisationAttributeTypes">
            <summary>
            XML Serialization attributes property
            This property is used to define the attributes used to mark the properties for Serialization.
            If nothing is define the SStreamable attribute will be used.
            </summary>
        </member>
        <member name="P:Sias.Core.SXmlConverter.IgnoreTypeConverterTypes">
            <summary>
            A list of not used type converter types property
            
            The results of some type converters are not usable for Serialization. This type 
            converters should be defined here, so the properties are passed manually.
            </summary>
        </member>
        <member name="T:Sias.Core.SBaseHistoryEntry">
            <summary>
            Liquid history entry class.
            
            The liquid history entry class manages one entry of a liquid history.\n
            Important Remarks:
             - if assigned once it is not possible/allowed to change the history 
               entry data. (Calls to the setters will be ignored!)
             - The setters were needed to be able to convert the objects to XML
               and back.
             - Take care after exporting to XML and re-importing the History 
               entries are duplicated! So exporting and re-importing will increase 
               the memory usage.
            </summary>
        </member>
        <member name="F:Sias.Core.SBaseHistoryEntry._TimeStamp">
            <summary>History entry creation time field</summary>
        </member>
        <member name="M:Sias.Core.SBaseHistoryEntry.#ctor(System.String)">
            <summary>
            History entry XML string construction.
            </summary>
            <param name="Config">XML data string</param>
        </member>
        <member name="M:Sias.Core.SBaseHistoryEntry.#ctor">
            <summary>
            Default history entry construction.
            
            Creating a history entry with this constructor allows an assignment 
            for the properties until the entry type is assigned and the properties 
            are assigned.
            </summary>
        </member>
        <member name="M:Sias.Core.SBaseHistoryEntry.HistoryInfo(System.Int32)">
            <summary>
            Convert the history entry into an information string.
            </summary>
            <param name="Indent"></param>
            <returns>History information string</returns>
        </member>
        <member name="M:Sias.Core.SBaseHistoryEntry.EntryNode">
            <summary>
            Create a TreeView node representing this history entry.
            </summary>
            <returns>TreeView node representing the entry</returns>
        </member>
        <member name="M:Sias.Core.SBaseHistoryEntry.ToString">
            <summary>Convert to string</summary>
            <returns>State string</returns>
        </member>
        <member name="P:Sias.Core.SBaseHistoryEntry.TimeStamp">
            <summary>History entry creation time property</summary>
        </member>
        <member name="T:Sias.Core.SHistory">
            <summary>
            History list (History entry collection).
            
            This class handles a collection of history entries <see cref="T:Sias.Core.SBaseHistoryEntry"/>.
            </summary>
        </member>
        <member name="F:Sias.Core.SHistory._HistoryList">
            <summary>Not commented field</summary>
        </member>
        <member name="F:Sias.Core.SHistory._DisableHistory">
            <summary>Disable history field</summary>
        </member>
        <member name="M:Sias.Core.SHistory.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:Sias.Core.SHistory.#ctor(Sias.Core.SHistory)">
            <summary>Copy constructor</summary>
        </member>
        <member name="M:Sias.Core.SHistory.#ctor(System.String)">
            <summary>
            History entry name or XML string construction.
            
            As the history name and the XML configuration both are strings, this needs to be handled 
            with the same constructor. The method checks whether the string contains a XML token start 
            character followed by a XML token stop character.
            </summary>
            <param name="NameOrConfig">History object name or configuration XML string</param>
        </member>
        <member name="M:Sias.Core.SHistory.Add(Sias.Core.SBaseHistoryEntry)">
            <summary>
            Adds an object to the collection.
            </summary>
            <param name="value">Object to add</param>
            <returns>The index at which the new element was inserted.</returns>
        </member>
        <member name="M:Sias.Core.SHistory.IndexOf(Sias.Core.SBaseHistoryEntry)">
            <summary>
            Get the index in the collection of the specified object, if it exists 
            in the collection.
            </summary>
            <param name="value">The CodeAttributeArgument to locate in the collection.</param>
            <returns>The index of the specified object in the collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Sias.Core.SHistory.Clear">
            <summary>remove all history entries from History</summary>
        </member>
        <member name="M:Sias.Core.SHistory.Clone">
            <summary>
            Create a new history that is a copy of the current instance.
            
            We can't use the base implementation in SObject as we do not want to copy the history 
            entries. Instead we like to make a reference copy of them.
            </summary>
            <returns>A copy of the object</returns>
        </member>
        <member name="M:Sias.Core.SHistory.AddHistory(Sias.Core.SHistory)">
            <summary>
            Add all entries of another history list.
            </summary>
        </member>
        <member name="M:Sias.Core.SHistory.IsInFilter(System.Type,System.Type[])">
            <summary>
            Check whether a given type is available in the given type filter array.
            </summary>
            <param name="TypeToCheck">The type to check</param>
            <param name="FilterTypes">The filter type array</param>
            <returns>True if <paramref name="TypeToCheck"/> is in <paramref name="FilterTypes"/>, otherwise false.</returns>
        </member>
        <member name="M:Sias.Core.SHistory.AddFilteredHistory(Sias.Core.SHistory,System.Type[])">
            <summary>
            Add all entries of another history except the ones of the remove list.
            </summary>
            <param name="History">The history to add</param>
            <param name="TypesToRemove">The history entry type not allowed to add</param>
        </member>
        <member name="M:Sias.Core.SHistory.RemoveEntries(System.Type[])">
            <summary>
            Remove all entries derived of a type found in the given remove type list.
            </summary>
            <param name="TypesToRemove">The history entry types to be removed</param>
        </member>
        <member name="M:Sias.Core.SHistory.HistoryInfo(System.Int32)">
            <summary>
            Return a detailed list of all entries in the history.
            </summary>
            <param name="Indent">Indent value</param>
            <returns></returns>
        </member>
        <member name="M:Sias.Core.SHistory.HistoryNode">
            <summary>
            Return a detailed list of all entries in the history.
            </summary>
            <returns>A tree node of the history</returns>
        </member>
        <member name="P:Sias.Core.SHistory.HistoryList">
            <summary>Not commented property</summary>
        </member>
        <member name="P:Sias.Core.SHistory.DisableHistory">
            <summary>
            Disable history property.
            
            This property is used to temporary disable the history management.
            A method disabling the history management needs to take care that no 
            unexpected object or method can try using the history before enabling 
            it again. In addition the method needs to turn it on before leaving.\n
            IMPORTANT: This feature is not intended to disable the History management
            completely, you should leave the history properties at NULL to disable
            history management.
            </summary>
        </member>
        <member name="P:Sias.Core.SHistory.Item(System.Int32)">
            <summary>
            Get or set the history entry at the specified index in the collection. 
            </summary>
            <param name="index">Index of the History entry</param>
            <returns>A History entry at each valid index.</returns>
        </member>
        <member name="P:Sias.Core.SHistory.LastEntry">
            <summary>
            Return the last entry in the History.
            </summary>
        </member>
        <member name="T:Sias.Core.SName">
            <summary>
            Name class
            
            This class is only a string wrapper for name lists. This allows the usage of 
            string collections (SNameCollection) in property grids
            </summary>
        </member>
        <member name="M:Sias.Core.SName.#ctor(System.String)">
            <summary>Data creation constructor</summary>
        </member>
        <member name="M:Sias.Core.SName.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Sias.Core.SName.Equals(System.Object)">
            <summary>
            returns whether the given object is identical to the object or not
            </summary>
            <param name="obj">object to compare</param>
            <returns>true if equal, false if not</returns>
        </member>
        <member name="M:Sias.Core.SName.op_Implicit(Sias.Core.SName)~System.String">
            <summary>
            convert a SName object to a string
            </summary>
            <param name="a">SName object</param>
            <returns>String object</returns>
        </member>
        <member name="M:Sias.Core.SName.op_Addition(Sias.Core.SName,Sias.Core.SName)">
            <summary>
            Add two names
            </summary>
            <param name="a">First name</param>
            <param name="b">Second name</param>
            <returns>new name the conjunction of First name and Second name</returns>
        </member>
        <member name="M:Sias.Core.SName.op_Equality(Sias.Core.SName,Sias.Core.SName)">
            <summary>
            operator ==
            </summary>
            <param name="a">a</param>
            <param name="b">b</param>
            <returns>a equal to b</returns>
        </member>
        <member name="M:Sias.Core.SName.op_Inequality(Sias.Core.SName,Sias.Core.SName)">
            <summary>
            operator !=
            </summary>
            <param name="a">a</param>
            <param name="b">b</param>
            <returns>a not equal to b</returns>
        </member>
        <member name="M:Sias.Core.SName.GetHashCode">
            <summary>
            overwrite GetHashcode to avoid warning
            </summary>
            <returns>hash coder</returns>
        </member>
        <member name="P:Sias.Core.SName.Name">
            <summary>Name property</summary>
        </member>
        <member name="P:Sias.Core.SName.Item(System.Int32)">
            <summary>
            single name indexer
            
            This indexer returns true for all name indexes in available in the name collection.
            </summary>
            <param name="inx">index of the name</param>
            <returns>True if the name is in the name collection</returns>
        </member>
        <member name="T:Sias.Core.SNameCollection">
            <summary>
            Name collection 
            
            This class handles a collection of name classes
            </summary>
        </member>
        <member name="M:Sias.Core.SNameCollection.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:Sias.Core.SNameCollection.Add(System.Object)">
            <summary>
            Adds an object to the collection
            </summary>
            <param name="value">object to add</param>
            <returns>The index at which the new element was inserted.</returns>
        </member>
        <member name="M:Sias.Core.SNameCollection.op_Equality(Sias.Core.SNameCollection,Sias.Core.SNameCollection)">
            <summary>
            operator ==
            </summary>
            <param name="a">a</param>
            <param name="b">b</param>
            <returns>new SLiquidState(a.State and not b.State);</returns>
        </member>
        <member name="M:Sias.Core.SNameCollection.op_Inequality(Sias.Core.SNameCollection,Sias.Core.SNameCollection)">
            <summary>
            operator !=
            </summary>
            <param name="a">a</param>
            <param name="b">b</param>
            <returns>new SLiquidState(a.State and not b.State);</returns>
        </member>
        <member name="M:Sias.Core.SNameCollection.Equals(System.Object)">
            <summary>
            returns whether the given object is identical to the object or not
            </summary>
            <param name="o">object to compare</param>
            <returns>true if equal, false if not</returns>
        </member>
        <member name="M:Sias.Core.SNameCollection.GetHashCode">
            <summary>
            overwrite GetHascode to avoid warning
            </summary>
            <returns>hash coder</returns>
        </member>
        <member name="P:Sias.Core.SNameCollection.Item(System.Int32)">
            <summary>
            Gets or sets the name at the specified index in the collection. 
            </summary>
            <param name="index">Index of the ILiquid</param>
            <returns>An ILiquid at each valid index.</returns>
        </member>
        <member name="T:Sias.Core.Interfaces.ErrorEventHandler">
            <summary>
            Delegate for error events.
            </summary>
            <param name="from">Action, where the error occurred</param>
            <param name="args">Additional information about the error event</param>
        </member>
        <member name="T:Sias.Core.Interfaces.WarningEventHandler">
            <summary>
            Delegate for warning events.
            </summary>
            <param name="from">Action, where the warning occurred</param>
            <param name="args">Additional information about the warning event</param>
        </member>
        <member name="T:Sias.Core.Interfaces.IAction">
            <summary>
            Action interface.
            
            This interface provides the minimum properties and methods needed for an
            action implementation. 
            
            ATTENTION: This may be not final
            </summary>
        </member>
        <member name="M:Sias.Core.Interfaces.IAction.Init">
            <summary>Init action</summary>
        </member>
        <member name="M:Sias.Core.Interfaces.IAction.Execute(System.Boolean)">
            <summary>
            Execute the action optionally in simulation mode.
            </summary>
            <param name="simulate">If true, use simulation mode</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.IAction.Prepare">
            <summary>
            Prepare the action.
            </summary>
            <returns>True if successful</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.IAction.Draw">
            <summary>Draw the action state</summary>
        </member>
        <member name="M:Sias.Core.Interfaces.IAction.IsActionDone">
            <summary>
            Check if action is already finished.
            </summary>
            <returns>True action if finished</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.IAction.OnDoubleClick">
            <summary>
            !!! handler for double click
            </summary>
        </member>
        <member name="M:Sias.Core.Interfaces.IAction.OnDragAndDrop">
            <summary>
            !!! handler for drag and drop
            </summary>
        </member>
        <member name="M:Sias.Core.Interfaces.IAction.ReportError">
            <summary>
            !!! error reporting 
            
            Do we need this ?
            </summary>
        </member>
        <member name="M:Sias.Core.Interfaces.IAction.ReportWarning">
            <summary>
            !!! report warnings
            
            Do we need this ?
            </summary>
        </member>
        <member name="E:Sias.Core.Interfaces.IAction.Error">
            <summary>error event
            Do we need this ?</summary>
        </member>
        <member name="E:Sias.Core.Interfaces.IAction.Warning">
            <summary>warning event
            Do we need this ?</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.IAction.Name">
            <summary>Name of the action</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.IAction.ParameterSet">
            <summary>Action parameter</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.IAction.Version">
            <summary>Action version</summary>
        </member>
        <member name="T:Sias.Core.Interfaces.SActionCollection">
            <summary>
            Action collection.
            </summary>
        </member>
        <member name="M:Sias.Core.Interfaces.SActionCollection.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SActionCollection.Item(System.Int32)">
            <summary>
            Get/set the IAction at the specified index in the collection.
            </summary>
            <param name="index">Index of the IAction</param>
            <returns>An IAction at each valid index.</returns>
        </member>
        <member name="T:Sias.Core.Interfaces.SAccessMode">
            <summary>
            Access mode constants.
            
            The class includes the access mode constants. This is used as parameter/return value 
            for GetAccessMode/SetAccessMode methods of \ref AccessibleDevices.
            For more details please read section \ref AccessibleDevices.
            </summary>
            <details>
            The Access Mode defines the way of accessing an accessible device.
            For requesting access we defined three different levels:
            a) Prepare Access
            This level is used to inform the device that it will be accessed in near
            future. It can be used e.g. to stop a centrifuge or to open an heated 
            position slot.
            b) Request Access
            This level needs to prepare the request. The system will call this directly 
            before it will access the device. Take care in case of a move item command
            the Gripper may have another item when this method is called.
            c) Release Access
            This level is used to tell the device that the access will be ended soon. 
            It may  be called before the accessing device is really away from the device.
            In case of an IDTrax the devices should not get allowed to go on. In case of 
            a heated position, the slot will not be closed at this state.
            </details>
        </member>
        <member name="F:Sias.Core.Interfaces.SAccessMode.AccessStateBits">
            <summary>
            All access state members.
            
            This access mode is a filter for all access state bits.
            The access state bits will typically be returned only from accessible 
            devices. When passed to SetAccessMode this bits are ignored!
            </summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SAccessMode.IsActiveBit">
            <summary>Access Mode: active			(get only)</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SAccessMode.ForbiddenAccessBits">
            <summary>Access Mode: Forbidden Access bits</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SAccessMode.ForbidPipettingBit">
            <summary>Access Mode: ForbidPipetting	(get only)</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SAccessMode.ForbidTransferBit">
            <summary>Access Mode: ForbidTransfer	(get only)</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SAccessMode.AccessRequestBits">
            <summary>
            All address request members.
            
            The access request members are passed to the SetAccessMode methods.
            </summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SAccessMode.NoAccessRequestBits">
            <summary>Access Mode: no access bit	(get/set)</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SAccessMode.AllPrepareBits">
            <summary>Access Mode: all Prepare access bits	(get/set)</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SAccessMode.PreparePipettingBit">
            <summary>Access Mode: Prepare pipetting access	(get/set)</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SAccessMode.PrepareTransferBit">
            <summary>Access Mode: Prepare transfer access	(get/set)</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SAccessMode.AllRequestBits">
            <summary>Access Mode: all request access bits	(get/set)</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SAccessMode.RequestPipettingBit">
            <summary>Access Mode: Request pipetting access	(get/set)</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SAccessMode.RequestTransferBit">
            <summary>Access Mode: Request transfer access	(get/set)</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SAccessMode.AllReleaseBits">
            <summary>Access Mode: all release access bits	(get/set)</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SAccessMode.ReleasePipettingBit">
            <summary>Access Mode: Release pipetting access	(get/set)</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SAccessMode.ReleaseTransferBit">
            <summary>Access Mode: Release transfer access	(get/set)</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SAccessMode.RequestInterruptionBit">
            <summary>Access Mode: Request interruption		(get/set)</summary>
        </member>
        <member name="M:Sias.Core.Interfaces.SAccessMode.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:Sias.Core.Interfaces.SAccessMode.#ctor(System.UInt32)">
            <summary>Construct access mode object by given an integer access mode value</summary>
            <param name="AccessModeValue">Access mode value </param>
        </member>
        <member name="M:Sias.Core.Interfaces.SAccessMode.#ctor(Sias.Core.Interfaces.SAccessMode)">
            <summary>Copy constructor</summary>
            <param name="AccessMode">origin access mode object</param>
        </member>
        <member name="M:Sias.Core.Interfaces.SAccessMode.op_BitwiseAnd(Sias.Core.Interfaces.SAccessMode,Sias.Core.Interfaces.SAccessMode)">
            <summary>Operator: (SAccesMode &amp; SAccesMode)</summary>
            <param name="a">first operant</param>
            <param name="b">second operant</param>
            <returns>result of a &amp; b</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.SAccessMode.op_BitwiseAnd(Sias.Core.Interfaces.SAccessMode,System.UInt32)">
            <summary>Operator: (SAccesMode &amp; unsigned integer)</summary>
            <param name="a">first operant</param>
            <param name="b">second operant</param>
            <returns>result of a &amp;  b</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.SAccessMode.op_BitwiseOr(Sias.Core.Interfaces.SAccessMode,Sias.Core.Interfaces.SAccessMode)">
            <summary>Operator: (SAccesMode | SAccesMode)</summary>
            <param name="a">first operant</param>
            <param name="b">second operant</param>
            <returns>result of a | b</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.SAccessMode.op_BitwiseOr(Sias.Core.Interfaces.SAccessMode,System.UInt32)">
            <summary>Operator: (SAccesMode | unsigned integer)</summary>
            <param name="a">first operant</param>
            <param name="b">second operant</param>
            <returns>result of a | b</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.SAccessMode.op_OnesComplement(Sias.Core.Interfaces.SAccessMode)">
            <summary>Operator: ~SAccesMode</summary>
            <param name="a">first operant</param>
            <returns>result of ~a</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.SAccessMode.op_Implicit(System.UInt32)~Sias.Core.Interfaces.SAccessMode">
            <summary>
            Implicit conversion unsigned integer to SAccessMode.
            </summary>
            <param name="a">Access mode value</param>
            <returns>SAccesMode representing the defined access mode value</returns>
        </member>
        <member name="P:Sias.Core.Interfaces.SAccessMode.ModeValue">
            <summary>Access mode value</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SAccessMode.AccessStates">
            <summary>
            Get/set the access state pending parts of the access mode.
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SAccessMode.AccessRequests">
            <summary>
            Get/set the access request pending parts of the access mode.
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SAccessMode.IsActive">
            <summary>Access state: Device is active</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SAccessMode.ForbidPipetting">
            <summary>Access state: Pipetting not allowed</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SAccessMode.ForbidTransfer">
            <summary>Access Mode: Transfer not allowed</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SAccessMode.RequestAny">
            <summary>Access request: Pipetting or Transfer request</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SAccessMode.RequestPipetting">
            <summary>Access request: Pipetting request</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SAccessMode.RequestTransfer">
            <summary>Access request: Transfer request</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SAccessMode.PrepareAny">
            <summary>Access request: Prepare Pipetting or Transfer access</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SAccessMode.PreparePipetting">
            <summary>Access request: Prepare Pipetting access</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SAccessMode.PrepareTransfer">
            <summary>Access request: Prepare Transfer access</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SAccessMode.ReleaseAny">
            <summary>Access request: Release Pipetting or Transfer access</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SAccessMode.ReleasePipetting">
            <summary>Access request: Release Pipetting access</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SAccessMode.ReleaseTransfer">
            <summary>Access request: Release Transfer access</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SAccessMode.RequestInterruption">
            <summary>Access Mode: Force device interruption on request</summary>
        </member>
        <member name="T:Sias.Core.Interfaces.SAccessModeBackup">
            <summary>
            This object is designed to help setting and restoring the access modes of 
            any kind of AccessibleObject collections or arrays. There for the AccessModes
            of all given objects are stored at construction time.
            The AccessModes can be restored at any time or also be set to new values 
            without restoring.
            </summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SAccessModeBackup.ObjectList">
            <summary>List of all managed accessible objects</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SAccessModeBackup.OldModeList">
            <summary>Access mode backup collection (same order then ObjectList)</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SAccessModeBackup._LastMode">
            <summary>Last Access mode request result (summary of all managed objects)</summary>
        </member>
        <member name="M:Sias.Core.Interfaces.SAccessModeBackup.#ctor(System.Collections.IList)">
             <summary>
             Construct access mode backup object.
            
             This constructor creates and initializes the internal accessible object collection 
             and the access mode backup array. 
             </summary>
             <param name="AssessibleObjectList">List of objects</param>
        </member>
        <member name="M:Sias.Core.Interfaces.SAccessModeBackup.#ctor(System.Collections.IList,Sias.Core.Interfaces.SAccessMode,System.Int32)">
             <summary>
             Construct access mode backup object and assign a new access mode.
            
             This constructor creates and initializes the internal accessible object collection 
             and the access mode backup array. In Addition it assigns a new access mode to the 
             accessible objects.
             </summary>
             <param name="AssessibleObjectList">List of objects</param>
             <param name="NewMode">New Access Mode</param>
             <param name="Timeout">Timeout</param>
        </member>
        <member name="M:Sias.Core.Interfaces.SAccessModeBackup.SetAccessModes(Sias.Core.Interfaces.SAccessMode,System.Int32)">
             <summary>
             Set new access mode.
            
             This method tries to set the new access mode at all managed accessible objects.
             </summary>
             <param name="NewMode">New access mode</param>
             <param name="Timeout">Timeout</param>
             <returns>Summary of resulted access modes</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.SAccessModeBackup.SetAccessModes(Sias.Core.Interfaces.SAccessMode)">
             <summary>
             Set new access mode.
            
             This method tries to set the new access mode at all managed accessible objects.
             </summary>
             <param name="NewMode">New access mode</param>
             <returns>Summary of resulted access modes</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.SAccessModeBackup.RestoreAccessModes(System.Int32)">
            <summary>
            This method tries to restore the access modes stored at class construction.
            </summary>
            <param name="Timeout">timeout</param>
        </member>
        <member name="M:Sias.Core.Interfaces.SAccessModeBackup.RestoreAccessModes">
            <summary>
            This method tries to restore the access modes stored at class construction.
            </summary>
        </member>
        <member name="M:Sias.Core.Interfaces.SAccessModeBackup.HandlePipettingRefusedError(System.Int64,System.Object)">
             <summary>
             This method handles pipetting refused errors. 
            
             It can be used to manage the whole error handling when trying to get 
             access to an object for pipetting. 
             </summary>
             <param name="ErrorCode">Error code for error message</param>
             <param name="ErrorObject">Error generating object</param>
             <returns>true if pipetting is allowed, false if not</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.SAccessModeBackup.HandleTransferRefusedError(System.Int64,System.Object)">
             <summary>
             This method handles transfer refused errors. 
            
             It can be used to manage the whole error handling when trying to get 
             access to an object for transfer. 
             </summary>
             <param name="ErrorCode">Error code for error message</param>
             <param name="ErrorObject">Error generating object</param>
             <returns>true if transfer is allowed, false if not</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.SAccessModeBackup.HandleAccessRefusedError(System.Int64,System.Object)">
             <summary>
             This method handles access refused error. 
            
             It can be used to manage the whole error handling when trying to get 
             access to an object (either pipetting or transfer). 
             </summary>
             <param name="ErrorCode">Error code for error message</param>
             <param name="ErrorObject">Error generating object</param>
             <returns>true if access is allowed, false if not</returns>
        </member>
        <member name="P:Sias.Core.Interfaces.SAccessModeBackup.OldAccessMode">
            <summary>Get the summary of all origin access modes</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SAccessModeBackup.LastMode">
            <summary>Last Access mode request result (summary of all managed objects)</summary>
            <value></value>
        </member>
        <member name="T:Sias.Core.Interfaces.SAccessibleObjectCollection">
            <summary>
            Accessible object collection.
            
            Managing a collection of \ref IAccessibleObject "accessible objects".
            </summary>
        </member>
        <member name="M:Sias.Core.Interfaces.SAccessibleObjectCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SAccessibleObjectCollection.Item(System.Int32)">
            <summary>
            Get/set the IAccessableDevice at the specified index in the collection. 
            </summary>
            <param name="index">Index of the IAccessableDevice</param>
            <returns>An IAccessableDevice at each valid index.</returns>
        </member>
        <member name="T:Sias.Core.Interfaces.IAccessibleDevice">
            <summary>
            Interface for accessible devices.
            
            The interface needs to be implemented of all accessible devices.
            For more details please read section \ref AccessibleDevices.
            </summary>
        </member>
        <member name="M:Sias.Core.Interfaces.IAccessibleDevice.AttachLayoutData(Sias.Core.Interfaces.ILayoutDevice)">
            <summary>
            Attach layout data.
            
            This method tries to attach the layout data found at the given layout device 
            to the device. If this succeeds, it returns true. If it fails, it returns false.
            In this case the calling method should retry until it finds a fitting layout 
            device.
            </summary>
            <param name="LayoutDevice">Layout device </param>
            <returns>true if attachable, false if not</returns>
        </member>
        <member name="T:Sias.Core.Interfaces.SAccessibleDeviceCollection">
            <summary>
            Accessible device collection.
            
            Managing a collection of \ref IAccessibleDevice "accessible devices".
            </summary>
        </member>
        <member name="M:Sias.Core.Interfaces.SAccessibleDeviceCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SAccessibleDeviceCollection.Item(System.Int32)">
            <summary>
            Get/set the IAccessableDevice at the specified index in the collection. 
            </summary>
            <param name="index">Index of the IAccessableDevice</param>
            <returns>An IAccessableDevice at each valid index.</returns>
        </member>
        <member name="T:Sias.Core.SRestrictionValue">
            <summary>
            This enumerator will define the traverse mode of an restricted area.
            
            It can be requested from the restricted area using the AreaType 
            property. 
            The Mode will be defined either when defining the restricted area at 
            the layout or it will be set by using the IItem.SetRestriction method.
            
            \b IMPORTANT: This is not directly supported by actual device drivers.
            </summary>
        </member>
        <member name="F:Sias.Core.SRestrictionValue.RequestOnly">
            <summary>
            Do not change Restriction value (this will never return!)
            (only used for IItem.SetRestriction method)
            </summary>
        </member>
        <member name="F:Sias.Core.SRestrictionValue.AllowTraverse">
            <summary>
            Crossing on this area is actually allowed.
            (only used for IItem.SetRestriction method)
            </summary>
        </member>
        <member name="F:Sias.Core.SRestrictionValue.AllowClearTraverse">
            <summary>
            Cross only with empty tips, empty plates or an empty 
            gripper. The basic arm driver will ignore this areas. The 
            final application needs to take care about this mode.
            </summary>
        </member>
        <member name="F:Sias.Core.SRestrictionValue.ReportTraverse">
            <summary>
            Try not to cross if ever possible, write warning to log
            if crossing is unavoidable
            </summary>
        </member>
        <member name="F:Sias.Core.SRestrictionValue.AskForTraverse">
            <summary>
            Do not cross. If unavoidable show an error box with a
            Cross anyway option.
            </summary>
        </member>
        <member name="F:Sias.Core.SRestrictionValue.NoTraverse">
            <summary>
            Do not cross. If unavoidable show an error box. The run 
            needs to be interrupted, as the destination can't be reached.
            </summary>
        </member>
        <member name="T:Sias.Core.SRestrictedArea">
            <summary>
            Restricted area class
            
            This class handles restricted areas. Restricted areas are areas on a worktable 
            where some arms are not generally allowed to cross. The AreaType property defines 
            the type of restriction (\b see \ref SRestrictionValue)
            
            \b IMPORTANT: This is not directly supported by actual device drivers.
            </summary>
        </member>
        <member name="M:Sias.Core.SRestrictedArea.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:Sias.Core.SRestrictedArea.#ctor(Sias.Core.SRestrictedArea)">
            <summary>
            copy constructor
            creates a new SRestrictedArea object as copy of the given instance.
            </summary>
            <param name="org">Source SRestrictedArea object</param>
        </member>
        <member name="M:Sias.Core.SRestrictedArea.#ctor(System.String,Sias.Core.SRestrictionValue,Sias.Core.SRectangle)">
            <summary>Constructor with X and Y position</summary>
            <param name="Name">Name of the restricted area</param>
            <param name="RestrictionType">Type of restriction on this restricted area</param>
            <param name="area">The area as rectangle</param>
        </member>
        <member name="M:Sias.Core.SRestrictedArea.ToString">
            <summary>
            Retrieves a string that indicates the current object.
            </summary>
            <remarks>This Method is using the SToStringOptions class.</remarks>
            <returns>The string format of the object.</returns>
        </member>
        <member name="M:Sias.Core.SRestrictedArea.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object as copy of the current instance</returns>
        </member>
        <member name="P:Sias.Core.SRestrictedArea.Name">
            <summary>restricted area name</summary>
        </member>
        <member name="P:Sias.Core.SRestrictedArea.Area">
            <summary>Restricted area rectangle</summary>
            <value></value>
        </member>
        <member name="P:Sias.Core.SRestrictedArea.AreaType">
            <summary>
            Restricted area type (\b see SRestrictionValue)
            </summary>
            <value></value>
        </member>
        <member name="T:Sias.Core.SRestrictedAreaCollection">
            <summary>
            Position collection
            </summary>
        </member>
        <member name="M:Sias.Core.SRestrictedAreaCollection.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="P:Sias.Core.SRestrictedAreaCollection.Item(System.Int32)">
            <summary>
            Gets or sets the SRestrictedArea at the specified index in the collection. 
            </summary>
            <param name="index">Index of the SRestrictedArea</param>
            <returns>An SRestrictedArea at each valid index.</returns>
        </member>
        <member name="T:Sias.Core.Attributes.SLayoutElementAttribute">
            <summary>
            Attribute to mark a property as being a layout element
            
            Properties marked with the Layout element attribute need to be checked by 
            the layout object. This attribute will be used for \ref AccessibleDevices.
            </summary>
        </member>
        <member name="F:Sias.Core.Attributes.SLayoutElementAttribute._ObjectFilter">
            <summary>
            Object filter string
            </summary>
            
        </member>
        <member name="F:Sias.Core.Attributes.SLayoutElementAttribute._AdditionalDataType">
            <summary>
            Type of Additional data 
            </summary>
        </member>
        <member name="M:Sias.Core.Attributes.SLayoutElementAttribute.ToString">
            <summary>
            Retrieves a string that indicates the current object.
            </summary>
            <returns>The string format of the object.</returns>
        </member>
        <member name="M:Sias.Core.Attributes.SLayoutElementAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Sias.Core.Attributes.SLayoutElementAttribute.#ctor(System.String)">
            <summary>
            construct with object filter string
            </summary>
            <param name="filter">Filter string to restricted object selection</param>
        </member>
        <member name="M:Sias.Core.Attributes.SLayoutElementAttribute.#ctor(System.String,System.Type)">
            <summary>
            construct object with filter string and additional data type
            </summary>
            <param name="filter">Filter string to restricted object selection</param>
            <param name="AddDataType">additional data type</param>
        </member>
        <member name="M:Sias.Core.Attributes.SLayoutElementAttribute.#ctor(System.Type)">
            <summary>
            construct object with additional data type
            </summary>
            <param name="AddDataType">additional data type</param>
        </member>
        <member name="P:Sias.Core.Attributes.SLayoutElementAttribute.ObjectFilter">
            <summary>
            Object filter string
            </summary>
        </member>
        <member name="P:Sias.Core.Attributes.SLayoutElementAttribute.AdditionalDataType">
            <summary>
            Type of Additional data 
            </summary>
        </member>
        <member name="T:Sias.Core.SLogHandler">
             <summary>
             Log handler delegate.
            
             This delegate defines the prototype for log handlers. Log handlers can be defined as 
             high level and low level log handler. In general both are identical, but the low level 
             log handlers should be very fast, as they may be called very often and the performance 
             of the system may get very low.
             </summary>
             <param name="message">The message to log</param>
             <param name="categories">The categories of the message(separated by '|')</param>
             <param name="time">The log time</param>
        </member>
        <member name="T:Sias.Core.SLogManager">
            <summary>
            Log Manger
            
            The log manager (\nlink{Sias::Core,SLogManager}) is a static class designed as manager between 
            components wanting to get information logged and components logging information. The manager 
            does not take care about the log destination.\n
            
            \image HTML LogManagerDiagram.png
            
            In general each component is allowed to send log information either as \ref HighLevelLog or as
            \ref LowLevelLog. Logging components (loggers) may register at the log manager to get informed 
            about high level or low level log information.\n
            Important:  A Low level logger needs to be very fast in logging the information as the low 
                        level log may get called very often!
            </summary>
            <details>
            \section    HighLevelLog        High level logs
            High level logs contain information for an application user. Typically this logs are not too big 
            and only the important information like errors, warnings, completed activities and different States 
            are available in the high level logs.
            
            To log information to the high level logs use the \nlink{Sias::Core,SLogManager.Log} method.
            \code
              	SLogManager.LogLL("This gets logged as Device I/O to low level log",SLogManager.CategoryDeviceIO);
            \endcode
            
            A high level logger has to implement a logging method (\b see \ref SLogHandler) and pass this
            method to the \ref AddHighLevelLogHandler method. To remove the high level logger pass the method 
            to \ref RemoveHighLevelLogHandler.\n
            High level log information are typically rarely, so the performance of a high level logging component 
            is less critical.
            
            
            \section    LowLevelLog         Low level logs
            Low level logs contain information for application users, application supporters and even developers.
            Typically this logs include the whole robot communication, internal states and may be even some debug 
            outputs. In addition the low level log contains all high level log information.
            
            To log information to the low level logs use the \nlink{Sias::Core,SLogManager.LogLL} method.
            \code
              	SLogManager.LogLL("This gets logged as Information to high level log",SLogManager.CategoryInfo);
            \endcode
            
            A low level logger has to implement a logging method (\b see \ref SLogHandler) and pass this 
            method to the \ref AddLowLevelLogHandler method. To remove the low level logger pass the method 
            to \ref RemoveHighLevelLogHandler.\n
            Low level log information are typically not rarely. That is why a low level logger should be very fast 
            to avoid application delays from the loggers.
            </details>
        </member>
        <member name="F:Sias.Core.SLogManager.CategoryInfo">
            <summary>Category for logging main information</summary>
        </member>
        <member name="F:Sias.Core.SLogManager.CategoryDetail">
            <summary>Category for logging detail information</summary>
        </member>
        <member name="F:Sias.Core.SLogManager.CategorySubdetail">
            <summary>Category for logging sub detail information</summary>
        </member>
        <member name="F:Sias.Core.SLogManager.CategoryDeviceIO">
            <summary>Category for logging non CAN device IO</summary>
        </member>
        <member name="F:Sias.Core.SLogManager.CategoryError">
            <summary>Category for logging errors</summary>
        </member>
        <member name="F:Sias.Core.SLogManager.CategoryWarning">
            <summary>Category for logging errors</summary>
        </member>
        <member name="F:Sias.Core.SLogManager.CategoryDebug">
            <summary>Category for logging errors</summary>
        </member>
        <member name="M:Sias.Core.SLogManager.DumpToStdOut(System.String,System.String[],System.DateTime)">
            <summary>
            This log handler writes the log messages unformatted to an external text file.
            The file gets opened, written and closed each time a message is logged.
            </summary>
            <param name="message">The message to log</param>
            <param name="categories">The categories of the message</param>
            <param name="time">The log time</param>
            <remarks>
            The logs are not automatically dumped to StdOut! \n
            To activate the dump to StdOut you have to add this handler either to low or 
            high level log handlers.
            </remarks>
        </member>
        <member name="M:Sias.Core.SLogManager.#cctor">
            <summary>
            Create the SLogManager object.
            </summary>
        </member>
        <member name="M:Sias.Core.SLogManager.CategoryString(System.String[])">
            <summary>
            This method can be used to generate a category trying from a list of categories.
            </summary>
            <param name="categories">The list of categories</param>
            <returns>A simple string including all categories</returns>
        </member>
        <member name="F:Sias.Core.SLogManager._TraceLowLevelLog">
            <summary>Low level trace flag</summary>
        </member>
        <member name="F:Sias.Core.SLogManager._IsLowLevelLogTrace">
            <summary>Low level log trace flag field</summary>
        </member>
        <member name="M:Sias.Core.SLogManager.AddLowLevelLogHandler(Sias.Core.SLogHandler)">
             <summary>
             Adds a low level log handler to the log manager.
            
             Take care:  Low level log handlers are not allowed to be complicated, as 
                         the low level logging may get called very often and so the 
                         system performance may get very low.
             </summary>
             <param name="logHandler">The low level log handler to add</param>
             <remarks>Duplicate instances will not be added!</remarks>
        </member>
        <member name="M:Sias.Core.SLogManager.RemoveLowLevelLogHandler(Sias.Core.SLogHandler)">
            <summary>
            Remove a low level log handler from log manager.
            </summary>
            <param name="logHandler">The low level log handler to remove</param>
            <returns>
            True: if the low level log handler was successfully removed.\n
            False: if the low level log handler could not be removed.
            </returns>
        </member>
        <member name="M:Sias.Core.SLogManager.LogLL(System.String,System.String)">
            <summary>
            Log the given message under the given categories.
            </summary>
            <param name="message">The message to log</param>
            <param name="categories"></param>
            <remarks>Calls high level and low level log handlers!</remarks>
        </member>
        <member name="F:Sias.Core.SLogManager._IsHighLevelLogTrace">
            <summary>High level log trace flag field</summary>
        </member>
        <member name="M:Sias.Core.SLogManager.AddHighLevelLogHandler(Sias.Core.SLogHandler)">
            <summary>
            Add a high level log handler to the log manager.
            </summary>
            <param name="logHandler">The high level log handler to add</param>
            <remarks>Duplicate instances will not be added!</remarks>
        </member>
        <member name="M:Sias.Core.SLogManager.RemoveHighLevelLogHandler(Sias.Core.SLogHandler)">
            <summary>
            Removes a high level log handler from log manager.
            </summary>
            <param name="logHandler">The high level log handler to remove</param>
            <returns>
            True: if the high level log handler was successfully removed.\n
            False: if the high level log handler could not be removed.
            </returns>
        </member>
        <member name="M:Sias.Core.SLogManager.Log(System.String,System.String)">
            <summary>
            Log the given message under the given categories.
            </summary>
            <param name="message">The message to log</param>
            <param name="categories">The categories to log</param>
            <remarks>Calls high level and high level log handlers!</remarks>
        </member>
        <member name="P:Sias.Core.SLogManager.StdOutPath">
            <summary>
            File Path for the emergency log.
            </summary>
        </member>
        <member name="P:Sias.Core.SLogManager.TraceLowLevelLog">
            <summary>
            Low level trace flag
            
            This flag defines whether the low level log message should be send to 
            trace output or not.
            </summary>
            <remarks>
            Important: Activating TracelowLevelLog may cause duplicate or missing 
                       log entries in multi threading applications, as the static
                       IsLoLevelTraceLog flag is only able to protect this for single
                       threaded logging.
            </remarks>
            <value>
            True:  The low level log message will be send to trace output.\n
            False: The low level log message will not be send to trace output (default).
            </value>
        </member>
        <member name="P:Sias.Core.SLogManager.IsLowLevelLogTrace">
            <summary>
            Low level log trace flag property
            
            This property may be used in trace loggers to disable trace outputs
            coming from LogLL method activated by TraceLowLevelLog=true;
            </summary>
            <value>
            True:  The low level log message will be send to trace output.\n
            False: The low level log message will not be send to trace output (default).
            </value>
        </member>
        <member name="P:Sias.Core.SLogManager.TraceHighLevelLog">
            <summary>
            High level trace flag
            
            This flag defines whether the high level log message should be send to trace output or not.
            </summary>
            <remarks>
            Important: Activating TracelowLevelLog may cause duplicate or missing 
                       log entries in multi threading applications, as the static
                       IsLoLevelTraceLog flag is only able to protect this for single
                       threaded logging.
            </remarks>
            <value>
            True:  The high level log message will be send to trace output (default).\n
            False: The high level log message will not be send to trace output 
            </value>
        </member>
        <member name="P:Sias.Core.SLogManager.IsHighLevelLogTrace">
            <summary>
            High level log trace flag property
            
            This property may be used in trace loggers to disable trace outputs
            coming from LogLL method activated by TraceHighLevelLog=true;
            </summary>
            <value>
            True:  The High level log message will be send to trace output.\n
            False: The High level log message will not be send to trace output (default).
            </value>
        </member>
        <member name="T:Sias.Core.Attributes.SStreamableAttribute">
            <summary>
            Attribute to Mark a property to be streamable
            
            A streamable property is used by the SXmlConverter class to be converted to/from 
            the objects XML representation. In addition all streamable objects are cloned by
            the SObject.Clone method.
            </summary>
        </member>
        <member name="M:Sias.Core.Attributes.SStreamableAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Sias.Core.Attributes.SBinaryAttribute">
            <summary>
            Attribute to mark a property as binary property.
            
            This attribute is used to mark a \ref SStreamableAttribute "streamable" property to
            be streamed as a binary object. This is mostly needed for standard DotNet types as 
            Images.\n
            Take care this is only possible for serializable/deserializable objects.
            </summary>
        </member>
        <member name="M:Sias.Core.Attributes.SBinaryAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Sias.Core.SLiquid">
             <summary>
             Liquid information class.
             
             The liquid information class keeps information about a liquid.
             </summary>
             <details>
             The following liquid information are managed:
              - A list of liquid names the liquid consists,
              - the volume of the liquid and
              - the state of the liquid <see cref="T:Sias.Core.Interfaces.SLiquidState"/>.
              .
            
             The liquid information class is used at cavities (see <see cref="T:Sias.Core.Interfaces.ICavity"/>)
             or pipetting tips to store the liquid information.\n
             If liquid is removed from a cavity or tip the volume of the concerned 
             liquid information class gets reduced.\n
             If liquid is added to cavity the volume gets increased in addition the 
             liquid names of the new liquid will be added if not already available.
             If liquid is added to a tip in general a new liquid entry is added to 
             the tips liquid list, as the liquid will not get mixed with already 
             available liquid or air gaps.
             
             The liquid information class implements the 
                 \nlink{Sias::Core::Interfaces,ILiquid}  
             interface.
             </details>
        </member>
        <member name="T:Sias.Core.Interfaces.ILiquid">
            <summary>
            Liquid interface
            
            This interface defines the needed properties and methods for the liquid 
            management in a cavity. \n
            
            When using sias layouts cavities will be prepared with an empty 
            \nlink{Sias::Core,SLiquid} class. In case your application should use another
            (e.g. database based) liquid management class you have to reassign the cavities
            liquid by a new instance of your liquid class after loading.
            </summary>
        </member>
        <member name="M:Sias.Core.Interfaces.ILiquid.Add(Sias.Core.Interfaces.ILiquid)">
            <summary>
            Add liquid (by class)
            
            This method is used to add another liquid. This is used e.g. when
            dispensing liquid to a cavity. In this case the dispensed liquid 
            will be added to the cavity liquid.
            </summary>
            <param name="Liquid">Liquid to add</param>
        </member>
        <member name="M:Sias.Core.Interfaces.ILiquid.Add(System.String,System.Double,Sias.Core.Interfaces.SLiquidState)">
            <summary>
            Add liquid (by Name, volume and state)
            
            This method is used to add another liquid. This is used for 
            manually adding liquid. Mostly this may be used as an alternate 
            cavity preparation on process startup (E.g. if a cavity contains 
            mixtures of different liquids).\n
            </summary>
            <param name="Name">Name of the liquid to add</param>
            <param name="Volume">Volume of liquid to add</param>
            <param name="State">State of Liquid to add</param>
        </member>
        <member name="M:Sias.Core.Interfaces.ILiquid.Set(System.String,System.Double,Sias.Core.Interfaces.SLiquidState)">
            <summary>
            Set liquid name, volume and state
            
            This method is used to a defined liquid name, volume and liquid state.
            This is mostly used on process preparation to and 
            </summary>
            <param name="Name">Name of the liquid</param>
            <param name="Volume">Volume of the liquid</param>
            <param name="State">State of the liquid</param>
        </member>
        <member name="M:Sias.Core.Interfaces.ILiquid.Get(System.Double)">
            <summary>
            Get (part of the) liquid 
            
            This method is used to get part of the liquid. The defined liquid 
            part is returned together with the state changes of the operation. 
            The amount of liquid removed will be subtracted from the available 
            liquid volume. If not enough liquid is available the remaining volume 
            will be returned as "air".
            </summary>
            <param name="Vol">Volume of liquid to remove</param>
            <returns>Removed liquid including liquid names and states</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.ILiquid.Includes(System.String)">
            <summary>
            Check whether a defined liquid is available or not
            
            This method is used to check whether a liquid with the defined name is part 
            of the liquid or not. This will be done by checking the liquids name list.
            </summary>
            <param name="Name">Liquid name</param>
            <returns>True if liquid found</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.ILiquid.Clear">
            <summary>
            Remove all liquid, clear all states and names
            
            This method is used to remove all liquid. This includes 
             - resetting all liquid type, error and warning flags,
             - setting the liquid volume to 0 and
             - clears the liquids name list.
            </summary>
            <returns>True, if the given liquid name is included, otherwise False.</returns>
        </member>
        <member name="P:Sias.Core.Interfaces.ILiquid.Names">
            <summary>
            Names of all liquids in this liquid
            
            This collection keeps all liquid names the liquid consists of. 
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ILiquid.Volume">
            <summary>
            Liquid volume
            
            This property reflects the actual volume of the liquid. It is recommended 
            not changing this member directly instead it is expected to use 
             - Add(...) to add another liquid to this liquid;
             - Get(...) to get (and remove) part of the liquid or
             - Set(...) to set (prepare) a liquid.
             .
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ILiquid.State">
            <summary>
            Liquid state
            
            This property reflect the liquid state. The liquid state contain error,
            warning and liquid type flags.
            </summary>
        </member>
        <member name="F:Sias.Core.SLiquid._Names">
            <summary>Collection of liquid names variable</summary>
        </member>
        <member name="F:Sias.Core.SLiquid._Volume">
            <summary>Liquid volume variable</summary>
        </member>
        <member name="F:Sias.Core.SLiquid._State">
            <summary>Liquid state variable</summary>
        </member>
        <member name="M:Sias.Core.SLiquid.#ctor">
            <summary>
            Default constructor: Liquid class without liquid.
            </summary>
        </member>
        <member name="M:Sias.Core.SLiquid.#ctor(System.String,System.Double,Sias.Core.Interfaces.SLiquidState)">
            <summary>
            Constructor: Single liquid with volume and state.
            </summary>
        </member>
        <member name="M:Sias.Core.SLiquid.#ctor(Sias.Core.SNameCollection,System.Double,Sias.Core.Interfaces.SLiquidState)">
            <summary>
            Constructor: Multiple liquids with volume and state.
            </summary>
        </member>
        <member name="M:Sias.Core.SLiquid.Air(System.Double)">
            <summary>
            Return a SLiquid object containing the given volume of air gap.
            </summary>
            <param name="Volume">Volume of air gap</param>
            <returns>SLiquid object with volume of air gap</returns>
        </member>
        <member name="M:Sias.Core.SLiquid.SystemLiquid(System.Double)">
            <summary>
            Returns a SLiquid object containing the given volume of system liquid.
            </summary>
            <param name="Volume">Volume of system liquid</param>
            <returns>SLiquid object with volume of system liquid</returns>
        </member>
        <member name="M:Sias.Core.SLiquid.op_Addition(Sias.Core.SLiquid,Sias.Core.SLiquid)">
             <summary>
             Overload operator +
            
             The operator + is used to add the liquids of two liquid classes. 
             That means 
              - the volumes will be added
              - the liquid name list will get the liquid names of both classes,
                but will remove all duplicates
              - the state bits will keep the set state bits of both classes
              .
             </summary>
             <param name="a">First addend</param>
             <param name="b">Second addend</param>
             <returns>Sum of the liquid classes</returns>
        </member>
        <member name="M:Sias.Core.SLiquid.AddName(Sias.Core.SName)">
            <summary>
            Add another liquid name to the liquid class. 
            
            The method takes care that there are no duplicate liquid 
            names in the liquid name collection.
            </summary>
            <param name="Name">Liquid name to add</param>
            <returns>True if name was added, false if name was already available.</returns>
        </member>
        <member name="M:Sias.Core.SLiquid.ToString">
            <summary>
            Creates a string representation of the SLiquid object.
            </summary>
            <returns>The string representation of the SLiquid object</returns>
        </member>
        <member name="M:Sias.Core.SLiquid.Add(Sias.Core.Interfaces.ILiquid)">
            <summary>
            Add liquid 
            
            This method is used to add another liquid. This is used e.g. when
            dispensing liquid to a cavity. In this case the dispensed liquid 
            will be added to the cavity liquid.
            
            Adding liquid means
             - Add the volume of the new liquid to origin liquid volume.
             - Set all active state bits of the new liquid on origin liquid state.
             - Add all \b not already \b available liquid names to origin liquid name list.
             .
            </summary>
            <param name="Liquid">Liquid to add</param>
            ToDo: Should we return pipetting errors to origin tubes ?
        </member>
        <member name="M:Sias.Core.SLiquid.Add(System.String,System.Double,Sias.Core.Interfaces.SLiquidState)">
            <summary>
            Add single liquid.
            
            This method is used to add another liquid. This is used for 
            manually adding liquid. Mostly this may be used as an alternate 
            cavity preparation on process startup (E.g. if a cavity contains 
            mixtures of different liquids).\n
            
            Adding liquid means
             - Add the volume of the new liquid to origin liquid volume.
             - Set all active state bits of the new liquid on origin liquid state.
             - Add all \b not already \b available liquid names to origin liquid name list.
             .
            </summary>
            <param name="Name">Name of the liquid to add</param>
            <param name="Vol">Volume of the liquid to add</param>
            <param name="AddState">State of the liquid to add</param>
        </member>
        <member name="M:Sias.Core.SLiquid.Set(System.String,System.Double,Sias.Core.Interfaces.SLiquidState)">
            <summary>
            Set liquid name, volume and state
            
            This method is used to a defined liquid name, volume and liquid state.
            This is mostly used on process preparation to and 
            </summary>
            <param name="Name">Name of the liquid</param>
            <param name="Volume">Volume of the liquid</param>
            <param name="State">State of the liquid</param>
        </member>
        <member name="M:Sias.Core.SLiquid.Get(System.Double)">
            <summary>
            Get (part of the) liquid 
            
            This method is used to get(pick) part of the liquid. The defined liquid 
            part is returned together with the state changes of the operation. 
            The amount of liquid removed will be subtracted from the available 
            liquid volume. If not enough liquid is available the remaining volume 
            will be returned as "air".
            </summary>
            <param name="Vol">Volume of liquid to remove</param>
            <returns>Removed liquid including liquid names and states</returns>
        </member>
        <member name="M:Sias.Core.SLiquid.Includes(System.String)">
            <summary>
            Check whether a defined liquid is available or not
            
            This method is used to check whether a liquid with the defined name is part 
            of the liquid or not. This will be done by checking the liquids name list.
            </summary>
            <param name="Name">Liquid name</param>
            <returns>True, if the given liquid name is included, otherwise False.</returns>
        </member>
        <member name="M:Sias.Core.SLiquid.Clear">
            <summary>
            Remove all liquid, clear all states and names
            
            This method is used to remove all liquid. This includes 
             - resetting all liquid type, error and warning flags,
             - setting the liquid volume to 0 and
             - clears the liquids name list.
            </summary>
        </member>
        <member name="P:Sias.Core.SLiquid.Names">
            <summary>
            Names of all liquids in this liquid mixture
            
            This collection keeps all liquid names the liquid consists of. 
            </summary>
        </member>
        <member name="P:Sias.Core.SLiquid.Name">
            <summary>
            Liquid Name
            
            This property implements a single liquid name. In case the liquid is a mixture of 
            different liquids the liquid name will be a comma separated list of the liquid 
            names of the origin liquids.
            </summary>
        </member>
        <member name="P:Sias.Core.SLiquid.Volume">
            <summary>
            Liquid volume
            
            This property reflects the actual volume of the liquid. It is recommended 
            not changing this member directly instead it is expected to use 
             - Add(...) to add another liquid to this liquid;
             - Get(...) to get (and remove) part of the liquid or
             - Set(...) to set (prepare) a liquid.
             .
            </summary>
        </member>
        <member name="P:Sias.Core.SLiquid.State">
            <summary>
            Liquid state
            
            This property reflect the liquid state. The liquid state contain error,
            warning and liquid type flags.
            </summary>
        </member>
        <member name="P:Sias.Core.SLiquid.ErrorValue">
            <summary>
            Error value of the liquid state
            
            This member is used for class serialization it is not recommended to
            use this property for other purposes.
            </summary>
        </member>
        <member name="P:Sias.Core.SLiquid.LiquidValue">
            <summary>
            Liquid value of the liquid state
            
            This member is used for class serialization it is not recommended to
            use this property for other purposes.
            </summary>
        </member>
        <member name="T:Sias.Core.SOverwriteConfirmationResult">
            <summary>
            Overwrite confirmation dialog result value enumerator
            </summary>
        </member>
        <member name="F:Sias.Core.SOverwriteConfirmationResult.Overwrite">
            <summary>
            Overwrite configuration
            </summary>
        </member>
        <member name="F:Sias.Core.SOverwriteConfirmationResult.DontOverwrite">
            <summary>
            Do not Overwrite configuration
            </summary>
        </member>
        <member name="T:Sias.Core.Interfaces.IItem">
            <summary>
            Interface for items.
            
            An Item is a manually or automatically moveable lab ware including a set of cavities and/or 
            a set of slots. It can be "moved" by assigning a new current slot (IItem.CurrentSlot).
            The Cavities property gives access to its cavities.
            </summary>
        </member>
        <member name="M:Sias.Core.Interfaces.IItem.SetRestriction(Sias.Core.SRestrictionValue)">
            <summary>
            Set restriction value for this item object.
            	 
            Setting a restriction can be used to avoid the crossing of the item 
            with the gripper or the tips. The Arm object will try to avoid crossing
            the item.
            </summary>
            <param name="NewRestriction">New Restriction value</param>
            <returns>Old restriction value</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.IItem.GetCavitiesByType(System.String)">
            <summary>
            Get cavities by cavity type
            
            Returns a list of all ICavity objects that match a given
            filter string.
            </summary>
            <param name="Filter">Filter string for cavity selection</param>
            <returns>Collection of all selected cavities</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.IItem.GetCavityByName(System.String)">
            <summary>
            Get Cavity by name.
            
            Returns the ICavity object that matches the given name. If no Item matches 
            the given name null is returned.
            </summary>
            <param name="Name">Name of the Cavity (should be unique)</param>
            <returns>Selected cavity or null if no cavity found.</returns>
        </member>
        <member name="P:Sias.Core.Interfaces.IItem.Name">
            <summary>
            Name of the Item.
            
            This property returns the name of an item. By setting the item name may be changed.
            \b Important: On sias layouts it is needed to have unique names.
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.IItem.Position">
            <summary>
            Pipetting reference position.
            
            This property returns the pipetting reference position. Mostly this 
            property is not needed, as for pipetting the devices will need the 
            cavity information.
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.IItem.GripperPosition">
            <summary>
            Position of a gripper arm to pickup the item.
            
            This property defines the gripper position to pick the Item. \n
            \b Important:   The Item is only pickable by a gripper if the Items GripperOpen 
                            and GripperClose will be inside the grippers move range!
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.IItem.CurrentSlot">
            <summary>
            The actual slot, where the item is placed.
            
            This property returns the current slot (where the Item is placed actually). 
            By assigning a new slot to this property the Items gets logically move to 
            the new slot.\n
            \b Important:   Assigning to this property is only a logical operation. The
                            physical operation has tbe doen either by a gripper 
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.IItem.GripperOpen">
            <summary>
            Gripper open value.
            
            This property returns the gripper open value. The gripper open value 
            is used before picking or after dropping the Item. 
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.IItem.GripperClose">
            <summary>
            Gripper close value.
            
            This property returns the gripper close value. The gripper close value 
            is used to transfer the Item.
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.IItem.Orientation">
            <summary>
            Item orientation.
            
            This property returns the Item orientation. The Item orientation
            defines the absolute orientation of the Item.
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.IItem.Cavities">
            <summary>
            Collection of all cavities of the item.
            
            This property return a collection of all cavities of the item. 
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.IItem.TipPositions">
            <summary>
            Get tip positions.
            
            This property return a collection of all tip positions of the item. 
            </summary>
            <returns>Collection of tip positions</returns>
        </member>
        <member name="P:Sias.Core.Interfaces.IItem.CustomProperties">
            <summary>
            Custom Properties.
            
            This property returns the custom property collection of the item. With custom 
            properties it is possible to get additional information (e.g. defined in a layout 
            editor) or to appends application specific information to an item.
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.IItem.AdditionalTravelHeight">
             <summary>
             Additional travel height. 
            
             This value defines an additional travel offset in case that this 
             item is actually transferred (moved) with the gripper.
             </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.IItem.EnclosingRectangle">
             <summary>
             This member returns the enclosing rectangle of the IItem object.
            
             The enclosing rectangle defines the distances of most far item positions
             relative to the gripper position.
             It can be used to calculate the gripper range extensions to avoid 
             collisions.
             </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.IItem.ConnectedDevice">
            <summary>
            Connected device
            
            This member defines a connected device. If no device is connected to 
            the item the member is null. This member can be set also. This is needed
            to setup the device connection at the start of the run. Take care when 
            changing the connected device while any run is in process.
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.IItem.History">
            <summary>
            Item History
            
            The History member is designed to keep the History of the item. 
            It can be used from any method to store what has been done with the IItem.
            E.g. a MoveItem can define that the plate has been moved to another position.
            \b Important:   If the property returns null, a method is not allowed to add 
                            history entries.
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.IItem.SlotsOfItem">
            <summary>
            Slots of the Item
            
            This property returns a collection of all slots placed on the item.
            </summary>
        </member>
        <member name="T:Sias.Core.Interfaces.SItemCollection">
            <summary>
            Item collection
            
            This class handles a collection of objects implementing the 
            IItem interface.
            </summary>
        </member>
        <member name="M:Sias.Core.Interfaces.SItemCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SItemCollection.DisableHistory">
            <summary>Disable Histories property</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SItemCollection.Item(System.Int32)">
            <summary>
            Get/set the IItem at the specified index in the collection. 
            </summary>
            <param name="index">Index of the IItem</param>
            <returns>An IItem at each valid index.</returns>
        </member>
        <member name="T:Sias.Core.PropertyGrid.IElementWrapper">
            <summary>
            The IArrayElementWrapper interface 
            
            This interface is used to define object wrapper for the Property grid. 
            </summary>
        </member>
        <member name="P:Sias.Core.PropertyGrid.IElementWrapper.ElementType">
            <summary>
            Gets the ElementType of the wrapped object
            </summary>
            <value></value>
        </member>
        <member name="P:Sias.Core.PropertyGrid.IElementWrapper.ElementData">
            <summary>
            Get/Set the Element Data of the wrapped object
            </summary>
            <value></value>
        </member>
        <member name="T:Sias.Core.PropertyGrid.SValueElementWrapper">
            <summary>
            Value type element wrapper
            
            This class is used for editing value types in object properties.
            </summary>
        </member>
        <member name="M:Sias.Core.PropertyGrid.SValueElementWrapper.#ctor(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Initializes a new instance of the <b>SArrayElementWrapper</b> class.
            </summary>
            <param name="pi">Property descriptor</param>
            <param name="Parent">parent object</param>
        </member>
        <member name="M:Sias.Core.PropertyGrid.SValueElementWrapper.ToString">
            <summary>
            Retrieves a string that indicates the current object.
            </summary>
            <returns>The string format of the object.</returns>
        </member>
        <member name="P:Sias.Core.PropertyGrid.SValueElementWrapper.ElementType">
            <summary>Array element type property</summary>
        </member>
        <member name="P:Sias.Core.PropertyGrid.SValueElementWrapper.ElementData">
            <summary>Array Element data property</summary>
        </member>
        <member name="T:Sias.Core.PropertyGrid.SArrayElementWrapper">
            <summary>
            Array element wrapper
            
            This class is used as element wrapper for array elements.
            </summary>
        </member>
        <member name="M:Sias.Core.PropertyGrid.SArrayElementWrapper.#ctor(System.Array,System.Int32)">
            <summary>
            Initializes a new instance of the <b>SArrayElementWrapper</b> class.
            </summary>
            <param name="MyArray"></param>
            <param name="ArrayIndex"></param>
        </member>
        <member name="M:Sias.Core.PropertyGrid.SArrayElementWrapper.ToString">
            <summary>
            Retrieves a string that indicates the current object.
            </summary>
            <returns>The string format of the object.</returns>
        </member>
        <member name="P:Sias.Core.PropertyGrid.SArrayElementWrapper.ElementType">
            <summary>Array element type property</summary>
        </member>
        <member name="P:Sias.Core.PropertyGrid.SArrayElementWrapper.ElementData">
            <summary>Array Element data property</summary>
        </member>
        <member name="T:Sias.Core.PropertyGrid.SListElementWrapper">
            <summary>
            List/Collection element wrapper
            
            This class is used as element wrapper for list or collection elements.
            </summary>
        </member>
        <member name="M:Sias.Core.PropertyGrid.SListElementWrapper.#ctor(System.Collections.IList,System.Int32)">
            <summary>
            Initializes a new instance of the <b>SListElementWrapper</b> class.
            </summary>
            <param name="List"></param>
            <param name="ListIndex"></param>
        </member>
        <member name="M:Sias.Core.PropertyGrid.SListElementWrapper.ToString">
            <summary>
            Retrieves a string that indicates the current object.
            </summary>
            <returns>The string format of the object.</returns>
        </member>
        <member name="P:Sias.Core.PropertyGrid.SListElementWrapper.ElementType">
            <summary>Array element type property</summary>
        </member>
        <member name="P:Sias.Core.PropertyGrid.SListElementWrapper.ElementData">
            <summary>Array Element data property</summary>
        </member>
        <member name="T:Sias.Core.PropertyGrid.SDictionaryElementWrapper">
            <summary>
            Dictionary element wrapper
            
            This class is used as element wrapper for dictionary elements.
            </summary>
        </member>
        <member name="M:Sias.Core.PropertyGrid.SDictionaryElementWrapper.#ctor(System.Collections.IDictionary,System.Object)">
            <summary>
            Initializes a new instance of the <b>SDictionaryElementWrapper</b> class.
            </summary>
            <param name="List">The dictionary</param>
            <param name="DictionaryKey">The key of the wrapped object</param>
        </member>
        <member name="M:Sias.Core.PropertyGrid.SDictionaryElementWrapper.ToString">
            <summary>
            Retrieves a string that indicates the current object.
            </summary>
            <returns>The string format of the object.</returns>
        </member>
        <member name="P:Sias.Core.PropertyGrid.SDictionaryElementWrapper.ElementType">
            <summary>Array element type property</summary>
        </member>
        <member name="P:Sias.Core.PropertyGrid.SDictionaryElementWrapper.ElementData">
            <summary>Array Element data property</summary>
        </member>
        <member name="T:Sias.Core.PropertyGrid.SElementWrapperTypeConverter">
            <summary>
            Element wrapper type converter
            </summary>
        </member>
        <member name="M:Sias.Core.PropertyGrid.SElementWrapperTypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Returns a collection of properties for the type of array specified by the value parameter.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="value">An Object that specifies the type of array for which to get properties.</param>
            <param name="attributes">An array of type Attribute that is used as a filter.</param>
            <returns>A PropertyDescriptorCollection with the properties that are exposed for this 
            data type, or a null reference (Nothing in Visual Basic) if there are no properties.</returns>
        </member>
        <member name="M:Sias.Core.PropertyGrid.SElementWrapperTypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            returns true to make sure GetProperties is called.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Sias.Core.Attributes.SGlobalizedPropertyAttribute">
            <summary>
            Optional attribute for detailed specification of where
            STypeConverter should look for its resources.
            </summary>
        </member>
        <member name="P:Sias.Core.Attributes.SGlobalizedPropertyAttribute.BaseName">
            <summary>
            Place where a ResourceManager can find its resources.
            </summary>
        </member>
        <member name="P:Sias.Core.Attributes.SGlobalizedPropertyAttribute.DisplayNameId">
            <summary>
            Resource name for a property's DisplayName.
            </summary>
        </member>
        <member name="P:Sias.Core.Attributes.SGlobalizedPropertyAttribute.DescriptionId">
            <summary>
            Resource name for a property's Description.
            </summary>
        </member>
        <member name="P:Sias.Core.Attributes.SGlobalizedPropertyAttribute.CategoryId">
            <summary>
            Resource name for a property's Category.
            </summary>
        </member>
        <member name="T:Sias.Core.Attributes.SGlobalizedTypeAttribute">
            <summary>
            Optional attribute for detailed specification of where
            STypeConverter should look for its resources.
            </summary>
        </member>
        <member name="P:Sias.Core.Attributes.SGlobalizedTypeAttribute.BaseName">
            <summary>
            Place where a ResourceManager can find its resources.
            </summary>
        </member>
        <member name="T:Sias.Core.Attributes.SPropertyAttributes">
            <summary>
            Has some attributes defining how a property behaves in 
            a <see cref="T:Sias.Core.PropertyGrid.SPropertyGrid"/>.
            </summary>
        </member>
        <member name="M:Sias.Core.Attributes.SPropertyAttributes.#ctor(System.String)">
            <summary>
            Constructor with given name
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Sias.Core.Attributes.SPropertyAttributes.CompareTo(System.Object)">
            <summary>
            Compare method for using property sorting
            </summary>
            <param name="obj">SPropertyAttributes object to compare</param>
            <returns></returns>
        </member>
        <member name="M:Sias.Core.Attributes.SPropertyAttributes.GetPropertyAttributes(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            Get property attributes for given property descriptor and target object.
            </summary>
        </member>
        <member name="P:Sias.Core.Attributes.SPropertyAttributes.Name">
            <summary>
            SPropertyAttributes Name
            </summary>
        </member>
        <member name="P:Sias.Core.Attributes.SPropertyAttributes.IsBrowsable">
            <summary>
            Defines if the property is visible
            </summary>
        </member>
        <member name="P:Sias.Core.Attributes.SPropertyAttributes.IsReadOnly">
            <summary>
            Defines is the property is read only
            </summary>
        </member>
        <member name="P:Sias.Core.Attributes.SPropertyAttributes.DisplayName">
            <summary>
            defines the display name of the property
            </summary>
        </member>
        <member name="P:Sias.Core.Attributes.SPropertyAttributes.Description">
            <summary>
            Defines the description of the property
            </summary>
        </member>
        <member name="P:Sias.Core.Attributes.SPropertyAttributes.Category">
            <summary>
            Defines the Category of the property
            </summary>
        </member>
        <member name="P:Sias.Core.Attributes.SPropertyAttributes.Order">
            <summary>
            Defines the order of the property
            </summary>
        </member>
        <member name="T:Sias.Core.Attributes.SPropertyAttributesProvider">
            <summary>
            Delegate that allows a class to change property attributes that
            define a property's behavior in 
            a <see cref="T:Sias.Core.PropertyGrid.SPropertyGrid"/>.
            </summary>
        </member>
        <member name="T:Sias.Core.Attributes.SPropertyAttributesProviderAttribute">
            <summary>
            Use this attribute on a property to set a property's
            <see cref="T:Sias.Core.Attributes.SPropertyAttributesProvider"/> delegate.
            </summary>
            <details>
            Using property attribute providers allow to dynamically change property attributes 
            like 
             - Display name
             - Description
             - Browsable and ReadOnly flag
             - Category and
             - Sort order
            </details>
        </member>
        <member name="M:Sias.Core.Attributes.SPropertyAttributesProviderAttribute.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Sias.Core.Attributes.SPropertyAttributesProviderAttribute.GetPropertyAttributesProvider(System.Object)">
            <summary>
            Get the method specified by the 
            <see cref="T:Sias.Core.Attributes.SPropertyAttributesProvider"/> 
            of the target object.
            </summary>
        </member>
        <member name="P:Sias.Core.Attributes.SPropertyAttributesProviderAttribute.Name">
            <summary>
            PropertyAttributesProvider function Name
            </summary>
        </member>
        <member name="T:Sias.Core.Interfaces.ISlot">
            <summary>
            Slot interface
            
            This interface needs to be implemented from each object is able to keep an 
            item (objects implementing the IItem interface). It provides properties getting 
            the positions, the current item as well as a slot timer.
            </summary>
        </member>
        <member name="M:Sias.Core.Interfaces.ISlot.Accepts(Sias.Core.Interfaces.IItem)">
            <summary>
            Check is the slot would accept the given item.
            
            This method is designed to if a specific item can be placed on the defined slot. It 
            is recommended to check this before placing a new item to a slot.\n
            </summary>
            <remarks>
            if ILayout.GetCompatibleSlots is used to get the slot it may be not necessary to check 
            the item for acceptance again.
            </remarks>
            <param name="item">IItem object to check.</param>
            <returns>true, if item is acceptable; otherwise false.</returns>
        </member>
        <member name="P:Sias.Core.Interfaces.ISlot.Name">
            <summary>
            Slot name
            
            This property reflects the name of the slot. On sias layouts the slot 
            names need to be unique.
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ISlot.Position">
            <summary>
            Slot position (coordinates of the slot)
            
            This Property reflect the slots reference position. 
            Mostly this position is not directly used. For moving an Item from 
            to the slot the GripperPositions property is used instead.
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ISlot.GripperPositions">
            <summary>
            Gripper move path (for getting/putting items) 
            
            This property defines the gripper move path. This path is used when getting 
            or putting an Item to the slot. \n
            In general this gripper path is used under 4 different conditions:
             -# When moving the (empty) gripper to the slot for pickup an item \n
                In this case the gripper will move the path in ascending order with the 
                items gripper open value. Re-gripping positions can be ignored.
             -# When moving the gripper away from slot with a picked item \n
                In this case the gripper will move the path in descending order mostly 
                with the items gripper close value. Re-gripping positions will be recognized.
             -# When moving the gripper to the slot to drop an item \n
                In this case the gripper will move the path in ascending order mostly 
                with the items gripper close value. Re-gripping positions will be recognized.
             -# When moving the (empty) gripper away from slot after dropping an item \n
                In this case the gripper will move the path in descending order with the 
                items gripper open value. Re-gripping positions can be ignored.
             .
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ISlot.CurrentItem">
            <summary>
            Currently placed item (null for none)
            
            This property reflects the item currently placed on the slot. 
            If the slot is empty the property is null. \n
            When using sias layouts assigning another item to this property will 
            remove the current item from the slot and will place the new one. 
            Assigning null to current object will only remove the item from slot.
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ISlot.SlotTimer">
            <summary>
            Slots timer. 
            
            This timer will be used e.g. for incubations or shake times. 
            In general it is not allowed to get or put an item while this timer 
            is active. Mostly this is managed by a connected device.
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ISlot.CustomProperties">
            <summary>
            Custom Properties.
            
            This property returns the custom property collection of the slot. With custom 
            properties it is possible to get additional information (e.g. defined in a layout 
            editor) or to appends application specific information to an item.
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ISlot.ConnectedDevice">
            <summary>
            The accessible device connected to the slot (null for none)
            
            This member defines a connected device. If no device is connected to 
            the slot the member is null. This member can be set also. This is needed
            to setup the device connection at the start of the run. Take care when 
            changing the connected device while any run is in process.
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ISlot.History">
            <summary>
            Slot History
            
            The History member is designed to keep the History of the slot. 
            It can be used from any method to store what has been done at the ISlot.
            E.g. a GetItem can record that a item is removed from the slot.
            \b Important:   If the property returns null a method is not allowed to add 
                            history entries.
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ISlot.ItemOfSlot">
            <summary>
            Get the Item the slot belongs to.
            
            In difference to Current item this property give the Item where the slot is 
            placed instead of the item placed on the slot. In case the slot is not placed 
            on a component implementing the IItem interface (e.g. the worktable) the property 
            will return null.
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ISlot.Orientation">
            <summary>
            Slot orientation.
            
            This property returns the Slot orientation. The Slot orientation
            defines the absolute orientation of the Slot.
            </summary>
        </member>
        <member name="T:Sias.Core.Interfaces.SSlotCollection">
            <summary>
            Slot collection
            
            This collection is designed for keeping objects implementing an ISlot 
            interface.
            </summary>
        </member>
        <member name="M:Sias.Core.Interfaces.SSlotCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SSlotCollection.DisableHistory">
            <summary>
            Disable Histories property
            
            This property is used to activate or deactivate histories for ALL slots 
            in the collection.
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SSlotCollection.Item(System.Int32)">
            <summary>
            Gets or sets the ISlot at the specified index in the collection. 
            </summary>
            <param name="index">Index of the ISlot</param>
            <returns>An ISlot at each valid index.</returns>
        </member>
        <member name="T:Sias.Core.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Sias.Core.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Sias.Core.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Sias.Core.Properties.Resources.ErrorOptionAbort">
            <summary>
              Looks up a localized string similar to Abort.
            </summary>
        </member>
        <member name="P:Sias.Core.Properties.Resources.ErrorOptionCancel">
            <summary>
              Looks up a localized string similar to Cancel.
            </summary>
        </member>
        <member name="P:Sias.Core.Properties.Resources.ErrorOptionClose">
            <summary>
              Looks up a localized string similar to Close.
            </summary>
        </member>
        <member name="P:Sias.Core.Properties.Resources.ErrorOptionContinue">
            <summary>
              Looks up a localized string similar to Continue.
            </summary>
        </member>
        <member name="P:Sias.Core.Properties.Resources.ErrorOptionIgnore">
            <summary>
              Looks up a localized string similar to Ignore.
            </summary>
        </member>
        <member name="P:Sias.Core.Properties.Resources.ErrorOptionNo">
            <summary>
              Looks up a localized string similar to No.
            </summary>
        </member>
        <member name="P:Sias.Core.Properties.Resources.ErrorOptionOK">
            <summary>
              Looks up a localized string similar to OK.
            </summary>
        </member>
        <member name="P:Sias.Core.Properties.Resources.ErrorOptionRetry">
            <summary>
              Looks up a localized string similar to Retry.
            </summary>
        </member>
        <member name="P:Sias.Core.Properties.Resources.ErrorOptionSkip">
            <summary>
              Looks up a localized string similar to Skip.
            </summary>
        </member>
        <member name="P:Sias.Core.Properties.Resources.ErrorOptionYes">
            <summary>
              Looks up a localized string similar to Yes.
            </summary>
        </member>
        <member name="T:Sias.Core.SVersion">
            <summary>
            Component version.
            
            This class manages version information for a component 
            (e.g an action or a parameter set).
            </summary>
        </member>
        <member name="M:Sias.Core.SVersion.#ctor(System.String)">
            <summary>Constructor with a version string</summary>
            <param name="aVersion">version string</param>
        </member>
        <member name="M:Sias.Core.SVersion.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new SVersion object with the supplied values as version numbers
            </summary>
            <param name="v1">Major version</param>
            <param name="v2">Minor version</param>
            <param name="v3">Revision version</param>
            <param name="v4">Update version</param>
        </member>
        <member name="M:Sias.Core.SVersion.ToString">
            <summary>
            Retrieves a string that indicates the current object.
            </summary>
            <returns>The string format of the object.</returns>
        </member>
        <member name="P:Sias.Core.SVersion.Major">
            <summary>Major version</summary>
        </member>
        <member name="P:Sias.Core.SVersion.Minor">
            <summary>Minor version</summary>
        </member>
        <member name="P:Sias.Core.SVersion.Revision">
            <summary>Revision</summary>
        </member>
        <member name="P:Sias.Core.SVersion.Update">
            <summary>Update or Build number</summary>
        </member>
        <member name="P:Sias.Core.SVersion.Version">
            <summary>Version string</summary>
        </member>
        <member name="T:Sias.Core.Interfaces.SLiquidState">
            <summary>
            Liquid state class
            
            This class is used to reflect a liquid state. 
            The liquid state contains 
             - Liquid errors and warning: Typically this are error or warnings recognized 
               while pipetting or on other actions that may influence the liquid (e.g. 
               shaking, incubation).
             - Liquid type: This is a general classification of the liquid like Sample,
               control, reagent or diluent. 
             .
            If two liquids are mixed, the resulted liquid gets typically all flags of both 
            liquids. \n
            \b Example: \n
                Mixing a liquid with state (Sample, incubation warning) with a liquid
                with state (Reagent, Shaker warning) will result in a liquid with the
                state (Sample, Reagent, Incubation warning, Shaker warning).
            </summary>
        </member>
        <member name="M:Sias.Core.Interfaces.SLiquidState.ToString">
            <summary>Convert to string</summary>
            <returns>State string</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.SLiquidState.#ctor(System.UInt32,System.UInt32)">
            <summary>
            construct liquid state with a state value
            </summary>
            <param name="ErrorVal">Error state value</param>
            <param name="LiquidVal">Liquid state value</param>
        </member>
        <member name="M:Sias.Core.Interfaces.SLiquidState.#ctor(Sias.Core.Interfaces.SLiquidState.EM,Sias.Core.Interfaces.SLiquidState.LM)">
            <summary>
            construct liquid state with a state value
            </summary>
            <param name="ErrorSta">Error state</param>
            <param name="LiquidSta">Liquid state</param>
        </member>
        <member name="M:Sias.Core.Interfaces.SLiquidState.#ctor">
            <summary>
            Default constructor: "empty" liquid state
            </summary>
        </member>
        <member name="M:Sias.Core.Interfaces.SLiquidState.UserLiquidAvail(System.Byte)">
            <summary>Check if User liquid available</summary>
            <param name="LiqNo">User liquid number (0..1)</param>
            <returns>True, if the liquid is avail</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.SLiquidState.SetUserLiquidAvail(System.Byte)">
            <summary>Set User liquid as "available"</summary>
            <param name="LiqNo">User liquid number (0..1)</param>
        </member>
        <member name="M:Sias.Core.Interfaces.SLiquidState.ClearUserLiquidAvail(System.Byte)">
            <summary>Set User liquid as "not available"</summary>
            <param name="LiqNo">User liquid number (0..1)</param>
        </member>
        <member name="M:Sias.Core.Interfaces.SLiquidState.HasDeviceError(System.Byte)">
            <summary>Device Error while liquid pipetting</summary>
            <param name="DeviceNo">Device index (0..3)</param>
            <returns>True: Device warning is set</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.SLiquidState.SetDeviceError(System.Byte)">
            <summary>Set Device Error while liquid pipetting</summary>
            <param name="DeviceNo">Device index (0..3)</param>
        </member>
        <member name="M:Sias.Core.Interfaces.SLiquidState.ClearDeviceError(System.Byte)">
            <summary>Clear Device Error while liquid pipetting</summary>
            <param name="DeviceNo">Device index (0..3)</param>
        </member>
        <member name="M:Sias.Core.Interfaces.SLiquidState.HasDeviceWarning(System.Byte)">
            <summary>Device warning while liquid pipetting</summary>
            <param name="DeviceNo">Device index (0..3)</param>
            <returns>True: Device warning is set</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.SLiquidState.SetDeviceWarning(System.Byte)">
            <summary>Set device warning while liquid pipetting</summary>
            <param name="DeviceNo">Device index (0..3)</param>
        </member>
        <member name="M:Sias.Core.Interfaces.SLiquidState.ClrDeviceWarning(System.Byte)">
            <summary>Clear device warning Error while liquid pipetting</summary>
            <param name="DeviceNo">Device index (0..3)</param>
        </member>
        <member name="M:Sias.Core.Interfaces.SLiquidState.op_Addition(Sias.Core.Interfaces.SLiquidState,Sias.Core.Interfaces.SLiquidState)">
            <summary>
            operator +
            </summary>
            <param name="a">a</param>
            <param name="b">b</param>
            <returns>new SLiquidState(a.State|b.State);</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.SLiquidState.op_Addition(Sias.Core.Interfaces.SLiquidState,Sias.Core.Interfaces.SLiquidState.EM)">
            <summary>
            operator +
            </summary>
            <param name="a">a</param>
            <param name="b">b</param>
            <returns>new SLiquidState(a.State|b.State);</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.SLiquidState.op_Addition(Sias.Core.Interfaces.SLiquidState,Sias.Core.Interfaces.SLiquidState.LM)">
            <summary>
            operator +
            </summary>
            <param name="a">a</param>
            <param name="b">b</param>
            <returns>new SLiquidState(a.State|b.State);</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.SLiquidState.op_Subtraction(Sias.Core.Interfaces.SLiquidState,Sias.Core.Interfaces.SLiquidState)">
            <summary>
            operator -
            </summary>
            <param name="a">a</param>
            <param name="b">b</param>
            <returns>new SLiquidState(a.State and not b.State);</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.SLiquidState.op_Subtraction(Sias.Core.Interfaces.SLiquidState,Sias.Core.Interfaces.SLiquidState.EM)">
            <summary>
            operator -
            </summary>
            <param name="a">a</param>
            <param name="b">b</param>
            <returns>new SLiquidState(a.State and not b.State);</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.SLiquidState.op_Subtraction(Sias.Core.Interfaces.SLiquidState,Sias.Core.Interfaces.SLiquidState.LM)">
            <summary>
            operator -
            </summary>
            <param name="a">a</param>
            <param name="b">b</param>
            <returns>new SLiquidState(a.State and not b.State);</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.SLiquidState.op_Equality(Sias.Core.Interfaces.SLiquidState,Sias.Core.Interfaces.SLiquidState)">
            <summary>
            operator ==
            </summary>
            <param name="a">a</param>
            <param name="b">b</param>
            <returns>new SLiquidState(a.State and not b.State);</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.SLiquidState.op_Inequality(Sias.Core.Interfaces.SLiquidState,Sias.Core.Interfaces.SLiquidState)">
            <summary>
            operator !=
            </summary>
            <param name="a">a</param>
            <param name="b">b</param>
            <returns>new SLiquidState(a.State and not b.State);</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.SLiquidState.Equals(System.Object)">
            <summary>
            returns whether the given object is identical to the object or not
            </summary>
            <param name="o">object to compare</param>
            <returns>true if equal, false if not</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.SLiquidState.GetHashCode">
            <summary>
            overwrite GetHashcode to avoid warning
            </summary>
            <returns>hash coder</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.SLiquidState.Clear">
            <summary>
            clear all liquid state flags
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SLiquidState.ErrorValue">
            <summary>
            Liquid state value
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SLiquidState.Error">
            <summary>
            Error state property
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SLiquidState.LiquidValue">
            <summary>
            Liquid state value
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SLiquidState.Liquid">
            <summary>
            Liquid state property
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SLiquidState.ErrorStateBitsForSPG">
            <summary>Error state bits (only for SPG)</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SLiquidState.WarningStateBitsForSPG">
            <summary>Warning state bits (only for SPG)</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SLiquidState.LiquidStateBitsForSPG">
            <summary>Liquid state bits (only for SPG)</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SLiquidState.IsNothing">
            <summary>Checks if all state bits are cleared</summary>
            <value></value>
        </member>
        <member name="P:Sias.Core.Interfaces.SLiquidState.SystemLiquidAvail">
            <summary>System liquid available</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SLiquidState.AirGapAvail">
            <summary>Air Available</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SLiquidState.AirGapOnly">
            <summary>Only Air Available</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SLiquidState.SampleAvail">
            <summary>Sample available</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SLiquidState.ControlAvail">
            <summary>Control available</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SLiquidState.ReagentAvail">
            <summary>Reagent available</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SLiquidState.DiluentAvail">
            <summary>Diluent available</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SLiquidState.HasError">
            <summary>Any Error while liquid pipetting</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SLiquidState.HasRobotError">
            <summary>Robot Error while liquid pipetting</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SLiquidState.HasDetectionError">
            <summary>Liquid detection Error while liquid pipetting</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SLiquidState.HasClotError">
            <summary>Clot detection Error while liquid pipetting</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SLiquidState.HasTubeFullError">
            <summary>Tube full Error while liquid pipetting</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SLiquidState.HasDispenseError">
            <summary>Dispense Error while liquid pipetting</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SLiquidState.HasGetTipError">
            <summary>Get tip Error while liquid pipetting</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SLiquidState.HasIncubationError">
            <summary>Incubation Error while liquid pipetting</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SLiquidState.HasShakerError">
            <summary>Shake Error while liquid pipetting</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SLiquidState.HasWarning">
            <summary>Any warning while liquid pipetting</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SLiquidState.HasRobotWarning">
            <summary>Robot warning while liquid pipetting</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SLiquidState.HasDetectionWarning">
            <summary>Liquid detection warning while liquid pipetting</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SLiquidState.HasClotWarning">
            <summary>Clot detection warning while liquid pipetting</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SLiquidState.HasTubeFullWarning">
            <summary>Tube full warning while liquid pipetting</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SLiquidState.HasDispenseWarning">
            <summary>Dispense warning while liquid pipetting</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SLiquidState.HasGetTipWarning">
            <summary>Get tip warning while liquid pipetting</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SLiquidState.HasIncubationWarning">
            <summary>Incubation warning while liquid pipetting</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SLiquidState.HasShakerWarning">
            <summary>Shake warning while liquid pipetting</summary>
        </member>
        <member name="T:Sias.Core.Interfaces.SLiquidState.EM">
            <summary>Error Warning Mask constants</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.EM.No_Error">
            <summary>Bit mask for "All/any Error"</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.EM.AllErrors">
            <summary>Bit mask for "All/any Error"</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.EM.RobotError">
            <summary>Bit mask for "Instrument/Robot/Device Error"</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.EM.DetectionError">
            <summary>Bit mask for "liquid detection Error"</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.EM.ClotError">
            <summary>Bit mask for "Clot detection error"</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.EM.TubeFullError">
            <summary>Bit mask for "Tube full error"</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.EM.DispenseError">
            <summary>Bit mask for "Liquid Error (while dispense)"</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.EM.GetTipsError">
            <summary>Bit mask for "Tip Error (no or Bad tips)"</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.EM.IncubationError">
            <summary>Bit mask for "Incubation Error"</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.EM.ShakerError">
            <summary>Bit mask for "Shaker or centrifuge error"</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.EM.UserError8">
            <summary>Bit mask for "User Error 8" (configurable)</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.EM.UserError7">
            <summary>Bit mask for "User Error 7" (configurable)</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.EM.UserError6">
            <summary>Bit mask for "User Error 6" (configurable)</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.EM.UserError5">
            <summary>Bit mask for "User Error 5" (configurable)</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.EM.UserError4">
            <summary>Bit mask for "User Error 4" (configurable)</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.EM.UserError3">
            <summary>Bit mask for "User Error 3" (configurable)</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.EM.UserError2">
            <summary>Bit mask for "User Error 2" (configurable)</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.EM.UserError1">
            <summary>Bit mask for "User Error 1" (configurable)</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.EM.AllWarnings">
            <summary>Bit mask for "All/any Warnings"</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.EM.RobotWarning">
            <summary>Bit mask for "Instrument/Robot/Device Error"</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.EM.DetectionWarning">
            <summary>Bit mask for "liquid detection Error"</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.EM.ClotWarning">
            <summary>Bit mask for "Clot detection error"</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.EM.TubeFullWarning">
            <summary>Bit mask for "Tube full error"</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.EM.DispenseWarning">
            <summary>Bit mask for "Liquid Error (while dispense)"</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.EM.GetTipsWarning">
            <summary>Bit mask for "Tip Error (no or Bad tips)"</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.EM.IncubationWarning">
            <summary>Bit mask for "Incubation Error"</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.EM.ShakerWarning">
            <summary>Bit mask for "Shaker or centrifuge error"</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.EM.NoClotPredetection">
            <summary>Bit mask for "No clot pre detection Warning"</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.EM.UserWarning7">
            <summary>Bit mask for "User Warning 7" (configurable)</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.EM.UserWarning6">
            <summary>Bit mask for "User Warning 6" (configurable)</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.EM.UserWarning5">
            <summary>Bit mask for "User Warning 5" (configurable)</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.EM.UserWarning4">
            <summary>Bit mask for "User Warning 4" (configurable)</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.EM.UserWarning3">
            <summary>Bit mask for "User Warning 3" (configurable)</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.EM.UserWarning2">
            <summary>Bit mask for "User Warning 2" (configurable)</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.EM.UserWarning1">
            <summary>Bit mask for "User Warning 1" (configurable)</summary>
        </member>
        <member name="T:Sias.Core.Interfaces.SLiquidState.LM">
            <summary>Liquid Mask constants</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.LM.No_Liquid">
            <summary>Liquid state value for No liquid information</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.LM.AllLiquid">
            <summary>Bit mask for "All/any liquids"</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.LM.Sample">
            <summary>Bit mask for Sample</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.LM.Control">
            <summary>Bit mask for Control</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.LM.Reagent">
            <summary>Bit mask for Reagent</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.LM.Diluent">
            <summary>Bit mask for Diluent</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.LM.SystemLiquid">
            <summary>Bit mask for System liquid</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.LM.AirGap">
            <summary>Bit mask for Air</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.LM.Unused1">
            <summary>Bit mask for user defined liquid type 1</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.LM.Unused2">
            <summary>actually unused</summary>			
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.LM.UserLiquid">
            <summary>Bit mask for user defined liquid type 1</summary>			
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.LM.UserLiquid_01">
            <summary>Bit mask for user defined liquid type 1</summary>			
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.LM.UserLiquid_02">
            <summary>Bit mask for user defined liquid type 2</summary>			
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.LM.UserLiquid_03">
            <summary>Bit mask for user defined liquid type 3</summary>			
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.LM.UserLiquid_04">
            <summary>Bit mask for user defined liquid type 4</summary>			
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.LM.UserLiquid_05">
            <summary>Bit mask for user defined liquid type 5</summary>			
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.LM.UserLiquid_06">
            <summary>Bit mask for user defined liquid type 6</summary>			
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.LM.UserLiquid_07">
            <summary>Bit mask for user defined liquid type 7</summary>			
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.LM.UserLiquid_08">
            <summary>Bit mask for user defined liquid type 8</summary>			
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.LM.UserLiquid_09">
            <summary>Bit mask for user defined liquid type 9</summary>			
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.LM.UserLiquid_10">
            <summary>Bit mask for user defined liquid type 10</summary>			
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.LM.UserLiquid_11">
            <summary>Bit mask for user defined liquid type 11</summary>			
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.LM.UserLiquid_12">
            <summary>Bit mask for user defined liquid type 12</summary>			
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.LM.UserLiquid_13">
            <summary>Bit mask for user defined liquid type 13</summary>			
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.LM.UserLiquid_14">
            <summary>Bit mask for user defined liquid type 14</summary>			
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.LM.UserLiquid_15">
            <summary>Bit mask for user defined liquid type 15</summary>			
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.LM.UserLiquid_16">
            <summary>Bit mask for user defined liquid type 16</summary>			
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.LM.UserLiquid_17">
            <summary>Bit mask for user defined liquid type 17</summary>			
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.LM.UserLiquid_18">
            <summary>Bit mask for user defined liquid type 18</summary>			
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.LM.UserLiquid_19">
            <summary>Bit mask for user defined liquid type 19</summary>			
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.LM.UserLiquid_20">
            <summary>Bit mask for user defined liquid type 20</summary>			
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.LM.UserLiquid_21">
            <summary>Bit mask for user defined liquid type 21</summary>			
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.LM.UserLiquid_22">
            <summary>Bit mask for user defined liquid type 22</summary>			
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.LM.UserLiquid_23">
            <summary>Bit mask for user defined liquid type 23</summary>			
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.LM.Unknown">
            <summary>Bit mask for user defined liquid type 4</summary>			
        </member>
        <member name="T:Sias.Core.Interfaces.SLiquidState.SM_ErrorForSPG">
            <summary>Error state mask constants (only for SPG properties)</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_ErrorForSPG.RobotError">
            <summary>Bit mask for "Instrument/Robot/Device Error"</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_ErrorForSPG.DetectionError">
            <summary>Bit mask for "liquid detection Error"</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_ErrorForSPG.ClotError">
            <summary>Bit mask for "Clot detection error"</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_ErrorForSPG.TubeFullError">
            <summary>Bit mask for "Tube full error"</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_ErrorForSPG.DispenseError">
            <summary>Bit mask for "Liquid Error (while dispense)"</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_ErrorForSPG.GetTipsError">
            <summary>Bit mask for "Tip Error (no or Bad tips)"</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_ErrorForSPG.IncubationError">
            <summary>Bit mask for "Incubation Error"</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_ErrorForSPG.ShakerError">
            <summary>Bit mask for "Shaker or centrifuge error"</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_ErrorForSPG.UserError1">
            <summary>Bit mask for "User Device Error 1" (configurable)</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_ErrorForSPG.UserError2">
            <summary>Bit mask for "User Device Error 2" (configurable)</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_ErrorForSPG.UserError3">
            <summary>Bit mask for "User Device Error 3" (configurable)</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_ErrorForSPG.UserError4">
            <summary>Bit mask for "User Device Error 4" (configurable)</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_ErrorForSPG.UserError5">
            <summary>Bit mask for "User Device Error 5" (configurable)</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_ErrorForSPG.UserError6">
            <summary>Bit mask for "User Device Error 6" (configurable)</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_ErrorForSPG.UserError7">
            <summary>Bit mask for "User Device Error 7" (configurable)</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_ErrorForSPG.UserError8">
            <summary>Bit mask for "User Device Error 8" (configurable)</summary>
        </member>
        <member name="T:Sias.Core.Interfaces.SLiquidState.SM_WarningForSPG">
            <summary>Warning state mask constants (only for SPG properties)</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_WarningForSPG.RobotWarning">
            <summary>Bit mask for "Instrument/Robot/Device Error"</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_WarningForSPG.DetectionWarning">
            <summary>Bit mask for "liquid detection Error"</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_WarningForSPG.ClotWarning">
            <summary>Bit mask for "Clot detection error"</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_WarningForSPG.TubeFullWarning">
            <summary>Bit mask for "Tube full error"</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_WarningForSPG.DispenseWarning">
            <summary>Bit mask for "Liquid Error (while dispense)"</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_WarningForSPG.GetTipsWarning">
            <summary>Bit mask for "Tip Error (no or Bad tips)"</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_WarningForSPG.IncubationWarning">
            <summary>Bit mask for "Incubation Error"</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_WarningForSPG.ShakerWarning">
            <summary>Bit mask for "Shaker or centrifuge error"</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_WarningForSPG.NoClotPredetection">
            <summary>Bit mask for "No clot pre detection" warning</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_WarningForSPG.UserWarning2">
            <summary>Bit mask for "User Device Warning 3" (configurable)</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_WarningForSPG.UserWarning3">
            <summary>Bit mask for "User Device Warning 4" (configurable)</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_WarningForSPG.UserWarning4">
            <summary>Bit mask for "User Device Warning 2" (configurable)</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_WarningForSPG.UserWarning5">
            <summary>Bit mask for "User Device Warning 3" (configurable)</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_WarningForSPG.UserWarning6">
            <summary>Bit mask for "User Device Warning 4" (configurable)</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_WarningForSPG.UserWarning7">
            <summary>Bit mask for "User Device Warning 2" (configurable)</summary>
        </member>
        <member name="T:Sias.Core.Interfaces.SLiquidState.SM_LiquidForSPG">
            <summary>
            Liquid state mask constants (only for SPG properties)
            Important: this bits are shifted against the origin state to avoid SPG problems.
            </summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_LiquidForSPG.Sample">
            <summary>Bit mask for Sample</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_LiquidForSPG.Control">
            <summary>Bit mask for Control</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_LiquidForSPG.Reagent">
            <summary>Bit mask for Reagent</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_LiquidForSPG.Diluent">
            <summary>Bit mask for Diluent</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_LiquidForSPG.SystemLiquid">
            <summary>Bit mask for System liquid</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_LiquidForSPG.AirGap">
            <summary>Bit mask for Air</summary>
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_LiquidForSPG.UserLiquid_01">
            <summary>Bit mask for user defined liquid</summary>			
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_LiquidForSPG.UserLiquid_02">
            <summary>Bit mask for user defined liquid</summary>			
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_LiquidForSPG.UserLiquid_03">
            <summary>Bit mask for user defined liquid</summary>			
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_LiquidForSPG.UserLiquid_04">
            <summary>Bit mask for user defined liquid</summary>			
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_LiquidForSPG.UserLiquid_05">
            <summary>Bit mask for user defined liquid</summary>			
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_LiquidForSPG.UserLiquid_06">
            <summary>Bit mask for user defined liquid</summary>			
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_LiquidForSPG.UserLiquid_07">
            <summary>Bit mask for user defined liquid</summary>			
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_LiquidForSPG.UserLiquid_08">
            <summary>Bit mask for user defined liquid</summary>			
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_LiquidForSPG.UserLiquid_09">
            <summary>Bit mask for user defined liquid</summary>			
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_LiquidForSPG.UserLiquid_10">
            <summary>Bit mask for user defined liquid</summary>			
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_LiquidForSPG.UserLiquid_11">
            <summary>Bit mask for user defined liquid</summary>			
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_LiquidForSPG.UserLiquid_12">
            <summary>Bit mask for user defined liquid</summary>			
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_LiquidForSPG.UserLiquid_13">
            <summary>Bit mask for user defined liquid</summary>			
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_LiquidForSPG.UserLiquid_14">
            <summary>Bit mask for user defined liquid</summary>			
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_LiquidForSPG.UserLiquid_15">
            <summary>Bit mask for user defined liquid</summary>			
        </member>
        <member name="F:Sias.Core.Interfaces.SLiquidState.SM_LiquidForSPG.UserLiquid_16">
            <summary>Bit mask for user defined liquid</summary>			
        </member>
        <member name="T:Sias.Core.Interfaces.SLiquidCollection">
            <summary>
            Liquid collection
            
            This class handles a collection of objects implementing the 
            ILiquid interface.
            </summary>
        </member>
        <member name="M:Sias.Core.Interfaces.SLiquidCollection.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SLiquidCollection.Item(System.Int32)">
            <summary>
            Gets or sets the ILiquid at the specified index in the collection. 
            </summary>
            <param name="index">Index of the ILiquid</param>
            <returns>An ILiquid at each valid index.</returns>
        </member>
        <member name="T:Sias.Core.Interfaces.ISPropertyGridExtension">
            <summary>
            The ISPropertyGridExtension interface 
            </summary>
        </member>
        <member name="M:Sias.Core.Interfaces.ISPropertyGridExtension.AppendToGrid(Sias.Core.PropertyGrid.SPropertyGrid,System.Object,VisualHint.SmartPropertyGrid.PropertyEnumerator,System.Int32,System.String,System.String,System.String)">
            <summary>
            This Method will get called to append the object to the given grid.
            
            Implementing \code
               return Grid.AppendObject(this, Parent, ParentEnum, PropId, PropertyName, DisplayName, Description);
            \endcode
            Will work in the same way as if the object would not implement ISPropertyGridExtension,
            </summary>
            <param name="Grid">The property grid trying to append the object</param>
            <param name="Parent">The Parent of the object</param>
            <param name="ParentEnum">The Parent enumerator (where to add)</param>
            <param name="PropId">The property ID</param>
            <param name="PropertyName">The property name</param>
            <param name="DisplayName">The property display name</param>
            <param name="Description">A property description</param>
            <returns>The property enumerator of the appended object</returns>
        </member>
        <member name="T:Sias.Core.PropertyGrid.SPropertyGrid">
            <summary>
            %Sias property grid
            
            The sias property grid is based on the smart property grid of VisualHint.\n
            In addition it supports an optimized array, collection and dictionary handling.
            
            TODO: Find a way for updating/refreshing without a rebuild of the grid.
            TODO: Find a way for updating/refreshing without loosing the grid open/close state
            </summary>
        </member>
        <member name="F:Sias.Core.PropertyGrid.SPropertyGrid._DefaultExpandLevel">
            <summary>Default expand level field</summary>
        </member>
        <member name="M:Sias.Core.PropertyGrid.SPropertyGrid.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Sias.Core.PropertyGrid.SPropertyGrid.GetProperties(System.Object)">
            <summary>
            
            </summary>
            <param name="SubObj"></param>
            <returns></returns>
        </member>
        <member name="M:Sias.Core.PropertyGrid.SPropertyGrid.AppendArrayElement(System.Array,VisualHint.SmartPropertyGrid.PropertyEnumerator,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Append an array element to the SPropertyGrid
            </summary>
            <param name="Arr">Array object (Parent)</param>
            <param name="ArrEnum">Array Property Enumerator</param>
            <param name="ArrayIndex">Array Index</param>
            <param name="DisplayName"></param>
            <param name="Description">Description</param>
            <param name="Expanded">True if need to be expanded, false if not</param>
            <returns>The property enumerator of the appended array element</returns>
        </member>
        <member name="M:Sias.Core.PropertyGrid.SPropertyGrid.AppendArray(System.Array,System.Boolean,System.Object,VisualHint.SmartPropertyGrid.PropertyEnumerator,System.Int32,System.String,System.String,System.String)">
            <summary>
            Append an array Object
            </summary>
            <param name="Arr">Array object</param>
            <param name="AddChilds">Add child properties (Array elements)</param>
            <param name="Parent">Parent object of the array object</param>
            <param name="ParentEnum">Parent Enumerator</param>
            <param name="PropId">Property ID</param>
            <param name="PropertyName">Property name</param>
            <param name="DisplayName">Property Display name</param>
            <param name="Description">Property Description</param>
            <returns></returns>
        </member>
        <member name="M:Sias.Core.PropertyGrid.SPropertyGrid.AppendListElement(System.Collections.IList,VisualHint.SmartPropertyGrid.PropertyEnumerator,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Append a list element to the SPropertyGrid
            </summary>
            <param name="Arr">List object (Parent)</param>
            <param name="ArrEnum">List Property Enumerator</param>
            <param name="ArrayIndex">List Index</param>
            <param name="DisplayName">Display name</param>
            <param name="Description">Description</param>
            <param name="Expanded">True if need to be expanded, false if not</param>
            <returns>The property enumerator of the appended  element</returns>
        </member>
        <member name="M:Sias.Core.PropertyGrid.SPropertyGrid.AppendList(System.Collections.IList,System.Boolean,System.Object,VisualHint.SmartPropertyGrid.PropertyEnumerator,System.Int32,System.String,System.String,System.String)">
            <summary>
            Append an element implementing ILlist to the property grid.
            </summary>
            <param name="Arr">The list (array) object</param>
            <param name="AddChilds">Add child properties (list elements)</param>
            <param name="Parent">The lists parent object</param>
            <param name="ParentEnum">The parent enumerator</param>
            <param name="PropId">The property ID</param>
            <param name="PropertyName">The property name</param>
            <param name="DisplayName">The display name</param>
            <param name="Description">A property descriptions</param>
            <returns>The Property Enumerator of the appended list</returns>
        </member>
        <member name="M:Sias.Core.PropertyGrid.SPropertyGrid.AppendDictionaryElement(System.Collections.IDictionary,VisualHint.SmartPropertyGrid.PropertyEnumerator,System.Object,System.String,System.String,System.Boolean)">
            <summary>
            Append a dictionary element to the SPropertyGrid
            </summary>
            <param name="Arr">Dictionary object (Parent of the element)</param>
            <param name="ArrEnum">Dictionary Property Enumerator</param>
            <param name="Key">Dictionary Key</param>
            <param name="DisplayName">Display name</param>
            <param name="Description">Description</param>
            <param name="Expanded">True if need to be expanded, false if not</param>
            <returns>The property enumerator of the appended element</returns>
        </member>
        <member name="M:Sias.Core.PropertyGrid.SPropertyGrid.AppendDictionary(System.Collections.IDictionary,System.Boolean,System.Object,VisualHint.SmartPropertyGrid.PropertyEnumerator,System.Int32,System.String,System.String,System.String)">
            <summary>
            Append an element implementing IDictionary to the property grid.
            </summary>
            <param name="Arr">The dictionary object</param>
            <param name="AddChilds">Add child properties (Dictionary elements)</param>
            <param name="Parent">The parent object</param>
            <param name="ParentEnum">The parent enumerator</param>
            <param name="PropId">The property ID</param>
            <param name="PropertyName">The property name</param>
            <param name="DisplayName">The display name</param>
            <param name="Description">A property descriptions</param>
            <returns>The Property Enumerator of the element</returns>
        </member>
        <member name="M:Sias.Core.PropertyGrid.SPropertyGrid.GetValue(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            
            </summary>
            <param name="pd"></param>
            <param name="Parent"></param>
            <returns></returns>
        </member>
        <member name="M:Sias.Core.PropertyGrid.SPropertyGrid.IsRootObject(System.Object)">
            <summary>
            Check if the given parent object is a property grid root object
            </summary>
            <param name="Parent">parent object</param>
            <returns>True if root is object, otherwise false.</returns>
        </member>
        <member name="M:Sias.Core.PropertyGrid.SPropertyGrid.AppendSubObject(System.Object,System.Object,VisualHint.SmartPropertyGrid.PropertyEnumerator,System.Int32,System.String,System.String,System.String)">
            <summary>
            Append sub object
            
            In difference to AppendObject this method checks if the object implements ISPropertyGridExtension.
            If so it calls ISPropertyGridExtension.AppendToGrid(...) instead of AppendObject(...). This allows
            to extend the grid possibilities for special types.
            </summary>
            <param name="obj">The object to add to the grid</param>
            <param name="Parent">The Parent of the object</param>
            <param name="ParentEnum">The Parent enumerator (where to add)</param>
            <param name="PropId">The property ID</param>
            <param name="PropertyName">The property name</param>
            <param name="DisplayName">The property display name</param>
            <param name="Description">A property description</param>
            <returns>The property enumerator of the appended object</returns>
        </member>
        <member name="M:Sias.Core.PropertyGrid.SPropertyGrid.GetCategoryParent(VisualHint.SmartPropertyGrid.PropertyEnumerator,System.Collections.Generic.List{System.String},System.Collections.Generic.List{VisualHint.SmartPropertyGrid.PropertyEnumerator},System.ComponentModel.PropertyDescriptor)">
            <summary>
            
            </summary>
            <param name="ParentEnum"></param>
            <param name="Categories"></param>
            <param name="CatEnum"></param>
            <param name="pd"></param>
            <returns></returns>
        </member>
        <member name="M:Sias.Core.PropertyGrid.SPropertyGrid.AppendSubProperties(System.Object,VisualHint.SmartPropertyGrid.PropertyEnumerator,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.ComponentModel.PropertyDescriptor},System.Collections.Generic.List{System.ComponentModel.PropertyDescriptor},System.String,System.String)">
            <summary>
            Append all sub properties of <paramref name="obj"/>
            </summary>
            <param name="obj">The object of which the properties are appended</param>
            <param name="ParentEnum">The parent enumerator</param>
            <param name="Categories">The list of used categories</param>
            <param name="Value_pdc">The descriptor list of the value properties</param>
            <param name="Array_pdc">The descriptor list of the array properties</param>
            <param name="DisplayNamePrefix">Display name prefix</param>
            <param name="DescriptionPrefix">Description prefix</param>
            <returns>The Property enumerator of the first added property</returns>
        </member>
        <member name="M:Sias.Core.PropertyGrid.SPropertyGrid.AppendObject(System.Object,System.Object,VisualHint.SmartPropertyGrid.PropertyEnumerator,System.Int32,System.String,System.String,System.String)">
            <summary>
            Append sub object <paramref name="obj"/>
            
            In difference to AppendSubObject this method does not recognize if the object implements ISPropertyGridExtension.
            So it can be called from an object implementing ISPropertyGridExtension to add itself.
            </summary>
            <param name="obj">The object to add to the grid</param>
            <param name="Parent">The Parent of the object</param>
            <param name="ParentEnum">The Parent enumerator (where to add)</param>
            <param name="PropId">The property ID</param>
            <param name="PropertyName">The property name</param>
            <param name="DisplayName">The property display name</param>
            <param name="Description">A property description</param>
            <returns>The property enumerator of the appended object</returns>
        </member>
        <member name="M:Sias.Core.PropertyGrid.SPropertyGrid.IsTypeConverterValid(System.ComponentModel.TypeConverter)">
            <summary>
            Check if the given type converter is allowed to be used for serialization.
            </summary>
            <param name="tc">The type converter to check </param>
            <returns>True if type converter is valid, otherwise false.</returns>
        </member>
        <member name="F:Sias.Core.PropertyGrid.SPropertyGrid.UseOldSelectedObject">
            <summary>
            This dummy flag is available to force Smart property grid compatible working
            </summary>
        </member>
        <member name="F:Sias.Core.PropertyGrid.SPropertyGrid._SelectedObjects">
            <summary>Selected objects field</summary>
        </member>
        <member name="M:Sias.Core.PropertyGrid.SPropertyGrid.SaveNodeStates">
            <summary>
            Save the property grids node states
            </summary>
            <returns>the concerning node state objects</returns>
        </member>
        <member name="M:Sias.Core.PropertyGrid.SPropertyGrid.RestoreNodeStates(System.Object)">
            <summary>
            restore the property grids node state
            </summary>
            <param name="oldStates"></param>
        </member>
        <member name="P:Sias.Core.PropertyGrid.SPropertyGrid.PropertyComparer">
            <summary>
            Property comparer
            </summary>
        </member>
        <member name="P:Sias.Core.PropertyGrid.SPropertyGrid.RootCatName">
            <summary>
            Root category name
            </summary>
        </member>
        <member name="P:Sias.Core.PropertyGrid.SPropertyGrid.DefaultExpandLevel">
            <summary>Default expand level property</summary>
        </member>
        <member name="P:Sias.Core.PropertyGrid.SPropertyGrid.SelectedObjects">
            <summary>Selected objects property</summary>
        </member>
        <member name="P:Sias.Core.PropertyGrid.SPropertyGrid.SelectedObject">
            <summary>
            Getting / setting the grids selected object
            </summary>
        </member>
        <member name="T:Sias.Core.SPosition">
            <summary>
            Position class
            
            This class defines an absolute position on the robot. An absolute
            position is defined by its x,y and z coordinates.
            </summary>
        </member>
        <member name="F:Sias.Core.SPosition.x">
            <summary>X position variable</summary>
        </member>
        <member name="F:Sias.Core.SPosition.y">
            <summary>Y position variable</summary>
        </member>
        <member name="F:Sias.Core.SPosition.z">
            <summary>Z position variable</summary>
        </member>
        <member name="M:Sias.Core.SPosition.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:Sias.Core.SPosition.#ctor(System.Double,System.Double)">
            <summary>Constructor with X and Y position</summary>
        </member>
        <member name="M:Sias.Core.SPosition.#ctor(System.Double,System.Double,System.Double)">
            <summary>Constructor with X, Y and Z position</summary>
        </member>
        <member name="M:Sias.Core.SPosition.#ctor(Sias.Core.SPosition)">
            <summary>Copy Constructor</summary>
        </member>
        <member name="M:Sias.Core.SPosition.#ctor(System.String)">
            <summary>Copy Constructor</summary>
        </member>
        <member name="M:Sias.Core.SPosition.op_Addition(Sias.Core.SPosition,Sias.Core.SPosition)">
            <summary>operator +: add X, Y and Z positions</summary>
        </member>
        <member name="M:Sias.Core.SPosition.op_Subtraction(Sias.Core.SPosition,Sias.Core.SPosition)">
            <summary>operator -: subtract X, Y and Z positions</summary>
        </member>
        <member name="M:Sias.Core.SPosition.op_Multiply(Sias.Core.SPosition,Sias.Core.SPosition)">
            <summary>operator *: add X, Y and Z positions</summary>
        </member>
        <member name="M:Sias.Core.SPosition.op_Multiply(Sias.Core.SPosition,System.Double)">
            <summary>operator *: add X, Y and Z positions</summary>
        </member>
        <member name="M:Sias.Core.SPosition.op_Division(Sias.Core.SPosition,Sias.Core.SPosition)">
            <summary>operator *: add X, Y and Z positions</summary>
        </member>
        <member name="M:Sias.Core.SPosition.op_Division(Sias.Core.SPosition,System.Double)">
            <summary>operator *: add X, Y and Z positions</summary>
        </member>
        <member name="M:Sias.Core.SPosition.ToString">
            <summary>returns a string representation of the SPosition</summary>
            <returns>string representation of the SPosition</returns>
        </member>
        <member name="M:Sias.Core.SPosition.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object as copy of the current instance</returns>
        </member>
        <member name="E:Sias.Core.SPosition.OnXChanging">
            <summary>X value changing event</summary>
        </member>
        <member name="E:Sias.Core.SPosition.OnYChanging">
            <summary>Y value changing event</summary>
        </member>
        <member name="E:Sias.Core.SPosition.OnZChanging">
            <summary>Z value changing event</summary>
        </member>
        <member name="P:Sias.Core.SPosition.X">
            <summary>X position</summary>
        </member>
        <member name="P:Sias.Core.SPosition.Y">
            <summary>Y position</summary>
        </member>
        <member name="P:Sias.Core.SPosition.Z">
            <summary>Z position</summary>
        </member>
        <member name="P:Sias.Core.SPosition.SPG_Summary">
            <summary>
            Summary property
            
            This special property defined and assigns string representation of the 
            position object. This will be used with the sias property grid.
            </summary>
        </member>
        <member name="T:Sias.Core.SPosition.ValueChangeDelegate">
            <summary>
            Value change delegate.
            This delegate gets called before an SPosition property gets changed
            </summary>
            <param name="OrgObj">origin SPosition object</param>
            <param name="NewPos">new value</param>
        </member>
        <member name="T:Sias.Core.SPositionConverter">
            <summary>
            SPosition converter
            </summary>
        </member>
        <member name="M:Sias.Core.SPositionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one type to the type of this converter.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context. </param>
            <param name="sourceType">A Type that represents the type you want to convert from.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Sias.Core.SPositionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the 
            specified context and culture information.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">The CultureInfo to use as the current culture.</param>
            <param name="value">The Object to convert.</param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="M:Sias.Core.SPositionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">A CultureInfo. If a null reference (Nothing in Visual Basic) is passed, the current culture is assumed.</param>
            <param name="value">The Object to convert.</param>
            <param name="destinationType">The Type to convert the value parameter to. </param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="T:Sias.Core.SPositionCollection">
            <summary>
            Position collection
            </summary>
        </member>
        <member name="M:Sias.Core.SPositionCollection.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="P:Sias.Core.SPositionCollection.Item(System.Int32)">
            <summary>
            Gets or sets the SPosition at the specified index in the collection. 
            </summary>
            <param name="index">Index of the SPosition</param>
            <returns>An SPosition at each valid index.</returns>
        </member>
        <member name="T:Sias.Core.SGripPosOptions">
            <summary>Gripper position options</summary>
        </member>
        <member name="F:Sias.Core.SGripPosOptions.NormalMove">
            <summary>Normal, unrestricted move</summary>
        </member>
        <member name="F:Sias.Core.SGripPosOptions.SpeedBit0">
            <summary>Use Full Speed mode</summary>
        </member>
        <member name="F:Sias.Core.SGripPosOptions.SpeedBit1">
            <summary>Use 1/2 Speed mode</summary>
        </member>
        <member name="F:Sias.Core.SGripPosOptions.SpeedBit2">
            <summary>Use 1/4 Speed mode</summary>
        </member>
        <member name="F:Sias.Core.SGripPosOptions.SpeedBit3">
            <summary>Use 1/8 Speed mode</summary>
        </member>
        <member name="F:Sias.Core.SGripPosOptions.SpeedModePar">
            <summary>All Speed bits mask</summary>
        </member>
        <member name="F:Sias.Core.SGripPosOptions.RegripStart">
            <summary>
            Re-Grip start (Documentation incorrect!).
            
            If a grip position has this flag set, it means this position is a 
            Re-Grip position. That means the gripper will open there and pick 
            the item again at the next gripper position.
            </summary>
        </member>
        <member name="F:Sias.Core.SGripPosOptions.RegripEnd">
            <summary>
            Re-Grip end (Documentation incorrect!)
            
            If a grip position has this flag set, it means this position is a 
            Re-Grip position. That means the gripper will opens there and pick 
            the item again at the next gripper position.
            </summary>
        </member>
        <member name="F:Sias.Core.SGripPosOptions.UseTravelHeight">
            <summary>
            Use travel height.
            
            This option forces to use the minimum travel height instead of the 
            Z value.
            </summary>
        </member>
        <member name="F:Sias.Core.SGripPosOptions.UseMaximumHeight">
             <summary>
             Use travel height
            
             This option forces to use the maximum height instead of the Z value.
             </summary>
        </member>
        <member name="F:Sias.Core.SGripPosOptions.IgnoreWithItem">
             <summary>
             Use travel height
            
             This option forces to use the maximum height instead of the Z value.
             </summary>
        </member>
        <member name="F:Sias.Core.SGripPosOptions.IgnoreWithoutItem">
             <summary>
             Use travel height
            
             This option forces to use the maximum height instead of the Z value.
             </summary>
        </member>
        <member name="T:Sias.Core.SGripperPosition">
            <summary>
            Gripper position class
            
            The gripper position class defines a gripper position. In addition to the
            standard position properties (x, y and Z) the gripper position includes an 
            orientation property and a property for gripper options (\b see SGripPosOptions).
            
            The orientation gives the needed gripper rotation value (angle in degree). 
             - An angle of   0° means  3 o'clock. 
             - An angle of  90° means  6 o'clock. 
             - An angle of 180° means  9 o'clock. 
             - An angle of 270° means 12 o'clock. 
             .
            
            </summary>
        </member>
        <member name="F:Sias.Core.SGripperPosition.orientation">
            <summary>Orientation angle variable</summary>
        </member>
        <member name="F:Sias.Core.SGripperPosition.options">
            <summary>Grip position options variable</summary>
        </member>
        <member name="M:Sias.Core.SGripperPosition.op_Addition(Sias.Core.SGripperPosition,Sias.Core.SGripperPosition)">
            <summary>
            operator +: add the single positions of the parameters.
            </summary>
            <param name="a">First parameter</param>
            <param name="b">Second parameter</param>
            <returns>A new SGripperPosition with the sum of the positions. The grip position options 
            of the newly created SGripperPosition object equal those of the first parameter</returns>
        </member>
        <member name="M:Sias.Core.SGripperPosition.op_Addition(Sias.Core.SGripperPosition,Sias.Core.SPosition)">
            <summary>
            operator +: add the single positions of the parameters
            </summary>
            <param name="a">First parameter</param>
            <param name="b">Second parameter</param>
            <returns>A new SGripperPosition with the sum of the positions. The grip position options 
            of the newly created SGripperPosition object equal those of the first parameter</returns>
        </member>
        <member name="M:Sias.Core.SGripperPosition.op_Addition(Sias.Core.SPosition,Sias.Core.SGripperPosition)">
            <summary>
            operator +: add the single positions of the parameters
            </summary>
            <param name="a">First parameter</param>
            <param name="b">Second parameter</param>
            <returns>A new SGripperPosition with the sum of the positions. The grip position options 
            of the newly created SGripperPosition object equal those of the first parameter</returns>
        </member>
        <member name="M:Sias.Core.SGripperPosition.op_Subtraction(Sias.Core.SGripperPosition,Sias.Core.SGripperPosition)">
            <summary>
            operator -: subtract the single position of the parameters.
            </summary>
            <param name="a">First parameter</param>
            <param name="b">Second parameter</param>
            <returns>A new SGripperPosition with the difference of the positions. The grip position options 
            of the newly created SGripperPosition object equal those of the first parameter.</returns>
        </member>
        <member name="M:Sias.Core.SGripperPosition.op_Subtraction(Sias.Core.SGripperPosition,Sias.Core.SPosition)">
            <summary>
            operator -: subtract the single position of the parameters.
            </summary>
            <param name="a">First parameter</param>
            <param name="b">Second parameter</param>
            <returns>A new SGripperPosition with the difference of the positions. The grip position options 
            of the newly created SGripperPosition object equal those of the first parameter.</returns>
        </member>
        <member name="M:Sias.Core.SGripperPosition.op_Subtraction(Sias.Core.SPosition,Sias.Core.SGripperPosition)">
            <summary>
            operator -: subtract the single position of the parameters.
            </summary>
            <param name="a">First parameter</param>
            <param name="b">Second parameter</param>
            <returns>A new SGripperPosition with the difference of the positions. The grip position options 
            of the newly created SGripperPosition object equal those of the first parameter.</returns>
        </member>
        <member name="M:Sias.Core.SGripperPosition.op_Multiply(Sias.Core.SGripperPosition,Sias.Core.SPosition)">
            <summary>operator *: add X, Y and Z positions</summary>
        </member>
        <member name="M:Sias.Core.SGripperPosition.#ctor(System.Double,System.Double,System.Double,System.Double,Sias.Core.SGripPosOptions)">
            <summary>
            Constructor with all positions.
            </summary>
            <param name="px">X position</param>
            <param name="py">Y position</param>
            <param name="pz">Z position</param>
            <param name="po">Orientation angle</param>
            <param name="opt">Grip position options</param>
        </member>
        <member name="M:Sias.Core.SGripperPosition.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Sias.Core.SGripperPosition.#ctor(Sias.Core.SGripperPosition)">
            <summary>
            Copy constructor
            </summary>
            <param name="pos"></param>
        </member>
        <member name="M:Sias.Core.SGripperPosition.#ctor(System.String)">
            <summary>Copy Constructor</summary>
        </member>
        <member name="M:Sias.Core.SGripperPosition.ToString">
            <summary>
            Get a string representation of the gripper position.
            </summary>
            <returns>String representation of the gripper position</returns>
        </member>
        <member name="M:Sias.Core.SGripperPosition.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object as copy of the current instance</returns>
        </member>
        <member name="E:Sias.Core.SGripperPosition.OnOrientationChanging">
            <summary>Orientation value changing event</summary>
        </member>
        <member name="E:Sias.Core.SGripperPosition.OnOptionsChanging">
            <summary>Option value changing event</summary>
        </member>
        <member name="P:Sias.Core.SGripperPosition.Orientation">
            <summary>Orientation angle</summary>
        </member>
        <member name="P:Sias.Core.SGripperPosition.Options">
            <summary>Grip position options <see cref="T:Sias.Core.SGripPosOptions"/></summary>
        </member>
        <member name="P:Sias.Core.SGripperPosition.SPG_Summary">
            <summary>
            Summary property.
            
            This special property defines and assigns string representation of the 
            SGripper position object. This will be used with the sias property grid.
            </summary>
        </member>
        <member name="P:Sias.Core.SGripperPosition.IgnoreWithItem">
            <summary>Ignore with Item property property</summary>
        </member>
        <member name="P:Sias.Core.SGripperPosition.IgnoreWithoutItem">
            <summary>Ignore without Item property property</summary>
        </member>
        <member name="T:Sias.Core.SGripperPosition.OrientationChangingDelegate">
             <summary>
             Orientation change delegate.
            
             This delegate gets called before the orientation property gets changed
             </summary>
             <param name="OrgObj">SGripperPosition object</param>
             <param name="NewPos">new value</param>
        </member>
        <member name="T:Sias.Core.SGripperPosition.OptionChangingDelegate">
             <summary>
             Options change delegate.
            
             This delegate gets called before the options property gets changed
             </summary>
             <param name="OrgObj">SGripperPosition object</param>
             <param name="NewOpt">new value</param>
        </member>
        <member name="T:Sias.Core.SGripperPositionConverter">
            <summary>
            SGripperPosition converter.
            </summary>
        </member>
        <member name="M:Sias.Core.SGripperPositionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Return whether this converter can convert an object of one type to the type of this converter.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context. </param>
            <param name="sourceType">A Type that represents the type you want to convert from.</param>
            <returns>True if this converter can perform the conversion, otherwise false.</returns>
        </member>
        <member name="M:Sias.Core.SGripperPositionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the 
            specified context and culture information.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">The CultureInfo to use as the current culture.</param>
            <param name="value">The Object to convert.</param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="M:Sias.Core.SGripperPositionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">A CultureInfo. If a null reference (Nothing in Visual Basic) is passed, the current culture is assumed.</param>
            <param name="value">The Object to convert.</param>
            <param name="destinationType">The Type to convert the value parameter to. </param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="T:Sias.Core.SGripperPositionCollection">
            <summary>
            Collection of Gripper positions.
            </summary>
        </member>
        <member name="M:Sias.Core.SGripperPositionCollection.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="P:Sias.Core.SGripperPositionCollection.Item(System.Int32)">
            <summary>
            Get or set the SGripperPosition at the specified index in the collection. 
            </summary>
            <param name="index">Index of the SGripperPosition</param>
            <returns>An SGripperPosition at each valid index.</returns>
        </member>
        <member name="T:Sias.Core.SSaveOptions">
            <summary>
            This enum indicates the action a save method should take, if it notices
            that there exists already a file with the same name like the file it should
            write.
            </summary>
        </member>
        <member name="F:Sias.Core.SSaveOptions.AlwaysOverwrite">
            <summary>
            The method should not prompt the user but simply overwrite the file with the new one
            </summary>
        </member>
        <member name="F:Sias.Core.SSaveOptions.NeverOverwrite">
            <summary>
            The method should neither prompt the user nor overwrite the file. Simply assume the file
            has already been saved.
            </summary>
        </member>
        <member name="F:Sias.Core.SSaveOptions.AskUser">
            <summary>
            The method should prompt the user if the file already exists and let the user decide whether or
            not to overwrite the file.
            </summary>
        </member>
        <member name="T:Sias.Core.SErrorList">
            <summary>
            This class is designed as an error and warning collector.
            
            This is more a prototype, but it collects the errors, warnings and exceptions messages 
            and makes them retrievable by <see cref="P:Sias.Core.SErrorList.Errors"/> and <see cref="P:Sias.Core.SErrorList.Warnings"/> Properties.
            So at least its better then adding debug or trace outputs.
            </summary>
        </member>
        <member name="M:Sias.Core.SErrorList.HandleException(System.Exception,System.String)">
            <summary>
            Add an exception to the error list.
            </summary>
            <param name="e">Exception</param>
            <param name="info">Additional information string</param>
        </member>
        <member name="M:Sias.Core.SErrorList.HandleError(System.String)">
            <summary>
            Add an error to the error list.
            </summary>
            <param name="info">Additional information string</param>
        </member>
        <member name="M:Sias.Core.SErrorList.HandleWarning(System.String)">
            <summary>
            Add a warning to the error list.
            </summary>
            <param name="info">Additional information string</param>
        </member>
        <member name="M:Sias.Core.SErrorList.HandleLightWarning(System.String)">
             <summary>
             Add a "light" warning to the error list.
            
             For the error list a light warning is identical to a "normal" warning.
             It differs is only on the created trace output.
             </summary>
             <param name="info">Additional information string</param>
        </member>
        <member name="M:Sias.Core.SErrorList.Clear">
            <summary>
            Clear all errors and warnings.
            </summary>
        </member>
        <member name="P:Sias.Core.SErrorList.Errors">
            <summary>
            Gets all Errors of the SErrorList.
            </summary>
            <value></value>
        </member>
        <member name="P:Sias.Core.SErrorList.ErrorCount">
            <summary>Error count property (The no of errors in the SErrorlist)</summary>
        </member>
        <member name="P:Sias.Core.SErrorList.WarningCount">
            <summary>Warning count property (The no of warnings in the SErrorlist)</summary>
        </member>
        <member name="P:Sias.Core.SErrorList.Warnings">
            <summary>
            Get all warnings of the SErrorList.
            </summary>
            <value></value>
        </member>
        <member name="T:Sias.Core.SRectangle">
            <summary>
            Rectangle class
            
            This class defines an absolute or relative rectangle. A rectangle is defined by 
            its origin x/y position and its size in x and y direction. 
            </summary>
        </member>
        <member name="M:Sias.Core.SRectangle.#ctor(Sias.Core.SPosition,Sias.Core.SPosition)">
            <summary>
            Initializes a new instance of the SRectangle class with the
            specified two diagonal located corners. 
            </summary>
            <remarks>
            The Z coordinates of the SPositions will be ignored
            </remarks>
            <param name="Pos1">first corner of the rectangle.</param>
            <param name="Pos2">second corner of the rectangle.</param>
        </member>
        <member name="M:Sias.Core.SRectangle.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the SRectangle class with the specified 
            location and size.
            </summary>
            <param name="x">The y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="y">The x-coordinate of the upper-left corner of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:Sias.Core.SRectangle.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the SRectangle class with the specified 
            location and size.
            </summary>
            <param name="rect">RectanleF type to convert to SRectangle</param>
        </member>
        <member name="M:Sias.Core.SRectangle.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:Sias.Core.SRectangle.#ctor(Sias.Core.SRectangle)">
            <summary>Copy Constructor</summary>
        </member>
        <member name="M:Sias.Core.SRectangle.op_Subtraction(Sias.Core.SRectangle,Sias.Core.SPosition)">
            <summary>
            Subtract a position offset to the rectangle (move rectangle)
            </summary>
            <param name="left">The SRectangle class at the left of the operator.</param>
            <param name="right">The SPosition class at the right of the operator.</param>
            <returns>The moved rectangle</returns>
        </member>
        <member name="M:Sias.Core.SRectangle.op_Addition(Sias.Core.SRectangle,Sias.Core.SPosition)">
            <summary>
            Adds a position offset to the rectangle (move rectangle)
            </summary>
            <param name="left">The SRectangle class at the left of the operator.</param>
            <param name="right">The SPosition class at the right of the operator.</param>
            <returns>The moved rectangle</returns>
        </member>
        <member name="M:Sias.Core.SRectangle.op_Multiply(Sias.Core.SRectangle,Sias.Core.SPosition)">
            <summary>
            Adds a position offset to the rectangle (move rectangle)
            </summary>
            <param name="left">The SRectangle class at the left of the operator.</param>
            <param name="right">The SPosition class at the right of the operator.</param>
            <returns>The moved rectangle</returns>
        </member>
        <member name="M:Sias.Core.SRectangle.op_Division(Sias.Core.SRectangle,Sias.Core.SPosition)">
            <summary>
            Adds a position offset to the rectangle (move rectangle)
            </summary>
            <param name="left">The SRectangle class at the left of the operator.</param>
            <param name="right">The SPosition class at the right of the operator.</param>
            <returns>The moved rectangle</returns>
        </member>
        <member name="M:Sias.Core.SRectangle.op_Inequality(Sias.Core.SRectangle,Sias.Core.SRectangle)">
            <summary>
            Tests whether two SRectangle structures differ in location or size.
            </summary>
            <param name="left">The SRectangle class at the left of the operator.</param>
            <param name="right">The SRectangle class at the right of the operator.</param>
            <returns>true on differences in position or size else false</returns>
        </member>
        <member name="M:Sias.Core.SRectangle.op_Equality(Sias.Core.SRectangle,Sias.Core.SRectangle)">
            <summary>
            Tests whether two SRectangle structures differ in location or size.
            </summary>
            <param name="left">The SRectangle class at the left of the operator.</param>
            <param name="right">The SRectangle class at the right of the operator.</param>
            <returns>false on differences in position or size else true</returns>
        </member>
        <member name="M:Sias.Core.SRectangle.Contains(Sias.Core.SPosition)">
            <summary>
            Determines if the specified point is contained within this SRectangle.
            </summary>
            <param name="pos">The position to test</param>
            <returns>true if the position is inside the rectangle else false</returns>
        </member>
        <member name="M:Sias.Core.SRectangle.Contains(Sias.Core.SRectangle)">
            <summary>
            Determines if the specified rectangle entirely is contained within this SRectangle.
            </summary>
            <param name="rect">The rectangle to test</param>
            <returns>true if the rectangle is inside the rectangle else false</returns>
        </member>
        <member name="M:Sias.Core.SRectangle.Contains(System.Double,System.Double)">
            <summary>
            Determines if the specified point is contained within this SRectangle.
            </summary>
            <param name="x">The y-coordinate of the position to test.</param>
            <param name="y">The x-coordinate of the position to test.</param>
            <returns>true if the position is inside the rectangle else false</returns>
        </member>
        <member name="M:Sias.Core.SRectangle.Equals(System.Object)">
            <summary>
            Tests whether two SRectangle structures differ in location or size.
            </summary>
            <param name="obj">The object to check.</param>
            <returns>false on differences in position or size else true</returns>
        </member>
        <member name="M:Sias.Core.SRectangle.GetHashCode">
            <summary>
            Gets the hash code for this SRectangle structure. For information
            about the use of hash codes, see Object.GetHashCode.
            </summary>
            <returns>The hash code for this SRectangle</returns>
        </member>
        <member name="M:Sias.Core.SRectangle.Inflate(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Increases the size of the rectangle. The new rectangle will grow in all direction. 
            The resulting height is increased by dx1+dx2. 
            The resulting width is increased by dy1+dy2.
            </summary>
            <param name="dx1">The size to add at the left.</param>
            <param name="dy1">The size to add at the top.</param>
            <param name="dx2">The size to add at the right.</param>
            <param name="dy2">The size to add at the bottom.</param>
        </member>
        <member name="M:Sias.Core.SRectangle.Inflate(System.Double,System.Double)">
            <summary>
            Increases the size of the rectangle. The new rectangle will grow in all direction. 
            The resulting height is increased by 2*dx. The resulting width is increased by 2*dy.
            </summary>
            <param name="dx">The additional x size to add in both x direction.</param>
            <param name="dy">The additional y size to add in both y direction.</param>
        </member>
        <member name="M:Sias.Core.SRectangle.Inflate(System.Double)">
            <summary>
            Increases the size of the rectangle. The new rectangle will grow in all direction. 
            The resulting height and width are increased by 2*delta.
            </summary>
            <param name="delta">The additional x size to add in both x direction.</param>
        </member>
        <member name="M:Sias.Core.SRectangle.InflatTo(System.Double,System.Double)">
            <summary>
            Increases the size of the rectangle, so it will contain the original rectangle 
            and the given coordinates in addition.
            </summary>
            <param name="x">The y-coordinate of the position to include.</param>
            <param name="y">The x-coordinate of the position to include.</param>
        </member>
        <member name="M:Sias.Core.SRectangle.InflatTo(Sias.Core.SPosition)">
            <summary>
            Increases the size of the rectangle, so it will contain the original rectangle 
            and the given coordinates in addition.
            </summary>
            <param name="pos">Position to include to the rectangle</param>
        </member>
        <member name="M:Sias.Core.SRectangle.IntersectsWith(Sias.Core.SRectangle)">
            <summary>
            Determines if this rectangle intersects with rectangle.
            </summary>
            <param name="rect">The rectangle to test.</param>
            <returns>true if there is any intersection.</returns>
        </member>
        <member name="M:Sias.Core.SRectangle.IntersectsWith(System.Drawing.RectangleF)">
            <summary>
            Determines if this rectangle intersects with rectangle.
            </summary>
            <param name="rect">The rectangle to test.</param>
            <returns>true if there is any intersection.</returns>
        </member>
        <member name="M:Sias.Core.SRectangle.ToString">
            <summary>
            Get the visualization string of the rectangle
            </summary>
            <returns>visualization string of the rectangle</returns>
        </member>
        <member name="M:Sias.Core.SRectangle.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object as copy of the current instance</returns>
        </member>
        <member name="P:Sias.Core.SRectangle.X">
            <summary>
            Gets or sets the x-coordinate of the upper-left corner of this SRectangle
            structure.
            </summary>
        </member>
        <member name="P:Sias.Core.SRectangle.Y">
            <summary>
            Gets or sets the y-coordinate of the upper-left corner of this SRectangle
            structure.
            </summary>
        </member>
        <member name="P:Sias.Core.SRectangle.Width">
            <summary>
            Gets or sets the width (x-size) of this SRectangle structure.
            </summary>
        </member>
        <member name="P:Sias.Core.SRectangle.Height">
            <summary>
            Gets or sets the height (y-size) of this SRectangle structure.
            </summary>
        </member>
        <member name="P:Sias.Core.SRectangle.Left">
            <summary>
            Gets or sets the x-coordinate of the left edge of this SRectangle structure. 
            (same as SRectangle.X)
            </summary>
        </member>
        <member name="P:Sias.Core.SRectangle.Right">
            <summary>
            Gets the y-coordinate that is the sum of SRectangle.X and
            SRectangle.Width of this SRectangle structure.
            Sets the width depending on the given x coordinate of the 
            Right side of the rectangle
            </summary>
        </member>
        <member name="P:Sias.Core.SRectangle.Top">
            <summary>
            Gets or sets the y-coordinate of the left edge of this SRectangle structure. 
            (same as SRectangle.Y)
            </summary>
        </member>
        <member name="P:Sias.Core.SRectangle.Bottom">
            <summary>
            Gets the y-coordinate that is the sum of SRectangle.Y and
            SRectangle.Height of this System.Drawing.SRectangle structure.
            Sets the height depending on the given y coordinate of the 
            bottom side of the rectangle
            </summary>
        </member>
        <member name="P:Sias.Core.SRectangle.IsEmpty">
            <summary>
            Tests whether the System.Drawing.SRectangle.Width or System.Drawing.SRectangle.Height
            property of this System.Drawing.SRectangle has a value of zero.
            </summary>
        </member>
        <member name="P:Sias.Core.SRectangle.Location">
            <summary>
            Gets or sets the coordinates of the upper-left corner of this SRectangle
            structure from a given SPosition (The z value will be ignored)
            </summary>
        </member>
        <member name="P:Sias.Core.SRectangle.Empty">
            <summary>
            Represents an instance of the SRectangle class with its members
            not initialized.
            </summary>
        </member>
        <member name="T:Sias.Core.SRectangleConverter">
            <summary>
            SRectangle converter
            </summary>
        </member>
        <member name="M:Sias.Core.SRectangleConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one type to the type of this converter.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context. </param>
            <param name="sourceType">A Type that represents the type you want to convert from.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Sias.Core.SRectangleConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the 
            specified context and culture information.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">The CultureInfo to use as the current culture.</param>
            <param name="value">The Object to convert.</param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="M:Sias.Core.SRectangleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">A CultureInfo. If a null reference (Nothing in Visual Basic) is passed, the current culture is assumed.</param>
            <param name="value">The Object to convert.</param>
            <param name="destinationType">The Type to convert the value parameter to. </param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="T:Sias.Core.SRectangleCollection">
            <summary>
            SRectangle collection
            </summary>
        </member>
        <member name="M:Sias.Core.SRectangleCollection.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="P:Sias.Core.SRectangleCollection.Item(System.Int32)">
            <summary>
            Gets or sets the SRectangle at the specified index in the collection. 
            </summary>
            <param name="index">Index of the SRectangle</param>
            <returns>An SRectangle at each valid index.</returns>
        </member>
        <member name="T:Sias.Core.SArrayEditor">
            <summary>
            This form is used as array editor.
            
            The array editor is used to edit <b>arrays</b>, <b>collections</b> (lists) and <b>dictionaries</b> (including hash tables).
            </summary>
            <details>
            \image html "SArrayEditor_Form.png"
            
            The array editor supports
             - adding new elements
             - removing elements from array, list or dictionary
             - editing element data (the elements need to support property grids)
             .
            The array editor is used in the sias property grids (e.g. at the device installer) to edit any kind of 
            collection, array or dictionary properties. Of course it can also be used in custom applications.
            </details>
        </member>
        <member name="F:Sias.Core.SArrayEditor.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Sias.Core.SArrayEditor.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Sias.Core.SArrayEditor.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Sias.Core.SArrayEditor.GetAsArray">
            <summary>
            Transfer elements from the element list box to a new array
            </summary>
            <returns>An array with the elements of the element list box</returns>
        </member>
        <member name="M:Sias.Core.SArrayEditor.UpdateList(System.Collections.IList)">
            <summary>
            Transfer elements from the element list box back to the origin list.
            Therefore it is important to fire the correct collection events. 
            Thus the routine parses the origin and the new list. It calls
             - Remove for each element removed from origin array
             - Add for each new element
             - Reassign all elements with a new collection position.\n
               ATTENTION: This could make trouble when working with any kind of 
                          sorted collections.
             .
            </summary>
            <param name="OrgList"></param>
            <returns>An array with the elements of the element list box</returns>
        </member>
        <member name="M:Sias.Core.SArrayEditor.UpdateDictionary(System.Collections.IDictionary)">
            <summary>
            Update dictionary.
            This method is used to update the original dictionary:
             - it removes all entries not existing any more
             - it replaces changed entries
             - it adds new entries
             .
            </summary>
            <param name="OrgDict">The original dictionary</param>
            <returns>True if update successful, otherwise false.</returns>
        </member>
        <member name="M:Sias.Core.SArrayEditor.GetElementTypesFrom(System.Collections.ICollection,System.Type)">
            <summary>
            try to detect the selectable types 
            </summary>
            <param name="Arr">collection</param>
            <param name="BaseType">base type</param>
        </member>
        <member name="M:Sias.Core.SArrayEditor.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Sias.Core.SArrayEditor.#ctor(System.String,System.Collections.IDictionary,System.Type,System.Type)">
            <summary>
            Constructor for editing a dictionary
            </summary>
            <param name="DataName">Name of the property or data to edit</param>
            <param name="array">The dictionary object to edit</param>
            <param name="BaseKeyType">Dictionary key base type</param>
            <param name="BaseValueType">Dictionary value base type</param>
        </member>
        <member name="M:Sias.Core.SArrayEditor.#ctor(System.String,System.Collections.IList,System.Type)">
            <summary>
            Constructor for editing a list object
            </summary>
            <param name="DataName">Name of the property or data to edit</param>
            <param name="array">The list object to edit</param>
            <param name="BaseType">List element base type</param>
        </member>
        <member name="M:Sias.Core.SArrayEditor.#ctor(System.String,System.Array,System.Type)">
            <summary>
            Constructor for editing an array object
            </summary>
            <param name="DataName">Name of the property or data to edit</param>
            <param name="array">The array to edit</param>
            <param name="BaseType">Array element base type</param>
        </member>
        <member name="M:Sias.Core.SArrayEditor.AddItem">
            <summary>
            Add a new item to the item list (array, list or dictionary)
            
            This can be improved for dictionary elements by letting select a valid key type.
            </summary>
        </member>
        <member name="M:Sias.Core.SArrayEditor.addButton_Click(System.Object,System.EventArgs)">
            <summary>
            Add button: Add object to element list box
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Sias.Core.SArrayEditor.removeButton_Click(System.Object,System.EventArgs)">
            <summary>
            Remove button: remove object from element list box
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Sias.Core.SArrayEditor.importButton_Click(System.Object,System.EventArgs)">
            <summary>
            Import button: Import from XML file (not done yet)
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Sias.Core.SArrayEditor.exportButton_Click(System.Object,System.EventArgs)">
            <summary>
            Export button: Export to XML file (not done yet)
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Sias.Core.SArrayEditor.upButton_Click(System.Object,System.EventArgs)">
            <summary>
            Up button: move element up
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Sias.Core.SArrayEditor.downButton_Click(System.Object,System.EventArgs)">
            <summary>
            Down button: move element down
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Sias.Core.SArrayEditor.elementListBox_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Change element selection: Display Properties of new element
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Sias.Core.SArrayEditor.typeListBox_DoubleClick(System.Object,System.EventArgs)">
            <summary>
            This method is called when the typeListBox's DoubleClick event has been fired.
            </summary>
            <param name="sender">The <see cref="T:System.Object"/> that fired the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> of the event.</param>
        </member>
        <member name="M:Sias.Core.SArrayEditor.elementPropertyGrid_PropertyChanged(System.Object,VisualHint.SmartPropertyGrid.PropertyChangedEventArgs)">
            <summary>
            This method is called when the elementPropertyGrid's PropertyChangedEvent event has been fired.
            </summary>
            <param name="sender">The <see cref="T:System.Object"/> that fired the event.</param>
            <param name="e">The PropertyChangedEventArgs of the event.</param>
        </member>
        <member name="T:Sias.Core.SArrayEditor.DictionaryElement">
            <summary>
            Dictionary element class 
            
            The dictionary element class is used to display dictionary or has table elements
            in the property grid of the array editor form. Editing a dictionary is internally 
            like editing an array of dictionary elements.
            </summary>
        </member>
        <member name="F:Sias.Core.SArrayEditor.DictionaryElement._Key">
            <summary>Dictionary element key field</summary>
        </member>
        <member name="F:Sias.Core.SArrayEditor.DictionaryElement._Data">
            <summary>Dictionary element data field</summary>
        </member>
        <member name="M:Sias.Core.SArrayEditor.DictionaryElement.#ctor">
            <summary>
            Initializes a new instance of the <b>DictionaryElement</b> class.
            </summary>
        </member>
        <member name="M:Sias.Core.SArrayEditor.DictionaryElement.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <b>DictionaryElement</b> class.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Sias.Core.SArrayEditor.DictionaryElement.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <b>DictionaryElement</b> class.
            </summary>
            <param name="key"></param>
            <param name="data"></param>
        </member>
        <member name="M:Sias.Core.SArrayEditor.DictionaryElement.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <b>DictionaryElement</b> class.
            </summary>
            <param name="KeyType"></param>
        </member>
        <member name="M:Sias.Core.SArrayEditor.DictionaryElement.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <b>DictionaryElement</b> class.
            </summary>
            <param name="KeyType"></param>
            <param name="ValueType"></param>
        </member>
        <member name="M:Sias.Core.SArrayEditor.DictionaryElement.#ctor(System.Collections.DictionaryEntry)">
            <summary>
            Initializes a new instance of the <b>DictionaryElement</b> class.
            </summary>
            <param name="DictEntry"></param>
        </member>
        <member name="M:Sias.Core.SArrayEditor.DictionaryElement.ToString">
            <summary>
            Returns a string that represents the current <see cref="T:Sias.Core.SArrayEditor.DictionaryElement"/>.
            </summary>
            <returns>A string that represents the current <see cref="T:Sias.Core.SArrayEditor.DictionaryElement"/>.</returns>
        </member>
        <member name="P:Sias.Core.SArrayEditor.DictionaryElement.Key">
            <summary>Dictionary element key property</summary>
        </member>
        <member name="P:Sias.Core.SArrayEditor.DictionaryElement.Data">
            <summary>Dictionary element data property</summary>
        </member>
        <member name="T:Sias.Core.SErrorParameterInfo">
            <summary>
            Error parameter information class.
            
            This class handles the information concerning an error parameter.
            </summary>
        </member>
        <member name="F:Sias.Core.SErrorParameterInfo._Name">
            <summary>Error parameter name field</summary>
        </member>
        <member name="F:Sias.Core.SErrorParameterInfo._Example">
            <summary>Parameter value example field</summary>
        </member>
        <member name="M:Sias.Core.SErrorParameterInfo.#ctor(System.String,System.String)">
            <summary>
            Create error parameter information structure by defining its data.
            </summary>
            <param name="paramName">Error parameter name</param>
            <param name="paramExample">Error parameter example</param>
        </member>
        <member name="M:Sias.Core.SErrorParameterInfo.#ctor">
            <summary>
            Initialize a new instance of the <b>SErrorParameterInfo</b> class.
            </summary>
        </member>
        <member name="P:Sias.Core.SErrorParameterInfo.Name">
            <summary>Error parameter name property</summary>
        </member>
        <member name="P:Sias.Core.SErrorParameterInfo.Example">
            <summary>Parameter value example property</summary>
        </member>
        <member name="T:Sias.Core.SParameterInfoCollection">
            <summary>
            Error parameter information collection
            </summary>
        </member>
        <member name="M:Sias.Core.SParameterInfoCollection.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="P:Sias.Core.SParameterInfoCollection.Item(System.Int32)">
            <summary>
            Get or set the SErrorParameterInfo at the specified index in the collection. 
            </summary>
            <param name="index">Index of the SErrorParameterInfo</param>
            <returns>A SErrorParameterInfo at each valid index.</returns>
        </member>
        <member name="T:Sias.Core.SErrorInfo">
            <summary>
            Error information class
            
            This class handles the information concerning an error, including the error 
            code, the error message and a list of all error parameters.
            </summary>
        </member>
        <member name="F:Sias.Core.SErrorInfo._Code">
            <summary>Error code field</summary>
        </member>
        <member name="F:Sias.Core.SErrorInfo._Message">
            <summary>Error message field</summary>
        </member>
        <member name="F:Sias.Core.SErrorInfo._Remedy">
            <summary>Optional: Remedy information field</summary>
        </member>
        <member name="F:Sias.Core.SErrorInfo._Parameters">
            <summary>List of error parameters field</summary>
        </member>
        <member name="M:Sias.Core.SErrorInfo.#ctor(System.Int64,System.String,System.String,Sias.Core.SParameterInfoCollection)">
            <summary>
            Initialize a new instance of the <b>SErrorInfo</b> class.
            </summary>
            <param name="errorCode">The error code (should not be 0)</param>
            <param name="errorMessage">The error message for the error code</param>
            <param name="errorRemedy">Remedy information for the error code</param>
            <param name="errorParams">The list of parameters for the error code</param>
        </member>
        <member name="M:Sias.Core.SErrorInfo.#ctor(System.Int64,System.String,Sias.Core.SParameterInfoCollection)">
            <summary>
            Initializes a new instance of the <b>SErrorInfo</b> class.
            </summary>
            <param name="errorCode">The error code (should not be 0)</param>
            <param name="errorMessage">The error message for the error code</param>
            <param name="errorParams">The list of parameters for the error code</param>
        </member>
        <member name="M:Sias.Core.SErrorInfo.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <b>SErrorInfo</b> class.
            </summary>
            <param name="errorCode"></param>
        </member>
        <member name="M:Sias.Core.SErrorInfo.#ctor">
            <summary>
            Initializes a new instance of the <b>SErrorInfo</b> class.
            </summary>
        </member>
        <member name="M:Sias.Core.SErrorInfo.ErrorInfoString(System.Int64,System.Object,System.Object[])">
            <summary>
            Convert error information to readable text.
            
            The text includes the error code, the sender and an additional line for	each 
            additional information. Typically this method will be called in case of the 
            sender does not report information about this error by GetErrorInfos().
            </summary>
            <param name="code">The error code</param>
            <param name="sender">The sender of the error</param>
            <param name="additionalInfo">additional error information array</param>
            <returns>A string including the error information as readable text</returns>
        </member>
        <member name="F:Sias.Core.SErrorInfo._ErrorInfoExtender">
            <summary>Error information extender delegate field</summary>
        </member>
        <member name="M:Sias.Core.SErrorInfo.IsValid(Sias.Core.SErrorInfo,System.Int64)">
            <summary>
            Check if info is a valid error information block for the specified error.
            </summary>
            <param name="info">The SErrorInfo to check</param>
            <param name="code">The error code to compare</param>
            <returns>True if info is a valid error information block for the specified error code.</returns>
        </member>
        <member name="M:Sias.Core.SErrorInfo.GetErrorInfos(System.Type)">
            <summary>
            Get Error Information for the given type
            </summary>
            <param name="ErrorType">Error type</param>
            <returns>The error information collection</returns>
        </member>
        <member name="M:Sias.Core.SErrorInfo.GetErrorInfos(System.Object)">
            <summary>
            Get Error Information for the given object.
            </summary>
            <param name="ErrorObj">Error object</param>
            <returns>The error information collection</returns>
        </member>
        <member name="M:Sias.Core.SErrorInfo.GetErrorInfo(System.Type,System.Int64)">
            <summary>
            Get the error information for the specified error of the specified type.
            </summary>
            <param name="ErrorType">The type of the class reporting the error</param>
            <param name="code">The error code</param>
            <returns>The error information for the error code</returns>
        </member>
        <member name="M:Sias.Core.SErrorInfo.GetErrorInfo(System.Object,System.Int64)">
            <summary>
            Get error information for the specified error generated by ErrorObj.
            </summary>
            <param name="ErrorObj">The object which reported the error</param>
            <param name="code">The error code</param>
            <returns>The error information block or null if not found</returns>
        </member>
        <member name="M:Sias.Core.SErrorInfo.GetOriginErrorInfo(System.Type,System.Int64)">
            <summary>
            Get the origin error information directly form implemented class. 
            IThis error information is used e.g. for logging errors, as we want to 
            have the log files readable for us.
            </summary>
            <param name="ErrorType">The type of the class reporting the error</param>
            <param name="code">The error code</param>
            <returns>The error information for the error code</returns>
        </member>
        <member name="M:Sias.Core.SErrorInfo.GetErrorMessage(System.Int64,System.Object,System.Object[])">
            <summary>
            Return error information to an error message.
            
            To get the error message, the method tries to retrieve the information from the 
            sender module. I the sender does not report error information (by GetErrorInfos())
            the method will return a general error information string.
            </summary>
            <param name="code">The error code</param>
            <param name="sender">The sender of the error</param>
            <param name="additionalInfo">Additional error information array</param>
            <returns>A string including the error message</returns>
            ToDo: SToStringOptions.ToStringRepresentationValue needs to be protected for multi threading purposes
        </member>
        <member name="M:Sias.Core.SErrorInfo.GetLogErrorMessage(System.Int64,System.Object,System.Object[])">
            <summary>
            Get the log error message for the given error code at the given object. 
            In difference to GetErrorMesssage this routine returns the origin not translated error message 
            directly from class implementation. 
            </summary>
            <param name="code">The error code</param>
            <param name="sender">The sender of the error</param>
            <param name="additionalInfo">Additional error information array</param>
            <returns>A string including the error message</returns>
            ToDo: SToStringOptions.ToStringRepresentationValue needs to be protected for multi threading purposes
        </member>
        <member name="P:Sias.Core.SErrorInfo.Code">
            <summary>Error code property
            
            Take care the error code is not necessary unique over the whole system. Generally its only 
            valid for a specific error object (e.g. a device). So the error code needs always to be 
            checked in relation to the object the error reported.
            </summary>
            <remarks>The error code is not allowed to be 0</remarks>
        </member>
        <member name="P:Sias.Core.SErrorInfo.Message">
            <summary>Error message property
            The error message keeps a short readable information about the error. It can also 
            include place holders for the error parameters (\b see Parameters)
            </summary>
        </member>
        <member name="P:Sias.Core.SErrorInfo.Remedy">
            <summary>Optional: Remedy information property</summary>
        </member>
        <member name="P:Sias.Core.SErrorInfo.Parameters">
            <summary>List of error parameters property
            Each error can have a fixed list of parameters keeping additional information. E.g.
            the position where a motor is blocked or the allowed range. Each parameter has a
            name and a string representation of an example.\n
            Important: The order and count of parameters at error information need to be identical 
                       to the additional parameters given at error reporting.
            </summary>
        </member>
        <member name="P:Sias.Core.SErrorInfo.ErrorInfoExtender">
            <summary>
            Error information extender delegate property.
            
            This delegate is called if a system tries to get an error information block.
            It get the origin error information (typically from the reporting class). 
            The returned error information block is used for reporting.
            </summary>
        </member>
        <member name="T:Sias.Core.SErrorInfo.SErrorInfoExtender">
            <summary>
            Error information extender delegate 
            </summary>
            <param name="ErrorType">The type of the error object</param>
            <param name="OrgInfo">The origin error information got from object type</param>
            <returns>The extended error information</returns>
        </member>
        <member name="T:Sias.Core.SErrorInfoCollection">
            <summary>
            Error information collection.
            </summary>
        </member>
        <member name="M:Sias.Core.SErrorInfoCollection.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:Sias.Core.SErrorInfoCollection.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <b>SErrorInfoCollection</b> class.
            </summary>
            <param name="ErrorObj"></param>
        </member>
        <member name="M:Sias.Core.SErrorInfoCollection.AddErrorInfos(System.Object)">
            <summary>
            Add the error information of the given error object.
            </summary>
            <param name="ErrorObj">The object to the information from</param>
        </member>
        <member name="P:Sias.Core.SErrorInfoCollection.Item(System.Int32)">
            <summary>
            Get or set the SErrorInfo at the specified index in the collection. 
            </summary>
            <param name="index">Index of the SErrorInfo</param>
            <returns>A SErrorInfo at each valid index.</returns>
        </member>
        <member name="T:Sias.Core.MethodReplacer">
            <summary>
            Method replacer
            This class is desined to allow method replacements for a class
            implementig the IDynamicClass interface.
            </summary>
            <remarks>
            There are some preconditions to replace methods.
             - The class implementing a replaceable method requires to implement the 
               IDynamicClass interface.
             - Replaceable methods require to call GetMethodReplacer().Replaced to 
               check if the method is replaced. 
             - Replaceable methods have to get marked with the SReplaceableMethod
               Attribute.
             - Replacement methods have to get implemented static.
             - Replacement methods have to have a base class parameter as first method 
               parameter assignable to the class of the overwriting method.
             - Replacement methods have to have exactly the same type of parameters as 
               the method they should override following the base class parameter.
             .
            \b Important: An replacement method will never be called recusivly by MethodReplacer!
            </remarks>
            <example></example>
        </member>
        <member name="F:Sias.Core.MethodReplacer._BaseObject">
            <summary>base object field (weak reference)</summary>
        </member>
        <member name="M:Sias.Core.MethodReplacer.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <b>MethodReplacer</b> class.
            </summary>
            <param name="baseObject"/>
        </member>
        <member name="F:Sias.Core.MethodReplacer.Warnings">
            <summary>list of warnings</summary>
        </member>
        <member name="M:Sias.Core.MethodReplacer.ResetWarnings">
            <summary>Reset warnings</summary>
        </member>
        <member name="M:Sias.Core.MethodReplacer.TraceWarnings">
            <summary>Add replacement warnings to error list</summary>
        </member>
        <member name="M:Sias.Core.MethodReplacer.ID(System.Reflection.MethodBase)">
            <summary>
            Return method ID for logging
            </summary>
            <param name="m">method information data</param>
            <returns>The method ID</returns>
        </member>
        <member name="M:Sias.Core.MethodReplacer.InsertReplaceMethod(System.Reflection.MethodInfo,System.Reflection.MethodBase)">
            <summary>
            Add replacement method <paramref name="ReplacementMethod"/>for 
                replaceable method <paramref name="BaseMethod"/>
            </summary>
            <param name="BaseMethod">replaceable method</param>
            <param name="ReplacementMethod">replacement method</param>
            <returns>The number of replaced methods</returns>
        </member>
        <member name="M:Sias.Core.MethodReplacer.RemoveReplaceMethod(System.Reflection.MethodInfo,System.Reflection.MethodBase)">
            <summary>
            Add replacement method <paramref name="ReplacementMethod"/>for 
                replaceable method <paramref name="BaseMethod"/>
            </summary>
            <param name="BaseMethod">replaceable method</param>
            <param name="ReplacementMethod">replacement method</param>
            <returns>the number of replaced methods</returns>
        </member>
        <member name="M:Sias.Core.MethodReplacer.FindReplaceableMethod(System.Reflection.MethodBase)">
            <summary>
            Find replaceable method for defined replacement method
            </summary>
            <param name="ReplacementMethod">The methid information block of the replacement method</param>
            <returns>The method information of the replaceable method or null if not suitable replaceable method is found.</returns>
        </member>
        <member name="M:Sias.Core.MethodReplacer.Replaced(System.Reflection.MethodBase,System.Object@,System.Object[])">
            <summary>
            Optionally execute replaced method
            
            This method executed the next method in replaced method list.
            If there is not othe rreplacement the method does not execute 
            anything but returns false.
            </summary>
            <param name="m">The called base class method</param>
            <param name="result">out parameter for method result</param>
            <param name="args">method parameters</param>
            <returns>true if method executed, otherwise false</returns>
        </member>
        <member name="M:Sias.Core.MethodReplacer.Replaced(System.Object@,System.Object[])">
            <summary>
            Optionally execute replaced method (for methods with result and parameters)
            
            This method executed the next method in replaced method list.
            If there is not othe rreplacement the method does not execute 
            anything but returns false.
            </summary>
            <param name="result">out parameter for method result</param>
            <param name="args">method parameters</param>
            <returns>true if method executed, otherwise false</returns>
        </member>
        <member name="M:Sias.Core.MethodReplacer.Replaced(System.Reflection.MethodBase,System.Object[])">
            <summary>
            Optionally execute replaced method (for methods without result but parameters)
            This method executed the next method in replaced method list.
            If there is not othe rreplacement the method does not execute 
            anything but returns false.
            </summary>
            <param name="ReplaceableMethod">Method information block</param>
            <param name="args">method parameters</param>
            <returns>true if method executed, otherwise false</returns>
        </member>
        <member name="M:Sias.Core.MethodReplacer.Replaced(System.Object[])">
            <summary>
            Optionally execute replaced method (for methods without result but parameters)
            
            This method executed the next method in replaced method list.
            If there is not othe rreplacement the method does not execute 
            anything but returns false.
            </summary>
            <param name="args">method parameters</param>
            <returns>true if method executed, otherwise false</returns>
        </member>
        <member name="M:Sias.Core.MethodReplacer.Replaced(System.Reflection.MethodBase)">
            <summary>
            Optionally execute replaced method (for methods without result and parameters)
            This method executed the next method in replaced method list.
            If there is not othe rreplacement the method does not execute 
            anything but returns false.
            </summary>
            <param name="ReplaceableMethod">the method data of the method</param>
            <returns>true if method executed, otherwise false</returns>
        </member>
        <member name="M:Sias.Core.MethodReplacer.Replaced">
            <summary>
            Optionally execute replaced method (for methods without result and parameters)
            
            This method executed the next method in replaced method list.
            If there is not othe rreplacement the method does not execute 
            anything but returns false.
            </summary>
            <returns>true if method executed, otherwise false</returns>
        </member>
        <member name="M:Sias.Core.MethodReplacer.TryReplaceMethod(System.Reflection.MethodBase)">
            <summary>
            replace a single method 
            </summary>
            <param name="ReplacementMethod">The methid information block of the replacement method</param>
            <returns>true if replaced successfully otherwise false.</returns>
        </member>
        <member name="M:Sias.Core.MethodReplacer.ReplaceMethod(System.Reflection.MethodBase)">
            <summary>
            Replace a single method direct
            </summary>
            <param name="ReplacementMethod">The methid information block of the replacement method</param>
            <returns>true if replaced successfully otherwise false.</returns>
        </member>
        <member name="M:Sias.Core.MethodReplacer.ReplaceMethod(System.Type,System.String)">
            <summary>
            Replace the first working occurence of the defined method
            </summary>
            <param name="PatchClass">The class containing the replacement method(s)</param>
            <param name="MethodName">The name of the method to replace</param>
            <returns>true if replaced successfully otherwise false.</returns>
        </member>
        <member name="M:Sias.Core.MethodReplacer.ReplaceMethods(System.Type)">
            <summary>
            Use all static methods of given class as replacement candidates
            </summary>
            <param name="PatchClass">The type of the class containing the replacement methods</param>
        </member>
        <member name="M:Sias.Core.MethodReplacer.TryReleaseMethod(System.Reflection.MethodBase)">
            <summary>
            Release a defined method 
            </summary>
            <param name="ReplacementMethod">The methid information block of the replacement method</param>
            <returns>true if replaced successfully otherwise false.</returns>
        </member>
        <member name="M:Sias.Core.MethodReplacer.ReleaseMethod(System.Reflection.MethodBase)">
            <summary>
            Release the defined replacement method (if replaced)
            </summary>
            <param name="ReplacementMethod">The replacement method to remove</param>
            <returns>True if successfully removed, otherwise false</returns>
        </member>
        <member name="M:Sias.Core.MethodReplacer.ReleaseMethod(System.Type,System.String)">
            <summary>
            Release the first working occurence of the defined method
            </summary>
            <param name="PatchClass">The class containing the replacement method(s)</param>
            <param name="MethodName">The name of the method to replace</param>
            <returns>true if released successfully otherwise false.</returns>
        </member>
        <member name="M:Sias.Core.MethodReplacer.ReleaseMethods(System.Type)">
            <summary>
            Use all static methods of given class as replacement candidates
            </summary>
            <param name="PatchClass">The type of the class containing the replacement methods</param>
        </member>
        <member name="P:Sias.Core.MethodReplacer.BaseObject">
            <summary>base object property</summary>
        </member>
        <member name="T:Sias.Core.MethodReplacer.MethodReplacerInfo">
            <summary>
            Method replacer information
            
            The method replacer information block contains information 
            about the replacement method liste and execution counter for 
            one replaceable method.
            </summary>
        </member>
        <member name="F:Sias.Core.MethodReplacer.MethodReplacerInfo._ExecutionCount">
            <summary>Method execution counter field</summary>
        </member>
        <member name="F:Sias.Core.MethodReplacer.MethodReplacerInfo._Replacement">
            <summary>Method replacement field</summary>
        </member>
        <member name="M:Sias.Core.MethodReplacer.MethodReplacerInfo.#ctor">
            <summary>
            Initializes a new instance of the <b>MethodReplacerInfo</b> class.
            </summary>
        </member>
        <member name="M:Sias.Core.MethodReplacer.MethodReplacerInfo.#ctor(System.Reflection.MethodBase)">
            <summary>
            Initializes a new instance of the <b>MethodReplacerInfo</b> class.
            </summary>
            <param name="MethodReplacement"/>
        </member>
        <member name="M:Sias.Core.MethodReplacer.MethodReplacerInfo.ReplaceArgs(System.Object,System.Object[])">
            <summary>
            argument list extennder
            
            This method inserts the baseobject as first parameter in 
            the methods argument list.
            </summary>
            <param name="BaseObj">The base object</param>
            <param name="args">The origin method arguments</param>
            <returns>the new argument list including base object</returns>
        </member>
        <member name="M:Sias.Core.MethodReplacer.MethodReplacerInfo.Execute(System.Object,System.Object@,System.Object[])">
            <summary>
            Execute replaced method(s)
            </summary>
            <param name="BaseObj">Base object for execution</param>
            <param name="result">out parameter for repalcement method result</param>
            <param name="args">Origin method call arguments</param>
            <returns>true if a replacement method is found and executed otherwise false</returns>
        </member>
        <member name="P:Sias.Core.MethodReplacer.MethodReplacerInfo.ExecutionCount">
            <summary>Method execution counter property</summary>
        </member>
        <member name="P:Sias.Core.MethodReplacer.MethodReplacerInfo.Replacement">
            <summary>Method replacement property</summary>
        </member>
        <member name="T:Sias.Core.Interfaces.IDynamicClass">
            <summary>
            The IDynamicClass interface 
            
            This interface is used to mark a class as dynamic class. Dynamic 
            classes contain a method replacer and usually at least one 
            replaceable method.
            </summary>
        </member>
        <member name="M:Sias.Core.Interfaces.IDynamicClass.GetMethodReplacer">
            <summary>
            Get method replacer instance
            
            Dynamic classes have to have a method replacer instance. This method is used to 
            get the method replacer.
            </summary>
            <returns>The method replacer of the dynamic class</returns>
        </member>
        <member name="T:Sias.Core.Attributes.SReplaceableMethod">
            <summary>
            Attribute to Mark a method as replaceable method
            
            A replaceable method requires to implement calling one of the MethodReplacer.ReplaceMethods 
            to avoid origin code execution depending if a replacement method is executed. \n
            <seealso cref="T:Sias.Core.MethodReplacer"/> for details.
            </summary>
        </member>
        <member name="M:Sias.Core.Attributes.SReplaceableMethod.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Sias.Core.Attributes.SIsReplaceMethod">
            <summary>
            Attribute to Mark a method as beeing a replcaer method
            
            This attribute is only used in case MethodReplacer.ReplaceMethods or 
            MethodReplacer.ReleaseMethods for types are called.
            Only methods marked as Replacer methods are tried to replace. This avoids
            warnings about incorrect replacer methods or missing replaceable methods.
            </summary>
        </member>
        <member name="M:Sias.Core.Attributes.SIsReplaceMethod.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Sias.Core.SToStringOptions">
            <summary>
            Object to string conversion class
            
            In the sias software we want to have different ToString conversions, depending 
            on the situation. This class contains mostly static properties used for supporting 
            the different visualization modes. 
            </summary>
            <details>
            
            In general the class supports 4 different visualization modes:
             - \nlink{Sias::Core::SToStringOptions::ToStringRepresentationValue,TypeRepresentation}
               converts the object to a string including its type name. This is 
               mainly identical to the origin DotNet ToString method.
             - \nlink{Sias::Core::SToStringOptions::ToStringRepresentationValue,ObjectNameRepresentation}
               converts the object to its object name. That means
                - The value in case of value types or strings.
                - The ObjectName in case of a SObject derivate with valid name or if no Name 
                  property is available.
                - The value of a Name property (if available).
                - In all other cases the type name.
             - \nlink{Sias::Core::SToStringOptions::ToStringRepresentationValue,DefaultRepresentation}
                is a combination of object type name and object name (see above).\n
                \b Format: ObjectTypeName(ObjectName).
             - \nlink{Sias::Core::SToStringOptions::ToStringRepresentationValue,PropertyDataRepresentation}
               is a combination from object type and object property data representation.\n
               \b Format: ObjectType(ObjectData).\n
               Take care: This string representation may result in a very long string.
             .
            The used string representation can be set using the static 
            \ref SToStringOptions.ToStringRepresentation property.
            </details>
        </member>
        <member name="F:Sias.Core.SToStringOptions.ToStringRepresentation">
            <summary>
            String representation value.
            
            This value defines the string representation of the objects converted 
            to a string using the SToStringOptions class. In general this will be 
            all  objects derived from SObject.
            </summary>
        </member>
        <member name="F:Sias.Core.SToStringOptions.NameToTypeDelimiter">
            <summary>Type name delimiter for ToString()</summary>
        </member>
        <member name="F:Sias.Core.SToStringOptions.PropertyDescritionDelimiter">
            <summary>Property description delimiter for ToString()</summary>
        </member>
        <member name="F:Sias.Core.SToStringOptions.ClassPropertyDescriptionStartDelimiter">
            <summary>Property description delimiter for ToString()</summary>
        </member>
        <member name="F:Sias.Core.SToStringOptions.ClassPropertyDescritpionEndDelimiter1">
            <summary>Property description delimiter for ToString()</summary>
        </member>
        <member name="F:Sias.Core.SToStringOptions.ClassPropertyDescritpionEndDelimiter2">
            <summary>Property description delimiter for ToString()</summary>
        </member>
        <member name="F:Sias.Core.SToStringOptions.ArrayDescriptionStartDelimiter">
            <summary>Property description delimiter for ToString()</summary>
        </member>
        <member name="F:Sias.Core.SToStringOptions.ArrayElementDescriptionDelimiter">
            <summary>Property description delimiter for ToString()</summary>
        </member>
        <member name="F:Sias.Core.SToStringOptions.ArrayDescriptionEndDelimiter1">
            <summary>Property description delimiter for ToString()</summary>
        </member>
        <member name="F:Sias.Core.SToStringOptions.ArrayDescriptionEndDelimiter2">
            <summary>Property description delimiter for ToString()</summary>
        </member>
        <member name="F:Sias.Core.SToStringOptions.PropertyDescritionIntend">
            <summary>Property Intend value for ToString()</summary>
        </member>
        <member name="F:Sias.Core.SToStringOptions.ValueTypeFormats">
            <summary>Default value type formats</summary>
        </member>
        <member name="M:Sias.Core.SToStringOptions.DefineDefaultValueTypeFormats">
            <summary>(Re)set to default value type formats</summary>
        </member>
        <member name="F:Sias.Core.SToStringOptions.PropertyAttribute">
            <summary>Array of attributes for PropertyDataRepresentation.</summary>
        </member>
        <member name="M:Sias.Core.SToStringOptions.ObjectName(System.Object)">
            <summary>
            This method returns the "name" of any object.
            
            For value type the name is the standard ToString representation.\n
            For SObject types its the ObjectName.\n
            For classes with a Name property its the Name property.\n
            </summary>
            <param name="MyObject"></param>
            <returns></returns>
        </member>
        <member name="M:Sias.Core.SToStringOptions.ObjectTypeName(System.Object)">
            <summary>
            This method returns the "name" of any object.
            
            For value type the name is the standard ToString representation.\n
            For SObject types its the ObjectName.\n
            For classes with a Name property its the Name property.\n
            </summary>
            <param name="MyObject"></param>
            <returns></returns>
        </member>
        <member name="M:Sias.Core.SToStringOptions.ObjectDescription(System.Object)">
            <summary>
            Returns a string representation of the object pending 
            on the actual ToStringRepresentationValue.
            </summary>
            <param name="MyObject">Object to get the string representation from</param>
            <returns>A string representation of the object</returns>
        </member>
        <member name="M:Sias.Core.SToStringOptions.PropertyDescription(System.Object)">
            <summary>
            Returns a string representation of the properties of the given object pending 
            on the actual ToStringRepresentationValue.
            </summary>
            <param name="MyObject">Object to get the property string representation from</param>
            <returns>A string representation of the objects properties</returns>
        </member>
        <member name="P:Sias.Core.SToStringOptions.UseFlatDescrition">
            <summary>
            This option defines whether the string representation will be single lined 
            (without carriage return/linefeed = flat) or multi lined.
            </summary>
        </member>
        <member name="P:Sias.Core.SToStringOptions.PropertyIntendString">
            <summary>Property Intend string for ToString()</summary>
        </member>
        <member name="T:Sias.Core.SToStringOptions.ToStringRepresentationValue">
            <summary>
            This enumerator defines the different ToString() representation methods.
            </summary>
        </member>
        <member name="F:Sias.Core.SToStringOptions.ToStringRepresentationValue.TypeRepresentation">
            <summary>Use type name as string representation</summary>
        </member>
        <member name="F:Sias.Core.SToStringOptions.ToStringRepresentationValue.ObjectNameRepresentation">
            <summary>Use object name as string representation</summary>
        </member>
        <member name="F:Sias.Core.SToStringOptions.ToStringRepresentationValue.DefaultRepresentation">
            <summary>Use type and object name as string representation</summary>
        </member>
        <member name="F:Sias.Core.SToStringOptions.ToStringRepresentationValue.PropertyDataRepresentation">
            <summary>
            Use property data as string representation.
            
            If this option is defined SToStringOptions.PropertyAttribute defines
            the attribute(s) of the properties to get included into the string 
            representation.
            </summary>
        </member>
        <member name="F:Sias.Core.SToStringOptions.ToStringRepresentationValue.ShortPropertyDataRepresentation">
            <summary>
            Use short property data as string representation.
            
            If this option is defined SToStringOptions.PropertyAttribute defines
            the attribute(s) of the properties to get included into the string 
            representation.
            </summary>
        </member>
        <member name="T:Sias.Core.SErrorHandler">
            <summary>
            Error handler delegate.
            </summary>
            <param name="sender">The object reported the error</param>
            <param name="errorArgs">SErrorArgs with the error specific information</param>
            <param name="handled">True if already handled, false if not</param>
            <returns>True if the error is handled yet, false if not</returns>
        </member>
        <member name="T:Sias.Core.SErrorOptions">
            <summary>
            Options for error handling.
            </summary>
        </member>
        <member name="F:Sias.Core.SErrorOptions.Ok">
            <summary>Allow option OK </summary>
        </member>
        <member name="F:Sias.Core.SErrorOptions.Cancel">
            <summary>Allow option Cancel </summary>
        </member>
        <member name="F:Sias.Core.SErrorOptions.Abort">
            <summary>Allow option Abort </summary>
        </member>
        <member name="F:Sias.Core.SErrorOptions.Retry">
            <summary>Allow option Retry</summary>
        </member>
        <member name="F:Sias.Core.SErrorOptions.Ignore">
            <summary>Allow option Ignore</summary>
        </member>
        <member name="F:Sias.Core.SErrorOptions.Yes">
            <summary>Allow option Yes</summary>
        </member>
        <member name="F:Sias.Core.SErrorOptions.No">
            <summary>Allow option No</summary>
        </member>
        <member name="F:Sias.Core.SErrorOptions.Close">
            <summary>Allow option Close</summary>
        </member>
        <member name="F:Sias.Core.SErrorOptions.Continue">
            <summary>Allow option Continue</summary>
        </member>
        <member name="F:Sias.Core.SErrorOptions.Skip">
            <summary>Allow option Skip</summary>
        </member>
        <member name="F:Sias.Core.SErrorOptions.AbortIgnoreRetry">
            <summary>Allow option Abort, Ignore and retry</summary>
        </member>
        <member name="F:Sias.Core.SErrorOptions.YesNo">
            <summary>Allow option Yes and No</summary>
        </member>
        <member name="F:Sias.Core.SErrorOptions.AbortRetrySkip">
            <summary>Allow option Abort, Ignore, Retry and Skip</summary>
        </member>
        <member name="T:Sias.Core.SErrorResult">
            <summary>
            Error Result values.
            
            This values are used as results of the error handling routine(s).
            </summary>
        </member>
        <member name="F:Sias.Core.SErrorResult.None">
            <summary>No error result code now</summary>
        </member>
        <member name="F:Sias.Core.SErrorResult.Ok">
            <summary>Option OK selected (Error accepted)</summary>
        </member>
        <member name="F:Sias.Core.SErrorResult.Cancel">
            <summary>Option Cancel selected (Cancel operation)</summary>
        </member>
        <member name="F:Sias.Core.SErrorResult.Abort">
            <summary>Option Abort selected (Abort operation)</summary>
        </member>
        <member name="F:Sias.Core.SErrorResult.Retry">
            <summary>Option Retry selected (Retry operation)</summary>
        </member>
        <member name="F:Sias.Core.SErrorResult.Ignore">
            <summary>Option Ignore selected (Ignore operation)</summary>
        </member>
        <member name="F:Sias.Core.SErrorResult.Yes">
            <summary>Yes Button selected</summary>
        </member>
        <member name="F:Sias.Core.SErrorResult.No">
            <summary>No Button selected</summary>
        </member>
        <member name="F:Sias.Core.SErrorResult.Close">
            <summary>Error box closed, without decision</summary>
        </member>
        <member name="F:Sias.Core.SErrorResult.Continue">
            <summary>Continue Button selected</summary>
        </member>
        <member name="F:Sias.Core.SErrorResult.Skip">
            <summary>Option Skip selected</summary>
        </member>
        <member name="T:Sias.Core.SErrorArgs">
            <summary>
            Error argument information class.
            
            This class handles the error pending information when reporting an error.\n
            This includes
             - the error code (reporter type dependent)
             - an array with error parameters
             - the possible error options (\b see \ref SErrorOptions)
             - the actual error result value (\b see \ref SErrorResult)
             - the object which has handled the error.
             .
            </summary>
        </member>
        <member name="M:Sias.Core.SErrorArgs.#ctor(System.Int64,System.Object[],Sias.Core.SErrorOptions,Sias.Core.SErrorResult)">
            <summary>
            Create error information.
            </summary>
            <param name="code">Error code (depends on the reported object type)</param>
            <param name="additionalInfo">Additional error information (error parameters)</param>
            <param name="options">The allowed error options (\b see \ref SErrorOptions)</param>
            <param name="result">The actual error result (\b see \ref SErrorResult)</param>
        </member>
        <member name="P:Sias.Core.SErrorArgs.Code">
            <summary>
            Error Code (depends on the reported object type).
            </summary>
        </member>
        <member name="P:Sias.Core.SErrorArgs.AdditionalInfo">
            <summary>
            Additional error information (error parameters).
            </summary>
        </member>
        <member name="P:Sias.Core.SErrorArgs.Options">
            <summary>
            The allowed error options (\b see \ref Sias::Core::SErrorOptions).
            </summary>
        </member>
        <member name="P:Sias.Core.SErrorArgs.Result">
            <summary>
            The actual error result (\b see \ref Sias::Core::SErrorResult).
            <see cref="T:Sias.Core.SErrorResult"/>
            <see cref="T:Sias.Core.SErrorResult"/>
            </summary>
        </member>
        <member name="P:Sias.Core.SErrorArgs.HandledBy">
            <summary>
            The object which has handled the error. (null for none)
            </summary>
        </member>
        <member name="T:Sias.Core.SErrorManager">
             <summary>
             Error manager class.
            
             The Error manager is a static manager class, used to handle errors. Any component which 
             wants to participate on the error handling has to register itself at the error handler. 
             </summary>
             <details>
             \image HTML ErrorManagerDiagram.png
             
             An object can participate either as 
              - Listener (an object gets all error, but does not handle them)
              - Quit error handler (an object handling errors without user interface)
              - Normal error handler (an object handling errors with user interactions)
              .
             
             All objects reporting an error will call the ErrorManagers ReportError method. 
             This method calls the registered handlers and tries to get an answer on how
             to go on with this error. Therefore it will 
              - first inform all listeners, 
              - second try to handle it with the quit handler,
              - third try to handle it with the normal handler
              . 
             If the error is not handled by any handler the error manager will display an 
             internal error handling dialog, requesting the user for how to go on.
             </details>
        </member>
        <member name="F:Sias.Core.SErrorManager._BaseForm">
            <summary>Base form for error dialogs field</summary>
        </member>
        <member name="F:Sias.Core.SErrorManager.ThreadInfo">
            <summary>dictionaly of thread depending error information blocks</summary>
        </member>
        <member name="M:Sias.Core.SErrorManager.StartReporting(System.Object,System.Int64)">
            <summary>
            This method is called on start of error reporting. It get/prepares the thread 
            depending error reporting information block.
            </summary>
            <param name="sender">The error sender object (the object reporting the error)</param>
            <param name="code">The reported error code</param>
            <returns></returns>
        </member>
        <member name="M:Sias.Core.SErrorManager.EndOfReporting(Sias.Core.SErrorManager.SErrorReportingInfo)">
            <summary>
            This method is called on end of error reporting it updates/cleans
            the threading error information block 
            </summary>
            <param name="ReportInfo">The used error reporting inforamtoin block</param>
        </member>
        <member name="M:Sias.Core.SErrorManager.DefaultResult(Sias.Core.SErrorOptions)">
            <summary>
            Default error answer on defined error options
            
            This answer if given in case of exceptions or recursion problems.
            It should be as close as possible to an abort option.
            </summary>
            <param name="Options"></param>
            <returns></returns>
        </member>
        <member name="M:Sias.Core.SErrorManager.ReportError(System.Int64,System.Object,System.Object[],Sias.Core.SErrorOptions)">
            <summary>
            Iterates through the list of error handlers that have registered with the error manager and gives them the 
            opportunity to handle the error. If no error handler has been registered or none has handled the error,
            a dialog box will be displayed with the supplied information.
            </summary>
            <param name="code">The error code of the error to display</param>
            <param name="sender">The object generated the error</param>
            <param name="additionalInfo">An additional error information array</param>
            <param name="options">Error options (allowed error results)</param>
            <returns>SErrorResult indicating the reaction of the user or the error handlers on the error.</returns>
        </member>
        <member name="M:Sias.Core.SErrorManager.DisplayErrorBox(System.Int64,System.Object,System.Object[],Sias.Core.SErrorOptions)">
            <summary>
            Display error dialog 
            
            Displays an error dialog box with the supplied error information and the respective buttons.\n
            \b Important: 
            This will simply display the error default dialog but not call other error handlers.
            For a full error handling please use SErroeManager.ReportError .
            </summary>
            <param name="code">The error code of the error to display</param>
            <param name="sender">The object generated the error</param>
            <param name="additionalInfo">An additional error information array</param>
            <param name="options">Error options (allowed error results)</param>
            <returns>SErrorResult code of the clicked button</returns>
        </member>
        <member name="M:Sias.Core.SErrorManager.AddListener(Sias.Core.SErrorHandler)">
            <summary>
            Adds an error listener that does not actively handle the error, but just keeps track of its occurrence.
            </summary>
            <param name="errorHandler"></param>
            <remarks>Duplicate instances will not be added!</remarks>
        </member>
        <member name="M:Sias.Core.SErrorManager.RemoveListener(Sias.Core.SErrorHandler)">
            <summary>
            Remove the error handler delegate from the error manager.
            </summary>
            <param name="errorHandler"></param>
            <returns>
            True: if the error handler delegate was successfully removed from the error manager.\n
            False: if the error handler delegate could not be successfully removed from the error 
            manager or if it could not be found at all.
            </returns>
        </member>
        <member name="M:Sias.Core.SErrorManager.AddQuietHandler(Sias.Core.SErrorHandler)">
            <summary>
            Adds an error handler delegate that does not display any form of dialog to the user 
            but handles the error quietly in the background.
            </summary>
            <param name="errorHandler"></param>
            <remarks>Duplicate instances will not be added!</remarks>
        </member>
        <member name="M:Sias.Core.SErrorManager.RemoveQuietHandler(Sias.Core.SErrorHandler)">
            <summary>
            Removes the error handler delegate from the error manager
            </summary>
            <param name="errorHandler"></param>
            <returns>
            True: if the error handler delegate was successfully removed from the error manager.\n
            False: if the error handler delegate could not be successfully removed from the error 
            manager or if it could not be found at all.
            </returns>
        </member>
        <member name="M:Sias.Core.SErrorManager.AddHandler(Sias.Core.SErrorHandler)">
            <summary>
            Adds an error handler delegate method that displays some sort of dialog to the user.
            </summary>
            <param name="errorHandler"></param>
            <remarks>Duplicate instances will not be added!</remarks>
        </member>
        <member name="M:Sias.Core.SErrorManager.RemoveHandler(Sias.Core.SErrorHandler)">
            <summary>
            Remove the error handler delegate from the error manager.
            </summary>
            <param name="errorHandler"></param>
            <returns>
            True: if the error handler delegate was successfully removed from the error manager
            False: if the error handler delegate could not be successfully removed from the error 
            manager or if it could not be found at all.
            </returns>
        </member>
        <member name="M:Sias.Core.SErrorManager.AddCloseListener(Sias.Core.SErrorHandler)">
            <summary>
            Adds a close listener error handler 
            
            close listeners are used to inform the applicaiton about a finished error handling.
            </summary>
            <param name="errorHandler"></param>
            <remarks>Duplicate instances will not be added!</remarks>
        </member>
        <member name="M:Sias.Core.SErrorManager.RemoveCloseListener(Sias.Core.SErrorHandler)">
            <summary>
            Remove the close listener error handler delegate from the error manager.
            </summary>
            <param name="errorHandler"></param>
            <returns>
            True: if the close listener error handler delegate was successfully removed from the error manager
            False: if the error handler delegate could not be successfully removed from the error 
            manager or if it could not be found at all.
            </returns>
        </member>
        <member name="P:Sias.Core.SErrorManager.BaseForm">
            <summary>
            Base form for error dialogs
            
            This property may be used to define the base (parent) form for the default 
            sias error dialog. This allows to call the error dialog as child form of those 
            dialog making it modal to those.
            Setting/leaving this proeprty at null will show default error dialogs as non
            modal dialogs. 
            </summary>
        </member>
        <member name="T:Sias.Core.SErrorManager.SErrorStepValues">
            <summary>
            Error reporting step constants
            
            This constants are used to define the error reporting step. In case the 
            same gets called recusivly it will skip all steps already processed by 
            previos call.
            </summary>
        </member>
        <member name="T:Sias.Core.SErrorManager.SErrorReportingInfo">
            <summary>
            Error reporting information block
            
            To avoid endless recursive calls in case of reported errors in error 
            handlers we will store temporary details on each reported error details.
            </summary>
        </member>
        <member name="F:Sias.Core.SErrorManager.SErrorReportingInfo._Count">
            <summary>No of recursions on this error field</summary>
        </member>
        <member name="F:Sias.Core.SErrorManager.SErrorReportingInfo._ActualStep">
            <summary>Actual error processing field</summary>
        </member>
        <member name="M:Sias.Core.SErrorManager.SErrorReportingInfo.#ctor(System.Object,System.Int64)">
            <summary>
            Construct an error reporting information block
            </summary>
            <param name="Sender">Sender</param>
            <param name="ErrorCode">Error code</param>
        </member>
        <member name="M:Sias.Core.SErrorManager.SErrorReportingInfo.IsSameError(System.Object,System.Int64)">
            <summary>
            Check if error reporting information block is of same error
            </summary>
            <param name="Sender"></param>
            <param name="ErrorCode"></param>
            <returns>True if same is error, otherwise false.</returns>
        </member>
        <member name="P:Sias.Core.SErrorManager.SErrorReportingInfo.Count">
            <summary>No of recursions on this error property</summary>
        </member>
        <member name="P:Sias.Core.SErrorManager.SErrorReportingInfo.ActualStep">
            <summary>Actual error processing property</summary>
        </member>
        <member name="T:Sias.Core.SErrorManager.SThreadErrorInfo">
            <summary>
            Thread error information class
            
            That class contains the error reporting informatioon for one thread. 
            This information is used to avoid recursive calls to report error in 
            case a called subroutine requires to report an error.
            </summary>
        </member>
        <member name="F:Sias.Core.SErrorManager.SThreadErrorInfo._ErrorCount">
            <summary>Recursive error count field</summary>
        </member>
        <member name="F:Sias.Core.SErrorManager.SThreadErrorInfo._ReportInfo">
            <summary>Error code list field</summary>
        </member>
        <member name="M:Sias.Core.SErrorManager.SThreadErrorInfo.#ctor">
            <summary>
            Initializes a new instance of the <b>SThreadErrorInfo</b> class.
            </summary>
        </member>
        <member name="M:Sias.Core.SErrorManager.SThreadErrorInfo.AddReporting(System.Object,System.Int64)">
            <summary>
            Prepares the error reporting information block of the given sender and 
            error code.
            </summary>
            <param name="sender">The object reporting the error</param>
            <param name="code">The error code of the error to display</param>
            <returns>The error reporting </returns>
        </member>
        <member name="M:Sias.Core.SErrorManager.SThreadErrorInfo.ReportingFinished(Sias.Core.SErrorManager.SErrorReportingInfo)">
            <summary>
            Reporting of the given error reporting information block is finished
            </summary>
            <param name="info">The used error reporting information block</param>
            <returns>true if the thread error information block can get release, otherwise false</returns>
        </member>
        <member name="P:Sias.Core.SErrorManager.SThreadErrorInfo.ErrorCount">
            <summary>Recursive error count property</summary>
        </member>
        <member name="P:Sias.Core.SErrorManager.SThreadErrorInfo.ReportInfo">
            <summary>Error code list property</summary>
        </member>
        <member name="T:Sias.Core.SErrorDialogBox">
            <summary>
            Standard error dialog 
            
            This dialog is used for the standard error visualization. It will be called by 
            the \nlink{Sias::Core,SErrorManager.ReportError} method of the default error manager 
            class \ref Sias::Core::SErrorManager if no external error handler handled the error.
            </summary>
            <details>
            \image html "SErrorDialogBox.png"
            
            The error dialog uses \nlink{Sias::Core,SErrorInfo.GetErrorMessage} to get readable error 
            information. The visible reaction buttons are defined by the error options 
            (\b see \ref SErrorOptions).
            </details>
        </member>
        <member name="F:Sias.Core.SErrorDialogBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Sias.Core.SErrorDialogBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">True if managed resources should be disposed, otherwise false.</param>
        </member>
        <member name="M:Sias.Core.SErrorDialogBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Sias.Core.SErrorDialogBox.#ctor(System.Int64,System.Object,System.Object[],Sias.Core.SErrorOptions)">
            <summary>
            Creates the dialog box and generates the necessary buttons.
            </summary>
        </member>
        <member name="M:Sias.Core.SErrorDialogBox.GenerateButtons(Sias.Core.SErrorOptions)">
            <summary>
            Creates the buttons specified in the SErrorOptions parameter.
            </summary>
            <remarks>
            Text for the button labels are taken from the resources, 
            this should allow for localization.
            </remarks>
        </member>
        <member name="M:Sias.Core.SErrorDialogBox.button_Click(System.Object,System.EventArgs)">
            <summary>
            Generic button click event handler. Sets the Result property to the value corresponding of the clicked button.
            </summary>
        </member>
        <member name="P:Sias.Core.SErrorDialogBox.Result">
            <summary>
            Result value indicating which button the user selected.
            </summary>
        </member>
        <member name="T:Sias.Core.Attributes.AppendAsStandardPropertyAttribute">
            <summary>
            When this attribute is assigned to a property, it is possible to control how the property is appended.
            </summary>
            <remarks>
            In some cases it is wanted to append the properties in a standard way to the property Grid. 
            This can increase the compatibility with classes designed using the standard property gird.
            </remarks>
        </member>
        <member name="M:Sias.Core.Attributes.AppendAsStandardPropertyAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <b>AppendAsStandardPropertyAttribute</b> class.
            </summary>
            <param name="AppendAsStanard"></param>
        </member>
        <member name="M:Sias.Core.Attributes.AppendAsStandardPropertyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <b>AppendAsStandardPropertyAttribute</b> class.
            </summary>
        </member>
        <member name="M:Sias.Core.Attributes.AppendAsStandardPropertyAttribute.Equals(System.Object)">
            <summary>
            Determines whether the specified \b Object is equal to the current 
            \b AppendAsStandardPropertyAttribute or not
            </summary>
            <param name="obj">The \b Object to compare with the current \b AppendAsStandardProperty.</param>
            <returns>true if the specified \b Object is equal to the current <b>AppendAsStandardPropertyAttribute</b>;
            otherwise, false.</returns>
        </member>
        <member name="M:Sias.Core.Attributes.AppendAsStandardPropertyAttribute.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current \b AppendAsStandardPropertyAttribute</returns>
        </member>
        <member name="P:Sias.Core.Attributes.AppendAsStandardPropertyAttribute.AppendAsStandardProperty">
            <summary>
            returns true if we have to add the Property as standard property, false if not.
            
            Note: As Default we append properties as non standard properties.
            </summary>
            <value>true if we have to add the Property as standard property, false if not.</value>
        </member>
        <member name="T:Sias.Core.TypeConverters.SPropertyComparer">
            <summary>
            Property comparer
            
            This comparer compares to <see cref="T:Sias.Core.TypeConverters.SPropertyDescriptor"/> objects using the 
            SortedProperty attribute.
            </summary>
        </member>
        <member name="M:Sias.Core.TypeConverters.SPropertyComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than,
            equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>A 32-bit signed integer that indicates the relative order 
            of the objects being compared. The return value has these meanings: 
            <table>
            		<tr><th>Value</th><th>Meaning</th></tr>
            		<tr><td>Less than zero</td><td>x less than y.</td></tr>
            		<tr><td>Zero</td><td>x is equal to y.</td></tr>
            		<tr><td>Greater than zero</td><td>x is greater than y.</td></tr>
            </table>
            </returns>
        </member>
        <member name="T:Sias.Core.TypeConverters.SPropertyNameComparer">
            <summary>
            Property name comparer
            
            This comparer compares to <see cref="T:Sias.Core.TypeConverters.SPropertyDescriptor"/> objects using the 
            DisplayName attribute.
            </summary>
        </member>
        <member name="M:Sias.Core.TypeConverters.SPropertyNameComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than,
            equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>A 32-bit signed integer that indicates the relative order 
            of the objects being compared. The return value has these meanings: 
            <table>
            	<tr><th>Value               </th><th>Meaning                </th></tr>
            	<tr><td>Less than zero      </td><td>x less than y.         </td></tr>
            	<tr><td>Zero                </td><td>x is equal to y.       </td></tr>
            	<tr><td>Greater than zero   </td><td>x is greater than y.   </td></tr>
            </table>
            </returns>
        </member>
        <member name="T:Sias.Core.SThreadLock">
            <summary>
            Thread lock class.
            
            This class is defined to lock code areas and objects to allow usage in several
            threads. Therefore it uses a mutex or monitor. In addition it handles 
             - the current owner thread (The Thread working with the protected area/object)
             - a lock count (how often lock has been called from the owner thread) and
             - optionally a reference object (A reference defining the protected area or object)
             .
            </summary>
        </member>
        <member name="F:Sias.Core.SThreadLock._NextTreadLockID">
            <summary>Next Tread Lock ID field</summary>
        </member>
        <member name="F:Sias.Core.SThreadLock._DebugThreadLockID">
            <summary>Debug thread lock ID field</summary>
        </member>
        <member name="F:Sias.Core.SThreadLock._SkipThreadLockkWait">
            <summary>Skip thread lock wait field</summary>
        </member>
        <member name="M:Sias.Core.SThreadLock.SkipWaitingThreadLocks">
            <summary>
            This method may be used to skip all currently waiting thread locks.
            Instead of waiting the lock methd will retrn with false.
            </summary>
        </member>
        <member name="F:Sias.Core.SThreadLock._StopThreadLockWait">
            <summary>Stop Thread Lock Wait flag field</summary>
        </member>
        <member name="F:Sias.Core.SThreadLock._OwnerThread">
            <summary>Lock owner member</summary>
        </member>
        <member name="F:Sias.Core.SThreadLock._BlockedThread">
            <summary>The last thread blocked by thread lock field</summary>
        </member>
        <member name="F:Sias.Core.SThreadLock._LockCount">
            <summary>Lock count field (how often the mutex is locked)</summary>
        </member>
        <member name="F:Sias.Core.SThreadLock._ThreadLockID">
            <summary>Thread lock ID (unique) field</summary>
        </member>
        <member name="F:Sias.Core.SThreadLock._ReferenceObject">
            <summary>Reference object field</summary>
            
        </member>
        <member name="M:Sias.Core.SThreadLock.#ctor(System.Object)">
            <summary>
            Initialize a new instance of the <b>DeviceMutex</b> class.
            </summary>
        </member>
        <member name="M:Sias.Core.SThreadLock.ObjectID(System.Object)">
            <summary>
            Gets the ReferenceObjectName of the SThreadLock
            </summary>
            <param name="MyObject"></param>
            <returns></returns>
        </member>
        <member name="M:Sias.Core.SThreadLock.ThreadID(System.Threading.Thread)">
            <summary>
            Gets the ReferenceObjectName of the SThreadLock
            </summary>
            <param name="MyThread">The thread we ant to have a identification</param>
            <returns>Thread identification</returns>
        </member>
        <member name="M:Sias.Core.SThreadLock.LogCallStack(System.Int32,System.Int32)">
            <summary>
            log call stack as debug lines
            </summary>
            <param name="first">first method</param>
            <param name="last">last method</param>
        </member>
        <member name="M:Sias.Core.SThreadLock.TryEnter(System.Int32)">
            <summary>
            try enter mutex 
            
            only extracted to make the code more readable
            </summary>
            <param name="MaxWait_ms">mutex wait time</param>
            <returns>true if successfully entered otherwise false.</returns>
        </member>
        <member name="M:Sias.Core.SThreadLock.Exit">
            <summary>
            
            </summary>
        </member>
        <member name="M:Sias.Core.SThreadLock.IncreaseLockCount">
            <summary>
            increase lock count 
            
            This method increases the lock count and sets the 
            </summary>
        </member>
        <member name="M:Sias.Core.SThreadLock.Lock(System.Int32)">
            <summary>
            Lock object for current thread.
            
            This method locks the object. If the object is locked for another thread
            the function will wait until the object is released. If the object is not
            released in the given timeout, the function will return false.
            </summary>
            <param name="MaxWait_ms">Maximum time to wait for release</param>
            <returns>true if the object is locked successfully</returns>
        </member>
        <member name="M:Sias.Core.SThreadLock.Lock">
            <summary>
            Lock object for current thread.
            
            same as \ref Lock(int ) "Lock(3600 * 1000)" (waiting up to 1 hour).
            </summary>
        </member>
        <member name="M:Sias.Core.SThreadLock.Unlock">
            <summary>
            Unlock mutex (only once).
            </summary>
        </member>
        <member name="M:Sias.Core.SThreadLock.Release">
            <summary>
            Unlock all locks of the mutex (this releases the thread).
            </summary>
        </member>
        <member name="P:Sias.Core.SThreadLock.NextTreadLockID">
            <summary>Next Tread Lock ID property</summary>
        </member>
        <member name="P:Sias.Core.SThreadLock.DebugThreadLockID">
            <summary>Debug thread lock ID property</summary>
        </member>
        <member name="P:Sias.Core.SThreadLock.doStopThreadLockWait">
            <summary>
            Stop Thread Lock Wait flag property
            
            This property can be used to stop waiting for any thread locks.
            </summary>
        </member>
        <member name="P:Sias.Core.SThreadLock.DoWaitForThreadLock">
            <summary>check if process is interrupted property</summary>
        </member>
        <member name="P:Sias.Core.SThreadLock.OwnerThread">
            <summary>
            This property returns the thread which has actually locked 
            the device. If the device is not locked, the property returns 
            null.
            </summary>
        </member>
        <member name="P:Sias.Core.SThreadLock.BlockedThread">
            <summary>The last thread blocked by thread lock property</summary>
        </member>
        <member name="P:Sias.Core.SThreadLock.LockCount">
            <summary>Return the current lock count of the mutex</summary>
        </member>
        <member name="P:Sias.Core.SThreadLock.ThreadLockID">
            <summary>Thread lock ID (unique) property</summary>
        </member>
        <member name="P:Sias.Core.SThreadLock.IsLocked">
            <summary>
            Return true if the device is actually locked.
            </summary>
        </member>
        <member name="P:Sias.Core.SThreadLock.IsLockedForThis">
            <summary>
            Check if the mutex is owned by the calling thread.
            </summary>
            <value>true if owned by the calling thread, false if not</value>
        </member>
        <member name="P:Sias.Core.SThreadLock.ReferenceObject">
            <summary>
            Reference object property.
            
            The reference object is a reference to the object protected by the mutex. The Mutex is not planned
            to be used for more then one object.
            </summary>
        </member>
        <member name="P:Sias.Core.SThreadLock.ThreadLockInfo">
            <summary>Thread lock information details property</summary>
        </member>
        <member name="T:Sias.Core.Interfaces.ICavity">
            <summary>
            Interface for Cavities.
            
            Cavities are objects which can keep liquid. The robot devices can 
            pick from or dispense to cavities. The ICavity interface describes
            the properties and methods for requesting the cavity positions, the
            parent item and the included liquid(s).
            </summary>
        </member>
        <member name="M:Sias.Core.Interfaces.ICavity.HeightForVolume(System.Double)">
            <summary>
            Calculate the liquid surface height from given volume.
            
            This method calculates the height from a given cavity volume. This is very important
            for tracking and liquid detection. \n
            \b Important:   Cavity.HeightForVolume(Cavity.VolumeForHeight(Height)) 
                            needs to result in Height!
            </summary>
            <param name="volume">Volume [µl]</param>
            <returns>Calculated height of liquid surface</returns>
        </member>
        <member name="M:Sias.Core.Interfaces.ICavity.VolumeForHeight(System.Double)">
            <summary>
            Calculate the volume for a given liquid surface height.
            
            This method calculates the volume from a given liquid surface height. This is 
            very important for tracking and liquid detection. \n
            \b Important:   Cavity.VolumeForHeight(Cavity.HeightForVolume(Volume)) 
                            needs to result in Volume!
            </summary>
            <param name="height">Liquid surface height</param>
            <returns>Calculated volume</returns>
        </member>
        <member name="P:Sias.Core.Interfaces.ICavity.Name">
            <summary>
            Cavity name
            
            This property returns the name of the cavity. I sias layouts a cavity 
            names needs to be unique.
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ICavity.FirstPos">
            <summary>
            First corner of pipetting section
            
            This position returns the position of the first corner of the pipetting 
            section. Take care: Pipetting is allowed everywhere in the pipetting 
            section of a cavity.
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ICavity.LastPos">
            <summary>
            Second corner of pipetting section
            
            This position returns the position of the second corner of the pipetting 
            section. Take care: Pipetting is allowed everywhere in the pipetting 
            section of a cavity.
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ICavity.TravelHeight">
            <summary>
            Save travel height (where we can cross the cavity)
            
            This defines the minimum expected travel height where to move above the cavity.
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ICavity.ScanHeight">
            <summary>
            Scan start height
            
            This property returns the height where to start scanning for liquid. The position 
            should be defined at a height above the maximum possible liquid level.
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ICavity.DispenseHeight">
            <summary>
            Default dispense height
            
            This property returns the default dispense height.
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ICavity.MaxHeight">
            <summary>
            Maximum height
            
            This property defines the maximum height of the cavity. This is the lowest movable 
            height inside the cavity. Mostly this is at the physical Cavity bottom, but it may 
            be also above if the application wants to make sure a fix distance to the bottom is 
            always granted.\n
            \b Important: It is not allowed to move below the defined max height of the cavity.
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ICavity.ParentItem">
            <summary>
            Parent item
            
            This property returns the parent item of the cavity. The parent item can be any 
            kind of plate, a tube, a through or any other kind of container.
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ICavity.Liquid">
            <summary>
            Liquid information class
            
            This property returns the liquid information block of the cavity. The liquid information
            block contains the liquid(s) of cavity including liquid state(s).
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ICavity.CustomProperties">
            <summary>
            Custom Properties.
            
            This property return the custom property collection of the cavity. With custom 
            properties it is possible to get additional information (e.g. defined in a layout 
            editor) or to appends application specific information to a cavity.
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ICavity.History">
            <summary>
            Cavity History (mostly liquid history)
            
            The History member is designed to keep the History of the cavity. It can be used from 
            any method to store what has been done with/at the ICavity. E.g. a PickLiquid method can 
            record that liquid has been removed from the Cavity. \n
            \b Important: If the property returns null a method is not allowed to add history entries.
            </summary>
        </member>
        <member name="T:Sias.Core.Interfaces.SCavityCollection">
            <summary>
            Cavity collection 
            
            This class manages a collection of cavities (\b see \ref ICavioty).
            In Addition to the "normal" collection properties it defines height arrays 
            for travel, start scan, dispense and maximum height.
            </summary>
        </member>
        <member name="M:Sias.Core.Interfaces.SCavityCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Sias.Core.Interfaces.SCavityCollection.#ctor(System.Boolean)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Sias.Core.Interfaces.SCavityCollection.SetAccessMode(System.Object,Sias.Core.Interfaces.SAccessMode,System.Int32)">
            <summary>
            Set access mode for all cavities in the cavity collection.
            </summary>
        </member>
        <member name="M:Sias.Core.Interfaces.SCavityCollection.SetAccessMode(System.Object,Sias.Core.Interfaces.SAccessMode[],System.Int32)">
            <summary>
            Set access mode for all cavities in the cavity collection
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SCavityCollection.Item(System.Int32)">
            <summary>
            Get/set the ICavity at the specified index in the collection. 
            </summary>
            <param name="index">Index of the ICavity</param>
            <returns>An ICavity at each valid index.</returns>
        </member>
        <member name="P:Sias.Core.Interfaces.SCavityCollection.DisableHistory">
            <summary>Disable Histories property</summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SCavityCollection.TravelHeight">
            <summary>
            Get the travel heights of all included ICavity objects.
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SCavityCollection.ScanHeight">
            <summary>
            Get the scan heights of all included ICavity objects.
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SCavityCollection.DispenseHeight">
            <summary>
            Get the dispense heights of all included ICavity objects.
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SCavityCollection.MaxHeight">
            <summary>
            Get the maximum heights of all included ICavity objects.
            </summary>
        </member>
        <member name="T:Sias.Core.Interfaces.ILayoutDevice">
            <summary>
            Interface for layout devices 
            
            Some devices will need layout depending data. When using sias layouts 
            this layout specific data is defined in the layout editor and passed by
            the layout device interface. 
            This information is typically used on \ref sec_attachlayout "device attachment".
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ILayoutDevice.Name">
            <summary>
            Name of the layout device object
            
            This property defines the name of the layout device. For a good
            \ref sec_attachlayout "device attachment" it is recommended to use the
            same name for the layout device as for the corresponding device in the 
            robot configuration. 
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ILayoutDevice.DeviceType">
            <summary>
            Device type name (class name)
            
            This property defines the name of the device type. This means the DotNet 
            class name of the device component class.
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ILayoutDevice.DisplayMode">
            <summary>
            Display Mode index
            
            This will be used to change the device visualization. In General two indexes are defined.
            0 for a not active device and 1 for an active device. A layout device can define more then 
            this two visualization possibilities (images).
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ILayoutDevice.DisplayModeString">
            <summary>
            Display Mode string
            
            This will be used to change the device visualization. In difference to the index 
            each layout component will display fitting to the display mode string. If a component
            has no visualization for a given string the default visualization  will be displayed.
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ILayoutDevice.CustomProperties">
            <summary>
            Custom Properties.
            
            This property returns the custom property collection of the layout device. With 
            custom properties it is possible to get additional information (e.g. defined in 
            a layout editor) or to appends application specific information to a layout device.
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ILayoutDevice.DeviceAssignment">
            <summary>
            Device assignment data
            
            This property keeps the device type specific layout component information. This 
            information is used on \ref sec_attachlayout "device attachment" to setup the
            corresponding robot device properties.
            </summary>
            <details>
            Device classes for \ref AccessibleDevices may define properties for those 
            information connected to the layout. This may be a 
             - the slot of a shaker
             - the cover of a heated position device or even
             - a simple position offset.
            This properties have to be marked using the 
                \ref SLayoutElementAttribute "layout element attribute".
            When creating a layout device on the sias layout editor the user has to connect 
            layout components to the defined layout element properties. This property values 
            are stored and passed using the ILayoutDevice.DeviceAssignment hash table.
            
            The hash table contains the device class property name as a key (string) and the
            property value as data (object of property type).
            </details>
        </member>
        <member name="P:Sias.Core.Interfaces.ILayoutDevice.Position">
            <summary>
            Layout device reference position.
            
            This property returns the layout device reference position.
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.ILayoutDevice.Orientation">
            <summary>
            Layout device orientation.
            
            This property returns the Layout device orientation. The Layout device 
            orientation defines the absolute orientation of the Layout device.
            </summary>
        </member>
        <member name="T:Sias.Core.Interfaces.SLayoutDeviceCollection">
            <summary>
            Layout device collection
            
            This class handles a collection of objects implementing the 
            IItem interface.
            </summary>
        </member>
        <member name="M:Sias.Core.Interfaces.SLayoutDeviceCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Sias.Core.Interfaces.SLayoutDeviceCollection.Item(System.Int32)">
            <summary>
            Gets or sets the IItem at the specified index in the collection. 
            </summary>
            <param name="index">Index of the IItem</param>
            <returns>An IItem at each valid index.</returns>
        </member>
        <member name="T:Sias.Core.TypeConverters.STypeConverter">
            <summary>
            Sias object type converter.
            
            This type converter is designed to provide additional information for
            property grids. 
            </summary>
            This class makes it possible to 
             - globalize property display names and descriptions,
             - sort properties and 
             - set the DisplayName to a property with an attribute
             .
            Also all property characteristics can be changed dynamically if needed.
            <remarks>
            The this type converter to a class enables globalization and dynamic property 
            characteristics.
            <para/>
            The display name and description for a property are obtained
            from a resource file if specified by the 
            <see cref="T:Sias.Core.Attributes.SGlobalizedPropertyAttribute"/>.
            The resource file is expected to be named namespace.classname.resources.
            Resources are expected to be named PropertyName.DisplayName,
            PropertyName.Description PropertyName.Category (all optional).
            Also sorts using the \b SortedProperty attribute.
            <para/>
            Specify DisplayNameAttribute for simpler usage
            <para/>
            If a property has the <see cref="T:Sias.Core.Attributes.SPropertyAttributesProvider"/> attribute
            then the delegate specified is called for its runtime PropertyAttribute.
            <para/>
            <seealso cref="T:Sias.Core.Attributes.SGlobalizedPropertyAttribute"/>
            <seealso cref="T:Sias.Core.Attributes.SGlobalizedTypeAttribute"/>
            <seealso cref="T:Sias.Core.Attributes.SPropertyAttributesProvider"/>
            </remarks>
        </member>
        <member name="M:Sias.Core.TypeConverters.STypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Returns a collection of properties for the type of array specified by the value parameter.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="value">An Object that specifies the type of array for which to get properties.</param>
            <param name="attributes">An array of type Attribute that is used as a filter.</param>
            <returns>A PropertyDescriptorCollection with the properties that are exposed for this 
            data type, or a null reference (Nothing in Visual Basic) if there are no properties.</returns>
        </member>
        <member name="M:Sias.Core.TypeConverters.STypeConverter.oldGetPropertyAttributes(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            Get property attributes for given property descriptor and target object.
            </summary>
        </member>
    </members>
</doc>
